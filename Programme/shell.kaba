#define __OS__
#define __CODE_ORIGIN__ 0x00a00000
#define __VARIABLE_OFFSET__ 0x00a40000
#define __ADD_ENTRY_POINT__

extern void init_lib()
extern int *malloc_first_free

extern int stdin, stdout

extern void exit(int r)
extern int execute(string arg[])
extern int open(string filename)
extern void close(int h)
extern int read(int h, cstring *buf, int size)
extern int write(int h, cstring *buf, int size)
extern int getpid()
extern string getcwd()
extern int chdir(string dir)
extern int waitpid(int pid, void *status, bool block)
extern int kill(int pid, int signal)

bool shift

string command

class Variable
	string name, value
class VariableSet
	Variable *var[]
	Variable *get(string name)
		for v in var
			if v.name == name
				return v
		Variable *v = new Variable
		v.name = name
		var.add(v)
		return v
	void show()
		for v in var
			print v.name + " = " + v.value + "\n"
VariableSet vars

class Job
	string cmd
	int pid, id
	bool done
	void __init__(int _pid, int _id, string _cmd)
		pid = _pid
		id = _id
		cmd = _cmd
		done = false
	void test()
		int status
		if waitpid(pid, &status, false) == -2
			return
		vars.get("QM").value = status
		if self != jobs.fg
			print "[" + id + "] Fertig: " + cmd + "\n"
		if status < -600//-652
			print("  -- Programm hat was boeses gemacht! --\n")
		//print(" status " + status)
		done = true

class JobManager
	Job *job[]
	Job *fg
	void __init__()
		fg = nil
	int get_next_id()
		int id = 1
		for j in job
			if j.id >= id
				id = j.id + 1
		return id
	Job *get(int id)
		if (id == -1) and (job.num > 0)
			return job[job.num - 1]
		for j in job
			if j.id == id
				return j
		return nil
	Job *create(string c[], string cmd)
		bool as_bg = (c[c.num - 1] == "&")
		if as_bg
			c.remove(c.num - 1)
		int id = get_next_id()
		int pid = execute(c)
		if as_bg
			print "[" + id + "]: "
			//print pid
			print "\n"
		if pid < 0
			return nil
		Job *j = new Job(pid, id, cmd)
		job.add(j)
		if !as_bg
			fg = j
		return j
	void test_all()
		for j in job
			j.test()
		for int i, 0, job.num
			if job[i].done
				if job[i] == fg
					fg = nil
					prompt()
				delete job[i]
				job.remove(i)
				i --
	void show()
		for j in job
			print "" + j.id + " - " + j.cmd + "\n"

JobManager jobs


int getchar(int k)
	if k == 0x1c
		return 0x0a // '\n'
	if k == 0x39
		return 0x20 // ' '
	if shift
		if k == 0x0b
			return 0x3d // '='
		if k == 0x02
			return 0x21 // '!'
		if k == 0x03
			return 0x22 // '"'
		//if k == 0x04
		//	return 0x00 // 'ยง'
		if k == 0x05
			return 0x24 // '$'
		if k == 0x06
			return 0x25 // '%'
		if k == 0x07
			return 0x26 // '&'
		if k == 0x08
			return 0x2f // '/'
		if k == 0x09
			return 0x28 // '('
		if k == 0x0a
			return 0x29 // ')'
		if k == 0x0c
			return 0x5f // '_'
		if k == 0x34
			return 0x3a // ':'
		if k == 0x33
			return 0x3b // ';'
			
		if k == 0x1e
			return 0x41 // 'A'
		if k == 0x30
			return 0x42
		if k == 0x2e
			return 0x43
		if k == 0x20
			return 0x44
		if k == 0x12
			return 0x45
		if k == 0x21
			return 0x46
		if k == 0x22
			return 0x47 // 'G'
		if k == 0x23
			return 0x48
		if k == 0x17
			return 0x49
		if k == 0x24
			return 0x4a
		if k == 0x25
			return 0x4b
		if k == 0x26
			return 0x4c
		if k == 0x32
			return 0x4d // 'M'
		if k == 0x31
			return 0x4e
		if k == 0x18
			return 0x4f
		if k == 0x19
			return 0x50
		if k == 0x10
			return 0x51
		if k == 0x13
			return 0x52 // 'R'
		if k == 0x1f
			return 0x53
		if k == 0x14
			return 0x54
		if k == 0x16
			return 0x55
		if k == 0x2f
			return 0x56
		if k == 0x11
			return 0x57
		if k == 0x2d
			return 0x58 // 'X'
		if k == 0x15
			return 0x59
		if k == 0x2c
			return 0x5a
	else
		if k == 0x0b
			return 0x30 // '0'
		if k == 0x02
			return 0x31
		if k == 0x03
			return 0x32
		if k == 0x04
			return 0x33
		if k == 0x05
			return 0x34
		if k == 0x06
			return 0x35
		if k == 0x07
			return 0x36
		if k == 0x08
			return 0x37
		if k == 0x09
			return 0x38
		if k == 0x0a
			return 0x39
		if k == 0x0c
			return 0x2d // '-'
		if k == 0x34
			return 0x2e // '.'
		if k == 0x33
			return 0x2c // ','
			
		if k == 0x1e
			return 0x61 // 'a'
		if k == 0x30
			return 0x62
		if k == 0x2e
			return 0x63
		if k == 0x20
			return 0x64
		if k == 0x12
			return 0x65
		if k == 0x21
			return 0x66
		if k == 0x22
			return 0x67 // 'g'
		if k == 0x23
			return 0x68
		if k == 0x17
			return 0x69
		if k == 0x24
			return 0x6a
		if k == 0x25
			return 0x6b
		if k == 0x26
			return 0x6c
		if k == 0x32
			return 0x6d // 'm'
		if k == 0x31
			return 0x6e
		if k == 0x18
			return 0x6f
		if k == 0x19
			return 0x70
		if k == 0x10
			return 0x71
		if k == 0x13
			return 0x72 // 'r'
		if k == 0x1f
			return 0x73
		if k == 0x14
			return 0x74
		if k == 0x16
			return 0x75
		if k == 0x2f
			return 0x76
		if k == 0x11
			return 0x77
		if k == 0x2d
			return 0x78 // 'x'
		if k == 0x15
			return 0x79
		if k == 0x2c
			return 0x7a
	return -1

void prompt()
	print(getcwd() + ": ")

string parse_var_name(string cmd, int pos)
	string name
	for int i, pos, cmd.num
		if cmd[i] == ' ' or cmd[i] == '"' or cmd[i] == '$'
			break
		name.add(cmd[i])
	return name

string parse_single(string cmd, int *pos)
	string t
	bool in_string = false
	for int j, *pos, cmd.num
		if cmd[j] == ' ' and !in_string
			break
		if cmd[j] == '"'
			in_string = ! in_string
		else if cmd[j] == '$'
			string var_name = parse_var_name(cmd, j+1)
			t += vars.get(var_name).value
			j += var_name.num
		else
			t.add(cmd[j])
		*pos = j
	return t

void parse(string cmd0, string c[])
	string cmd = cmd0
	for int i, 0, cmd.num
		if cmd[i] == ' '
			continue
		string t = parse_single(cmd, &i)
		if t.num > 0
			if t[0] == '#'
				break
		c.add(t)

void execute_assign(string cmd)
	string a[] = cmd.explode("=")
	if a.num == 2
		vars.get(a[0]).value = a[1]

bool execute_job(string c[], string cmd)
	Job *j = jobs.create(c, cmd)
	return j

void do_fg(string c[])
	int id = -1
	if c.num >= 2
		id = c[1].int()
	Job *j = jobs.get(id)
	if j
		jobs.fg = j
	else
		print "kein Job\n"

void do_cd(string c[])
	if c.num > 1
		if chdir(c[1]) != 0
			print "kein gueltiges Verzeichnis: " + c[1] + "\n"
	else
		print("Verzeichnis?\n")

void exec(string cmd)
	string cmd0 = cmd
	string c[]
	parse(cmd, c)
	if c.num == 0
		return
	//print(c.join(" - ")+"|\n")
	string cc = c[0]
	if cc.find("=", 0) > 0
		execute_assign(cc)
	else if cc == "vars"
		vars.show()
	else if cc == "jobs"
		jobs.show()
	else if cc == "fg"
		do_fg(c)
	else if cc == "cd"
		do_cd(c)
	else if cc == "exit"
		exit(0)
	else
		if cc[0] == '/' or cc[0] == '.'
			if execute_job(c, cmd0)
				return
		c[0] = vars.get("PATH").value + c[0]
		if execute_job(c, cmd0)
			return
		print("unbekannter Befehl: " + cc + "\n")

void process(int k)
	if jobs.fg
		return
	if (k & 0x80) > 0
		if k == 0xaa or k == 0xb6
			shift = false
		return
	int c = getchar(k)
	if c == 0x0a // '\n'
		print("\n")
		jobs.test_all()
		exec(command)
		command.clear()
		if !jobs.fg
			prompt()
	else if c > 0
		string s
		s.add(c)
		print(s)
		command.add(c)
	else if k == 0x2a or k == 0x36
		shift = true
	//else
	//	printh(&k, 2)

void main()
	init_lib()
	command.__init__()
	vars.__init__()
	vars.get("PATH").value = "/"
	jobs.__init__()
	stdin = open("/dev/keyboard")
	
	shift = false
	if stdin < 0
		print("## kann Tastatur nicht auslesen ##\n")
	else if stdout < 0
		// ... :P
		print("## kann stdout nicht oeffnen ##\n")
	else
		bool escaped = false
		prompt()
		while true
			for int i, 0, 100000
				nil
			if jobs.fg
				jobs.test_all()
			else
				cstring buf
				int r = read(stdin, &buf, 1)
				if r <= 0
					continue
				if buf[0] == 0xe0
					escaped = true
				else
					int k = buf[0]
					if escaped
						k += 0xe000
					process(k)
					escaped = false
	close(stdin)
	close(stdout)
	
	while true
		nil
