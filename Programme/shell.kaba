#define __OS__
#define __CODE_ORIGIN__ 0x00a00000
#define __VARIABLE_OFFSET__ 0xa40000
#define __ADD_ENTRY_POINT__

extern int lib__loopi(int i, int min, int max)
extern void lib___free_()

void *_p
int _i1, _i2, _i3

void prints(cstring s)
	_p = &s
	asm{
		mov eax, 0x00000004
		mov ebx, _p
		int 0x80
	}

int open(cstring filename)
	_p = &filename
	asm{
		mov eax, 0x00000005
		mov ebx, _p
		int 0x80
		mov _i1, eax
	}
	return _i1
	
void close(int h)
	_i1 = h
	asm{
		mov eax, 0x00000006
		mov ebx, _i1
		int 0x80
	}

int read(int h, cstring *buf, int size)
	_i1 = h
	_i2 = size
	_p = buf
	asm{
		mov eax, 0x00000003
		mov ebx, _i1
		mov ecx, _p
		mov edx, _i2
		int 0x80
		mov _i3, eax
	}
	return _i3


void _i2s(int i, cstring *s)
	char ttt[32]
	ttt[15] = 0
	int offset = 14
	while true
		ttt[offset] = (i % 10) + 0x30
		i /= 10
		offset --
		if i == 0
			break
	for int j, 0, 16
		s[j] = ttt[offset + 1 + j]

void printi(int i)
	cstring s
	_i2s(i, &s)
	prints(s)

int printh(cstring *data,int size)
	cstring ttt
	for int i, 0, size
		int d = data[i]
		int d1 = (d>>4)
		int d2 = (d&15)
		if d1 < 10
			ttt[0] = d1+48
		else
			ttt[0] = d1+87
		if d2<10
			ttt[1] = d2+48
		else
			ttt[1] = d2+87
		if i == size-1
			ttt[2] = 0
		else
			ttt[2] = '.'
			ttt[3] = 0
		prints(ttt)


bool shift


int getchar(int k)
	if k == 0x1c
		return 0x0a // '\n'
	if k == 0x39
		return 0x20 // ' '
	if shift
		if k == 0x0b
			return 0x3d // '='
		if k == 0x02
			return 0x21 // '!'
		if k == 0x03
			return 0x22 // '"'
		//if k == 0x04
		//	return 0x00 // 'ยง'
		if k == 0x05
			return 0x24 // '$'
		if k == 0x06
			return 0x25 // '%'
		if k == 0x07
			return 0x26 // '&'
		if k == 0x08
			return 0x2f // '/'
		if k == 0x09
			return 0x28 // '('
		if k == 0x0a
			return 0x29 // ')'
		if k == 0x0c
			return 0x5f // '_'
		if k == 0x34
			return 0x3a // ':'
		if k == 0x33
			return 0x3b // ';'
			
		if k == 0x1e
			return 0x41 // 'A'
		if k == 0x30
			return 0x42
		if k == 0x2e
			return 0x43
		if k == 0x20
			return 0x44
		if k == 0x12
			return 0x45
		if k == 0x21
			return 0x46
		if k == 0x22
			return 0x47 // 'G'
		if k == 0x23
			return 0x48
		if k == 0x17
			return 0x49
		if k == 0x24
			return 0x4a
		if k == 0x25
			return 0x4b
		if k == 0x26
			return 0x4c
		if k == 0x32
			return 0x4d // 'M'
		if k == 0x31
			return 0x4e
		if k == 0x18
			return 0x4f
		if k == 0x19
			return 0x50
		if k == 0x10
			return 0x51
		if k == 0x13
			return 0x52 // 'R'
		if k == 0x1f
			return 0x53
		if k == 0x14
			return 0x54
		if k == 0x16
			return 0x55
		if k == 0x2f
			return 0x56
		if k == 0x11
			return 0x57
		if k == 0x2d
			return 0x58 // 'X'
		if k == 0x15
			return 0x59
		if k == 0x2c
			return 0x5a
	else
		if k == 0x0b
			return 0x30 // '0'
		if k == 0x02
			return 0x31
		if k == 0x03
			return 0x32
		if k == 0x04
			return 0x33
		if k == 0x05
			return 0x34
		if k == 0x06
			return 0x35
		if k == 0x07
			return 0x36
		if k == 0x08
			return 0x37
		if k == 0x09
			return 0x38
		if k == 0x0a
			return 0x39
		if k == 0x0c
			return 0x2d // '-'
		if k == 0x34
			return 0x2e // '.'
		if k == 0x33
			return 0x2c // ','
			
		if k == 0x1e
			return 0x61 // 'a'
		if k == 0x30
			return 0x62
		if k == 0x2e
			return 0x63
		if k == 0x20
			return 0x64
		if k == 0x12
			return 0x65
		if k == 0x21
			return 0x66
		if k == 0x22
			return 0x67 // 'g'
		if k == 0x23
			return 0x68
		if k == 0x17
			return 0x69
		if k == 0x24
			return 0x6a
		if k == 0x25
			return 0x6b
		if k == 0x26
			return 0x6c
		if k == 0x32
			return 0x6d // 'm'
		if k == 0x31
			return 0x6e
		if k == 0x18
			return 0x6f
		if k == 0x19
			return 0x70
		if k == 0x10
			return 0x71
		if k == 0x13
			return 0x72 // 'r'
		if k == 0x1f
			return 0x73
		if k == 0x14
			return 0x74
		if k == 0x16
			return 0x75
		if k == 0x2f
			return 0x76
		if k == 0x11
			return 0x77
		if k == 0x2d
			return 0x78 // 'x'
		if k == 0x15
			return 0x79
		if k == 0x2c
			return 0x7a
	return -1

void strcpy(cstring *a, cstring *b)
	for int i, 0, 256
		a[i] = b[i]
		if b[i] == 0
			break

int strcmp(cstring *a, cstring *b)
	for int i, 0, 256
		if a[i] > b[i]
			return 1
		else if a[i] < b[i]
			return -1
		if a[i] == 0
			break
	return 0

void cat(cstring *filename)
	int h = open(*filename)
	if h < 0
		prints("  --kann Datei nicht oeffnen--\n")
	while true
		cstring s
		int r = read(h, &s, 128)
		if r <= 0
			break
		s[r] = 0
		prints(s)
	close(h)

void hd(cstring *filename)
	int h = open(*filename)
	if h < 0
		prints("  --kann Datei nicht oeffnen--\n")
	while true
		cstring s
		int r = read(h, &s, 128)
		if r <= 0
			break
		printh(&s, r)
	close(h)
	prints("\n")

cstring cwd

void prompt()
	prints(cwd)
	prints(": ")
	
void exec(cstring cmd)
	cstring c
	for int i, 0, 256
		if cmd[i] == 0 or cmd[i] == ' '
			c[i] = 0
			break
		c[i] = cmd[i]
	if strcmp(&c, &"cd") == 0
		strcpy(&cwd, &cmd[3])
	else if strcmp(&c, &"cat") == 0
		cat(&cmd[4])
	else if strcmp(&c, &"hd") == 0
		hd(&cmd[3])
	else if strcmp(&c, &"ls") == 0
		prints("ls....\n")
	else
		prints("unbekannter Befehl: ")
		prints(cmd)
		prints("\n")
	
cstring command
int cmd_length

void process(int k)
	if (k & 0x80) > 0
		if k == 0xaa or k == 0xb6
			shift = false
		return
	int c = getchar(k)
	if c == 0x0a // '\n'
		prints("\n")
		command[cmd_length] = 0
		if cmd_length > 0
			exec(command)
		prompt()
		cmd_length = 0
	else if c > 0
		cstring s
		s[0] = c
		s[1] = 0
		prints(s)
		command[cmd_length] = c
		cmd_length ++
	else if k == 0x2a or k == 0x36
		shift = true
	//else
	//	printh(&k, 2)

void main()
	shift = false
	cmd_length = 0
	int h = open("/dev/keyboard")
	if h >= 0
		bool escaped = false
		strcpy(&cwd, &"/")
		prompt()
		while true
			for int i, 0, 100000
				nil
			cstring s
			int r = read(h, &s, 1)
			if r > 0
				if s[0] == 0xe0
					escaped = true
				else
					int k = s[0]
					if escaped
						k += 0xe000
					process(k)
					escaped = false
		close(h)
	else
		prints("## kann Tastatur nicht auslesen ##\n")
	
	while true
		nil
