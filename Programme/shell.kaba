#define __OS__
#define __CODE_ORIGIN__ 0x00a00000
#define __VARIABLE_OFFSET__ 0x00a40000
#define __ADD_ENTRY_POINT__

extern void init_lib()
extern int *malloc_first_free

int stdin, stdout

extern void exit(int r)
extern int execute(string arg[])
extern int open(string filename)
extern void close(int h)
extern int read(int h, cstring *buf, int size)
extern int write(int h, cstring *buf, int size)
extern int getpid()

void print(string s)
	write(stdout, &s[0], s.num)


/*void _i2s(int i, cstring *s)
	char ttt[32]
	ttt[15] = 0
	int offset = 14
	while true
		ttt[offset] = (i % 10) + 0x30
		i /= 10
		offset --
		if i == 0
			break
	for int j, 0, 16
		s[j] = ttt[offset + 1 + j]*/

void printi(int i)
	/*cstring s
	_i2s(i, &s)
	prints(s)*/

int printh(cstring *data, int size)
	string ttt
	ttt.resize(3)
	for int i, 0, size
		int d = data[i]
		int d1 = (d>>4)
		int d2 = (d&15)
		if d1 < 10
			ttt[0] = d1+48
		else
			ttt[0] = d1+87
		if d2<10
			ttt[1] = d2+48
		else
			ttt[1] = d2+87
		if i == size-1
			ttt[2] = ' '
		else
			ttt[2] = '.'
		print(ttt)


bool shift


int getchar(int k)
	if k == 0x1c
		return 0x0a // '\n'
	if k == 0x39
		return 0x20 // ' '
	if shift
		if k == 0x0b
			return 0x3d // '='
		if k == 0x02
			return 0x21 // '!'
		if k == 0x03
			return 0x22 // '"'
		//if k == 0x04
		//	return 0x00 // 'ยง'
		if k == 0x05
			return 0x24 // '$'
		if k == 0x06
			return 0x25 // '%'
		if k == 0x07
			return 0x26 // '&'
		if k == 0x08
			return 0x2f // '/'
		if k == 0x09
			return 0x28 // '('
		if k == 0x0a
			return 0x29 // ')'
		if k == 0x0c
			return 0x5f // '_'
		if k == 0x34
			return 0x3a // ':'
		if k == 0x33
			return 0x3b // ';'
			
		if k == 0x1e
			return 0x41 // 'A'
		if k == 0x30
			return 0x42
		if k == 0x2e
			return 0x43
		if k == 0x20
			return 0x44
		if k == 0x12
			return 0x45
		if k == 0x21
			return 0x46
		if k == 0x22
			return 0x47 // 'G'
		if k == 0x23
			return 0x48
		if k == 0x17
			return 0x49
		if k == 0x24
			return 0x4a
		if k == 0x25
			return 0x4b
		if k == 0x26
			return 0x4c
		if k == 0x32
			return 0x4d // 'M'
		if k == 0x31
			return 0x4e
		if k == 0x18
			return 0x4f
		if k == 0x19
			return 0x50
		if k == 0x10
			return 0x51
		if k == 0x13
			return 0x52 // 'R'
		if k == 0x1f
			return 0x53
		if k == 0x14
			return 0x54
		if k == 0x16
			return 0x55
		if k == 0x2f
			return 0x56
		if k == 0x11
			return 0x57
		if k == 0x2d
			return 0x58 // 'X'
		if k == 0x15
			return 0x59
		if k == 0x2c
			return 0x5a
	else
		if k == 0x0b
			return 0x30 // '0'
		if k == 0x02
			return 0x31
		if k == 0x03
			return 0x32
		if k == 0x04
			return 0x33
		if k == 0x05
			return 0x34
		if k == 0x06
			return 0x35
		if k == 0x07
			return 0x36
		if k == 0x08
			return 0x37
		if k == 0x09
			return 0x38
		if k == 0x0a
			return 0x39
		if k == 0x0c
			return 0x2d // '-'
		if k == 0x34
			return 0x2e // '.'
		if k == 0x33
			return 0x2c // ','
			
		if k == 0x1e
			return 0x61 // 'a'
		if k == 0x30
			return 0x62
		if k == 0x2e
			return 0x63
		if k == 0x20
			return 0x64
		if k == 0x12
			return 0x65
		if k == 0x21
			return 0x66
		if k == 0x22
			return 0x67 // 'g'
		if k == 0x23
			return 0x68
		if k == 0x17
			return 0x69
		if k == 0x24
			return 0x6a
		if k == 0x25
			return 0x6b
		if k == 0x26
			return 0x6c
		if k == 0x32
			return 0x6d // 'm'
		if k == 0x31
			return 0x6e
		if k == 0x18
			return 0x6f
		if k == 0x19
			return 0x70
		if k == 0x10
			return 0x71
		if k == 0x13
			return 0x72 // 'r'
		if k == 0x1f
			return 0x73
		if k == 0x14
			return 0x74
		if k == 0x16
			return 0x75
		if k == 0x2f
			return 0x76
		if k == 0x11
			return 0x77
		if k == 0x2d
			return 0x78 // 'x'
		if k == 0x15
			return 0x79
		if k == 0x2c
			return 0x7a
	return -1

void cat(string filename)
	int h = open(filename)
	if h < 0
		print("  --kann Datei nicht oeffnen--\n")
	string s
	while true
		s.resize(128)
		int r = read(h, &s[0], 128)
		if r <= 0
			break
		s.resize(r)
		print(s)
	close(h)

void hd(string filename)
	int h = open(filename)
	if h < 0
		print("  --kann Datei nicht oeffnen--\n")
	string s
	while true
		s.resize(128)
		int r = read(h, &s[0], 128)
		if r <= 0
			break
		printh(&s[0], r)
	close(h)
	print("\n")

string cwd

void prompt()
	print(cwd)
	print(": ")

void exec(string cmd)
	string c[]
	for int i, 0, cmd.num
		if cmd[i] != ' '
			string t
			t.clear()
			for int j, i, cmd.num
				if cmd[j] == ' '
					break
				t.add(cmd[j])
				i = j
			c.add(t)
	if c.num == 0
		return
	//prints(c.join("."))
	string cc = c[0]
	if cc == "cd"
		if c.num > 1
			cwd = c[1]
		else
			print("Verzeichnis?\n")
	else if cc == "cat"
		if c.num > 1
			cat(c[1])
	else if cc == "hd"
		if c.num > 1
			hd(c[1])
	else if cc == "ls"
		print("ls....\n")
	else if cc[0] == '/'
		execute(c)
	else if cc == "exit"
		exit(0)
	else
		print("unbekannter Befehl: ")
		print(cc)
		print("\n")
	
string command

void process(int k)
	if (k & 0x80) > 0
		if k == 0xaa or k == 0xb6
			shift = false
		return
	int c = getchar(k)
	if c == 0x0a // '\n'
		print("\n")
		if command.num > 0
			exec(command)
		prompt()
		command.clear()
	else if c > 0
		string s
		s.add(c)
		print(s)
		command.add(c)
	else if k == 0x2a or k == 0x36
		shift = true
	//else
	//	printh(&k, 2)

void main()
	init_lib()
	command.__init__()
	cwd.__init__()
	stdin = open("/dev/keyboard")
	stdout = open("/dev/tty")
	
	shift = false
	if stdin < 0
		print("## kann Tastatur nicht auslesen ##\n")
	else if stdout < 0
		// ... :P
		print("## kann stdout nicht oeffnen ##\n")
	else
		bool escaped = false
		cwd = "/"
		prompt()
		while true
			for int i, 0, 100000
				nil
			cstring buf
			int r = read(stdin, &buf, 1)
			if r > 0
				if buf[0] == 0xe0
					escaped = true
				else
					int k = buf[0]
					if escaped
						k += 0xe000
					process(k)
					escaped = false
	close(stdin)
	close(stdout)
	
	while true
		nil
