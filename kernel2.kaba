#define __OS__
#define __CODE_ORIGIN__ 0x9000
#define __VARIABLE_OFFSET__ 0x200010 // > 2mb, wegen Stack!
//#define __NO_FUNCTION_FRAME__
#define __ADD_ENTRY_POINT__
//#disasm

int MemorySize

//--------------------------------------------------------------
// Text Modus

void *VideoMemory
char TextColor, TextColor2
int TextPos, TextLine
const int SCREEN_WIDTH = 80
const int SCREEN_HEIGHT = 25

void clrscr()
	cstring *d = VideoMemory
	for int i, 0, SCREEN_WIDTH * SCREEN_HEIGHT
		d[i * 2] = ' '
		d[1 * 2 + 1] = 0
	TextLine = 0
	TextPos = 0

void etm_init()
	asm{
		mov eax, 0x000b8000
		mov VideoMemory, eax
	}
	clrscr()
	TextColor = 7

void etm_shift()
	cstring *d = VideoMemory
	cstring *d2 = &d[SCREEN_WIDTH * 2]
	for int i, 0, SCREEN_WIDTH * (SCREEN_HEIGHT - 1) * 2
		d[i] = d2[i]
	d2 = &d[SCREEN_WIDTH * (SCREEN_HEIGHT - 1) * 2]
	for int i, 0, SCREEN_WIDTH
		d2[i * 2] = ' '
		d2[i * 2 + 1] = 0

void prints(cstring str)
	cstring *d = VideoMemory
	d = &d[2*(SCREEN_WIDTH * TextLine + TextPos)]
	int i = 0
	while str[i] != 0
		if str[i] != 0x0a
			d[0] = str[i]
			d[1] = TextColor
			d = &d[2]
			TextPos ++
		if (TextPos >= SCREEN_WIDTH) or (str[i] == 0x0a)
			TextPos = 0
			TextLine ++
			if TextLine >= SCREEN_HEIGHT
				etm_shift()
				TextLine --
			d = VideoMemory
			d = &d[2*(SCREEN_WIDTH * TextLine)]
		i ++

void printi(int i)
	char ttt[16]
	ttt[15]=0
	int s=14
	while true
		ttt[s]=i2c(i%10)+0x30
		i/=10
		s--
		if i == 0
			break
	cstring *p
	p = &ttt[s+1]
	prints(*p)

int printh(cstring *data,int size)
	cstring ttt
	for int i, 0, size
		int d = data[i]
		int d1 = (d>>4)
		int d2 = (d&15)
		if d1 < 10
			ttt[0] = d1+48
		else
			ttt[0] = d1+87
		if d2<10
			ttt[1] = d2+48
		else
			ttt[1] = d2+87
		if i == size-1
			ttt[2] = 0
		else
			ttt[2] = '.'
			ttt[3] = 0
		prints(ttt)

/*void WasteTime()
	int x
	for x, 0, 100000
		nil*/

void read_data_from_init()
	asm{
		mov eax, [0x00005100]
		mov MemorySize, eax
	}

void main()
	read_data_from_init()
	etm_init()
	
	prints("Willkommen zu Eusebius 0.2.0   (c) by MichiSoft TM 2013\n")
	printi(MemorySize)
	prints(" kb\n")
	printh(&"hallo", 5)
	
	while true
		nil
