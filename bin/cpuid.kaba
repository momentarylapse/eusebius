use lib.std
use lib.io
use lib.pci

int temp1, temp2, temp3, temp4

void cpuid(int n, out int[4] o)
	temp1 = n
	asm {
		mov eax, temp1
		db 0x0f
		db 0xa2
		mov temp1, eax
		mov temp2, ebx
		mov temp3, ecx
		mov temp4, edx
	}
	o[0] = temp1
	o[1] = temp2
	o[2] = temp3
	o[3] = temp4

void show_cpu()
	int[4] o
	cpuid(0, o)
	
	print("cpu: {{binary(&o[1], 4) + binary(&o[3], 4) + binary(&o[2], 4)}}\n")
	
	#cpuid(0x8000000, o)
	cpuid(1, o)
	
	string[] caps
	if (o[3] & 1<<25) != 0
		caps.add("sse")
	if (o[3] & 1<<26) != 0
		caps.add("sse2")
	if (o[2] & 1<<0) != 0
		caps.add("sse3")
	
	cpuid(0x8000001, o)
	
	if (o[3] & 1<<0) != 0
		caps.add("x87")
	if (o[3] & 1<<23) != 0
		caps.add("mmx")
	if (o[3] & 1<<31) != 0
		caps.add("3dnow")
	if (o[3] & 1<<24) != 0
		caps.add("fxrestore")
	if (o[2] & 1<<6) != 0
		caps.add("sse4a")
	if (o[3] & 1<<29) != 0
		caps.add("64")
	print("caps: {{caps}}\n")

void main()
	init_lib()
	lib_print_endl = false
	string[] arg
	get_args(arg)
	
	var pci = new PCIController()
	pci.scan()
	
	var dev = pci.get(0x8029, 0x10ec)
	if dev
		print(dev)
		int addr = dev.get_io_addr(0)
		print("0x{{addr|8x}}\n")
	
	show_cpu()
	
	exit(0)
