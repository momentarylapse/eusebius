use lib.std

enum
	TASK_STATUS_UNUSED
	TASK_STATUS_SLEEPING
	TASK_STATUS_RUNNING
	TASK_STATUS_WAITING
	TASK_STATUS_ZOMBIE
	TASK_STATUS_INTERRUPT
	#TASK_STATUS_DEAD

func fill(out s: string, n: int)
	while len(s) < n
		s.add(' ')

func i2s2(i: int, n: int) -> string
	string s2 = str(i)
	string s1
	fill(s1, n - len(s2))
	return s1 + s2

func sec2s(_sec: int) -> string
	int hour = _sec / 3600
	int min = (_sec / 60) % 60
	int sec = _sec % 60
	string s = "  :  "
	s[0] = '0' + (min / 10)
	s[1] = '0' + (min % 10)
	s[3] = '0' + (sec / 10)
	s[4] = '0' + (sec % 10)
	if hour > 0
		return "{{hour|3}}:{{s}}"
	return "   " + s

func task_mode(t: TaskInfo) -> string
	if t.mode == 0
		return "K"
	else
		return "U"

func task_status(t: TaskInfo) -> string
	if t.status == TASK_STATUS_RUNNING
		return "R"
	if t.status == TASK_STATUS_SLEEPING
		return "S"
	if t.status == TASK_STATUS_WAITING
		return "W"
	if t.status == TASK_STATUS_ZOMBIE
		return "Z"
	if t.status == TASK_STATUS_INTERRUPT
		return "I"
	return str(t.status)

func show_task(t: TaskInfo, show_parent: bool)
	string s = "{{t.pid|3}}   "
	int d = 0
	if show_parent
		s += "{{t.ppid|4}}   "
		d = 5
	s += "{{cs2s(t.name)|-22}} {{task_mode(t)}} {{task_status(t)}}    {{t.cpu/10|3}}% {{mem(t.mem*4096)|9}}  {{sec2s(t.life.sec)}}"
	print(s)
	print("\n")

func mem(size: int) -> string
	if size < 10000
		return "{{size}}"
	if size < 10000000
		return "{{size>>10}}k"
	return "{{size>>20}}m"

func main()
	init_lib()
	lib_print_endl = false
	string[] arg
	get_args(arg)
	
	bool allow_irq = false
	bool show_parent = false
	for a in arg
		if a == "-a" or a == "--all"
			allow_irq = true
		if a == "-p" or a == "--parent"
			show_parent = true
	
	SysInfo s
	if !sysinfo(s)
		raise(new Exception("sysinfo error"))
	print("uptime: {{sec2s(s.uptime)}}\n")
	print("memory:   {{mem(s.totalram * s.mem_unit)|8}} total  {{mem(s.freeram * s.mem_unit)|8}} free   ")
	print("{{mem((s.totalram - s.freeram) * s.mem_unit)|8}} used  {{mem(s.sharedram * s.mem_unit)|8}} shared\n")
	print("heap:     {{mem(s.totalheap * s.mem_unit)|8}} total  {{mem(s.freeheap * s.mem_unit)|8}} free   ")
	print("{{mem((s.totalheap - s.freeheap) * s.mem_unit)|8}} used\n")
	
	TaskInfo[] tasks
	TaskInfo tt
	for pid in 0:256
		if taskinfo(pid, tt)
			if tt.status != TASK_STATUS_INTERRUPT or allow_irq
				tasks.add(tt)
	
	print(" Pid  ")
	if show_parent
		print(" PPid")
	print(" Name                 Status   CPU      Mem       Time\n")
	for t in tasks
		show_task(t, show_parent)
	
	exit(0)
