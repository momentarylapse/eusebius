use "lib/std.kaba"

enum
	TASK_STATUS_UNUSED
	TASK_STATUS_SLEEPING
	TASK_STATUS_RUNNING
	TASK_STATUS_WAITING
	TASK_STATUS_ZOMBIE
	TASK_STATUS_INTERRUPT
	#TASK_STATUS_DEAD

void fill(out string s, int n)
	while s.num < n
		s.add(' ')

string i2s2(int i, int n)
	string s2 = i.str()
	string s1
	fill(s1, n - s2.num)
	return s1 + s2

string sec2s(int _sec)
	int hour = _sec / 3600
	int min = (_sec / 60) % 60
	int sec = _sec % 60
	string s = "  :  "
	s[0] = '0' + (min / 10)
	s[1] = '0' + (min % 10)
	s[3] = '0' + (sec / 10)
	s[4] = '0' + (sec % 10)
	if hour > 0
		return i2s2(hour, 3) + ":" + s
	return "   " + s

void show_task(TaskInfo t, bool show_parent)
	string s
	s = i2s2(t.pid, 3)
	s += "   "
	int d = 0
	if show_parent
		s += i2s2(t.ppid, 4)
		s += "   "
		d = 5
	s += cs2s(t.name)
	fill(s, 30+d)
	if t.mode == 0
		s += "K "
	else
		s += "U "
	if t.status == TASK_STATUS_RUNNING
		s += "R"
	else if t.status == TASK_STATUS_SLEEPING
		s += "S"
	else if t.status == TASK_STATUS_WAITING
		s += "W"
	else if t.status == TASK_STATUS_ZOMBIE
		s += "Z"
	else if t.status == TASK_STATUS_INTERRUPT
		s += "I"
	else
		s += t.status
	fill(s, 38+d)
	s += i2s2(t.cpu/10, 3) + "%"
	s += i2s2(t.mem*4, 9)+"k  "
	s += sec2s(t.life.sec)
	print(s)
	print("\n")

void main()
	init_lib()
	lib_print_endl = false
	string[] arg
	get_args(arg)
	
	bool allow_irq = false
	bool show_parent = false
	for a in arg
		if a == "-a" or a == "--all"
			allow_irq = true
		if a == "-p" or a == "--parent"
			show_parent = true
	
	SysInfo s
	if !sysinfo(s)
		print("sysinfo error\n")
		exit(1)
	print("uptime: ")
	print(sec2s(s.uptime))
	print("\n")
	print("memory:   ")
	print(i2s2((s.totalram * s.mem_unit) / 1024, 8))
	print("k total  ")
	print(i2s2((s.freeram * s.mem_unit) / 1024, 8))
	print("k free   ")
	print(i2s2(((s.totalram - s.freeram) * s.mem_unit) / 1024, 8))
	print("k used  ")
	print(i2s2((s.sharedram * s.mem_unit) / 1024, 8))
	print("k shared\n")
	print("heap:     ")
	print(i2s2((s.totalheap * s.mem_unit) / 1024, 8))
	print("k total  ")
	print(i2s2((s.freeheap * s.mem_unit) / 1024, 8))
	print("k free   ")
	print(i2s2(((s.totalheap - s.freeheap) * s.mem_unit) / 1024, 8))
	print("k used\n")
	
	TaskInfo[] tasks
	TaskInfo tt
	for pid in 0:256
		if taskinfo(pid, tt)
			if tt.status != TASK_STATUS_INTERRUPT or allow_irq
				tasks.add(tt)
	
	print(" Pid  ")
	if show_parent
		print(" PPid")
	print(" Name                 Status     CPU      Mem       Time\n")
	for t in tasks
		show_task(t, show_parent)
	
	exit(0)
