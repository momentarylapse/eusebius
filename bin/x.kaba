use image
use lib.std
use lib.std.sys
use lib.std.file
use lib.std.net
use lib.std.io
use lib.pci
use lib.vesa
#use lib.x
use lib.xserver.mouse
use lib.xserver.keyboard
use lib.xserver.controller
use lib.xserver.windows
use hui



func XExit()
	bga_write_register(VbeIndex.ENABLE, VBE_DISPI_DISABLED)
	exit(0)




class ProcessManager
	var pids: int[]
	func mut run(cmd: string[]) -> int
		let r = execute(cmd, -1, -1)
		if r >= 0
			pids.add(r)
		return r
	func mut update()
		for p in pids
			var status: int
			if waitpid(p, &status, false) == -2
				continue
			p = -1
		for i in 0:len(pids)
			if pids[i] < 0
				pids.remove(i)
				i --

var pm: owned![ProcessManager]

func main()
	init_lib()
	let args = get_args()
	
	vesa_init()

	next_window_id = 0
	windows.__init__()
	windows_r.__init__()
	invalidated.__init__()
	active_window = nil
	
	
	cmds = new CommandController()
	mouse = new MouseController()
	keyboard = new KeyboardController()
	pm = new ProcessManager()
	
	if len(args) == 0
		#bga_set_video_mode(800, 600, 32)
		bga_set_video_mode(1024, 768, 32)
		mouse.set(screen_width / 2, screen_height / 2)
	
	desktop = new XWindow(nil, 0, 0, screen_width, screen_height, 1)
#	if vga_mem2
	desktop.fill(0xff242040)
#	else
#		desktop.fill(0xff000000)


	var ww = new XWindow(nil, 100, 100, 100, 100, 1)
	ww.fill(0xffff0000)
	
	mouse.create_cursor()
	
	draw_invalidated()
	
#	execute(["/bin/xdesktop"], -1, -1)
	#execute(["/bin/xtest"], -1, -1)
	execute(["/bin/c"], stdin, stdout)
	#execute(["/bin/xterm"], -1, -1)
	
	print("x: running")
	while true
		pm.update()
		cmds.update()
		mouse.poll()
		keyboard.poll()
		draw_invalidated()
		usleep(5000)
		
		ww.move((ww.r.x0 + 1) % screen_width, (ww.r.y0 + 1) % screen_height)
		
	XExit()
