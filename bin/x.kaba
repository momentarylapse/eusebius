#define __OS__
use "prog_header.kaba"

const int VBE_DISPI_IOPORT_INDEX = 0x01ce
const int VBE_DISPI_IOPORT_DATA = 0x01cf

const int VBE_DISPI_ID5 = 0xb0c5
const int VBE_DISPI_ID4 = 0xb0c4

const int VBE_DISPI_DISABLED = 0
const int VBE_DISPI_ENABLED = 0x01
const int VBE_DISPI_LFB_ENABLED = 0x40
const int VBE_DISPI_NOCLEARMEM = 0x80

const int VBE_DISPI_INDEX_ID = 0
const int VBE_DISPI_INDEX_XRES = 1
const int VBE_DISPI_INDEX_YRES = 2
const int VBE_DISPI_INDEX_BPP = 3
const int VBE_DISPI_INDEX_ENABLE = 4
const int VBE_DISPI_INDEX_BANK = 5
const int VBE_DISPI_INDEX_VIRT_WIDTH = 6
const int VBE_DISPI_INDEX_VIRT_HEIGHT = 7
const int VBE_DISPI_INDEX_X_OFFSET = 8
const int VBE_DISPI_INDEX_Y_OFFSET = 9

int mouse

int _temp_port_no_
int _temp_port_data_

extern void* _i2p(int i)
extern int _p2i(void *p)


void outportb(int port, char data)
	_temp_port_no_ = port
	_temp_port_data_ = data
	asm{
		mov eax, _temp_port_data_
		mov edx, _temp_port_no_
		out dx, al
	}

char inportb(int port)
	_temp_port_no_ = port
	asm{
		mov edx, _temp_port_no_
		xor eax, eax
		in al, dx
		mov _temp_port_data_, eax
	}
	return _temp_port_data_

void outportd(int port,int data)
	_temp_port_no_ = port
	_temp_port_data_ = data
	asm{
		mov eax, _temp_port_data_
		mov edx, _temp_port_no_
		out dx, eax
	}

int inportd(int port)
	_temp_port_no_ = port
	asm{
		mov edx, _temp_port_no_
		in eax, dx
		mov _temp_port_data_, eax
	}
	return _temp_port_data_

void outportw(int port,int data)
	_temp_port_no_ = port
	_temp_port_data_ = data
	asm{
		mov eax, _temp_port_data_
		mov edx, _temp_port_no_
		db 0x66
		out dx, eax
	}

int inportw(int port)
	_temp_port_no_ = port
	asm{
		mov edx, _temp_port_no_
		xor eax, eax
		db 0x66
		in eax, dx
		mov _temp_port_data_, eax
	}
	return _temp_port_data_

char geth0(int i)
	if (i >= 0) and (i <= 9)
		return i + '0'
	if (i >= 10) and (i <= 15)
		return i - 10 + 'a'

void printh(int i)
	string s
	for n in 0:8
		s.add(geth0((i >> ((7-n)*4)) & 0xf))
	print s
	

void BgaWriteRegister(int IndexValue, int DataValue)
	outportw(VBE_DISPI_IOPORT_INDEX, IndexValue)
	outportw(VBE_DISPI_IOPORT_DATA, DataValue)
 
int BgaReadRegister(int IndexValue)
	outportw(VBE_DISPI_IOPORT_INDEX, IndexValue)
	return inportw(VBE_DISPI_IOPORT_DATA)


 
bool BgaIsAvailable()
	return BgaReadRegister(VBE_DISPI_INDEX_ID) == VBE_DISPI_ID5

int screen_width, screen_height
int cur_bank
int[0]* vga_mem
int[0]* vga_mem2
 
void BgaSetVideoMode(int width, int height, int depth, bool UseLinearFrameBuffer, bool ClearVideoMemory)
	screen_width = width
	screen_height = height
	cur_bank = -1
	vga_mem = _i2p(0xa0000)
	BgaWriteRegister(VBE_DISPI_INDEX_ENABLE, VBE_DISPI_DISABLED)
	BgaWriteRegister(VBE_DISPI_INDEX_XRES, width)
	BgaWriteRegister(VBE_DISPI_INDEX_YRES, height)
	BgaWriteRegister(VBE_DISPI_INDEX_BPP, depth)
	int x = VBE_DISPI_ENABLED
	if UseLinearFrameBuffer
		x = x | VBE_DISPI_LFB_ENABLED
	if ClearVideoMemory
		x = x | VBE_DISPI_NOCLEARMEM
	BgaWriteRegister(VBE_DISPI_INDEX_ENABLE, x)
	
	
	
	vga_mem2 = _i2p(0xc0000000)
	/*for d in pci_devices
		if d.vendor == 0x1111 and d.device == 0x1234
			print d.bar0
			vga_mem2 = _i2p(d.bar0)
	BgaWriteRegister(VBE_DISPI_INDEX_ENABLE, VBE_DISPI_DISABLED)
	print _p2i(vga_mem2)*/
 
void BgaSetBank(int bank)
	BgaWriteRegister(VBE_DISPI_INDEX_BANK, bank)
	cur_bank = bank

void setPixel(int x, int y, int col)
	int p = x + y * screen_width
	int b = p >> 14
	int off = p & 0x3fff
	if b != cur_bank
		BgaSetBank(b)
	vga_mem[off] = col

void setPixel2(int x, int y, int col)
	int p = x + y * screen_width
	vga_mem2[p] = col


int pciConfigRead(int bus, int slot, int func, int offset)
 
	/* create configuration address as per Figure 1 */
	int address = ((bus << 16) | (slot << 11) | (func << 8) | (offset & 0xfc) | (0x80000000))
 
	/* write out the address */
	outportd(0xcf8, address)
	/* read in the data */
	/* (offset & 2) * 8) = 0 will choose the first word of the 32 bits register */
	return inportd(0xcfc)


class PCIDevice
	int bus, slot, func
	int vendor, device
	int xxx
	int bar0
PCIDevice[] pci_devices

void checkDevice(int bus, int slot)
	for fun in 0:8
		int a = pciConfigRead(bus, slot, fun, 0)
		int b = pciConfigRead(bus, slot, fun, 8)
		int bar0 = pciConfigRead(bus, slot, fun, 16)
	
		int vendor = (a >> 16) & 0xffff
		int dev = a & 0xffff
		if vendor != 0xffff
			PCIDevice p
			p.bus = bus
			p.slot = slot
			p.func = fun
			p.vendor = vendor
			p.device = dev
			p.xxx = b
			p.bar0 = bar0 & 0xfffffff0
			pci_devices.add(p)
			print "---- "
			print bus
			print ":"
			print slot
			print ":"
			print fun
			print " "
			printh vendor
			print " "
			printh dev
			print "   "
			printh b
			print "   "
			printh bar0
			print "\n"

void scan_pci()
	for bus in 0:256
		for dev in 0:32
			checkDevice(bus, dev)

int mx, my

void update_mouse()
	int[4] m
	if read(mouse, &m, 4*4) < 16
		return
	mx += m[1]
	my += m[2]
	if mx < 0
		mx = 0
	if mx >= screen_width
		mx = screen_width - 1
	if my < 0
		my = 0
	if my >= screen_height
		my = screen_height - 1
	/*print mx
	print " "
	print my
	print "\n"*/

class XRect
	int x, y, w, h
	bool inside(int _x, int _y)
		return _x >= x and _x < x+w and _y >= y and _y <= y+h

class XWindow
	XRect r
	int[] buf
	
	//void draw_rect(int x, int y, int w, int h, int c)
	void fill(int c)
		int n = r.w * r.h
		for b in buf
			b = c

XWindow*[] windows
XWindow* bg, cursor

XRect[] invalidated

XWindow* create_win(int x, int y, int w, int h)
	XWindow *win = new XWindow
	win.r.x = x
	win.r.y = y
	win.r.w = w
	win.r.h = h
	win.buf.resize(w * h)
	//print p2s(&win.buf[0])
	windows.add(win)
	invalidated.add(win.r)
	return win

// brute force :P
void draw(XRect r)
	int x2 = r.x+r.w
	int y2 = r.y+r.h
	print "draw "
	print r.x
	print " "
	print r.y
	print " "
	print r.w
	print " "
	print r.h
	print "\n"
	for x in r.x:x2
		for y in r.y:y2
			int c = 0xffffffff
			for w,n in windows
				if w.r.inside(x, y)
					int dx = x-w.r.x
					int dy = y-w.r.y
					x = 0xff0000 + n * 0xffff
					//c = w.buf[dx + dy*w.r.w]
			setPixel(x, y, c)
	

void draw_all()
	print "draw all"
	for r in invalidated
		draw(r)
	invalidated.clear()


void main()
	init_lib()
	
	mx = 400
	my = 300
	mouse = open("/dev/mouse", O_RDONLY)
	fcntl(mouse, F_SETFL, O_RDONLY | O_NONBLOCK)
	screen_width = 800
	screen_height = 600
	
//	scan_pci()
	
	//print BgaReadRegister(VBE_DISPI_INDEX_ID)
	/*if BgaIsAvailable()
		print "ja"
	else
		print "nein"*/
	
	//BgaSetVideoMode(800, 600, 32, true, false)
	BgaSetVideoMode(1024, 768, 32, false, false)
	
	/*for x in 0:100
		for y in 0:100
			setPixel(x, y, 0xffffffff)
	
	while true
		nil*/
	
	bg = create_win(0, 0, screen_width, screen_height)
	bg.fill(0xff402040)
	cursor = create_win(mx, my, 32, 32)
	cursor.fill(0xffc0c0c0)
	
	draw_all()
	
	
	while true
		update_mouse()
	BgaWriteRegister(VBE_DISPI_INDEX_ENABLE, VBE_DISPI_DISABLED)
	exit(0)
