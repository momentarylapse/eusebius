#define __OS__
use "prog_header.kaba"

const int VBE_DISPI_IOPORT_INDEX = 0x01ce
const int VBE_DISPI_IOPORT_DATA = 0x01cf

const int VBE_DISPI_ID5 = 0xb0c5
const int VBE_DISPI_ID4 = 0xb0c4

const int VBE_DISPI_DISABLED = 0
const int VBE_DISPI_ENABLED = 0x01
const int VBE_DISPI_LFB_ENABLED = 0x40
const int VBE_DISPI_NOCLEARMEM = 0x80

const int VBE_DISPI_INDEX_ID = 0
const int VBE_DISPI_INDEX_XRES = 1
const int VBE_DISPI_INDEX_YRES = 2
const int VBE_DISPI_INDEX_BPP = 3
const int VBE_DISPI_INDEX_ENABLE = 4
const int VBE_DISPI_INDEX_BANK = 5
const int VBE_DISPI_INDEX_VIRT_WIDTH = 6
const int VBE_DISPI_INDEX_VIRT_HEIGHT = 7
const int VBE_DISPI_INDEX_X_OFFSET = 8
const int VBE_DISPI_INDEX_Y_OFFSET = 9


int _temp_port_no_
int _temp_port_data_

extern void* _i2p(int i)
extern int _p2i(void *p)


void outportb(int port, char data)
	_temp_port_no_ = port
	_temp_port_data_ = data
	asm{
		mov eax, _temp_port_data_
		mov edx, _temp_port_no_
		out dx, al
	}

char inportb(int port)
	_temp_port_no_ = port
	asm{
		mov edx, _temp_port_no_
		xor eax, eax
		in al, dx
		mov _temp_port_data_, eax
	}
	return _temp_port_data_

void outportd(int port,int data)
	_temp_port_no_ = port
	_temp_port_data_ = data
	asm{
		mov eax, _temp_port_data_
		mov edx, _temp_port_no_
		out dx, eax
	}

int inportd(int port)
	_temp_port_no_ = port
	asm{
		mov edx, _temp_port_no_
		in eax, dx
		mov _temp_port_data_, eax
	}
	return _temp_port_data_

void outportw(int port,int data)
	_temp_port_no_ = port
	_temp_port_data_ = data
	asm{
		mov eax, _temp_port_data_
		mov edx, _temp_port_no_
		db 0x66
		out dx, eax
	}

int inportw(int port)
	_temp_port_no_ = port
	asm{
		mov edx, _temp_port_no_
		xor eax, eax
		db 0x66
		in eax, dx
		mov _temp_port_data_, eax
	}
	return _temp_port_data_

char geth0(int i)
	if (i >= 0) and (i <= 9)
		return i + '0'
	if (i >= 10) and (i <= 15)
		return i - 10 + 'a'

void printh(int i)
	string s
	for n in 0:8
		s.add(geth0((i >> ((7-n)*4)) & 0xf))
	print s
	

void BgaWriteRegister(int IndexValue, int DataValue)
	outportw(VBE_DISPI_IOPORT_INDEX, IndexValue)
	outportw(VBE_DISPI_IOPORT_DATA, DataValue)
 
int BgaReadRegister(int IndexValue)
	outportw(VBE_DISPI_IOPORT_INDEX, IndexValue)
	return inportw(VBE_DISPI_IOPORT_DATA)


 
bool BgaIsAvailable()
	return BgaReadRegister(VBE_DISPI_INDEX_ID) == VBE_DISPI_ID5

bool graphics_enabled
int screen_width, screen_height
int cur_bank
int[0]* vga_mem
int[0]* vga_mem2
 
void BgaSetVideoMode(int width, int height, int depth, bool UseLinearFrameBuffer, bool ClearVideoMemory)
	screen_width = width
	screen_height = height
	mouse.x = width / 2
	mouse.y = height / 2
	cur_bank = -1
	vga_mem = _i2p(0xa0000)
	BgaWriteRegister(VBE_DISPI_INDEX_ENABLE, VBE_DISPI_DISABLED)
	BgaWriteRegister(VBE_DISPI_INDEX_XRES, width)
	BgaWriteRegister(VBE_DISPI_INDEX_YRES, height)
	BgaWriteRegister(VBE_DISPI_INDEX_BPP, depth)
	int x = VBE_DISPI_ENABLED
	if UseLinearFrameBuffer
		x = x | VBE_DISPI_LFB_ENABLED
	if ClearVideoMemory
		x = x | VBE_DISPI_NOCLEARMEM
	BgaWriteRegister(VBE_DISPI_INDEX_ENABLE, x)
	graphics_enabled = true
	
	
	
	vga_mem2 = _i2p(0xc0000000)
	/*for d in pci_devices
		if d.vendor == 0x1111 and d.device == 0x1234
			print d.bar0
			vga_mem2 = _i2p(d.bar0)
	BgaWriteRegister(VBE_DISPI_INDEX_ENABLE, VBE_DISPI_DISABLED)
	print _p2i(vga_mem2)*/
 
void BgaSetBank(int bank)
	BgaWriteRegister(VBE_DISPI_INDEX_BANK, bank)
	cur_bank = bank
	for i in 0:1000
		nil

void setPixel(int x, int y, int col)
	if !graphics_enabled
		return
	int p = x + y * screen_width
	int b = p >> 14
	int off = p & 0x3fff
	if b != cur_bank
		BgaSetBank(b)
	vga_mem[off] = col

void setPixel2(int x, int y, int col)
	int p = x + y * screen_width
	vga_mem2[p] = col


int pciConfigRead(int bus, int slot, int func, int offset)
 
	/* create configuration address as per Figure 1 */
	int address = ((bus << 16) | (slot << 11) | (func << 8) | (offset & 0xfc) | (0x80000000))
 
	/* write out the address */
	outportd(0xcf8, address)
	/* read in the data */
	/* (offset & 2) * 8) = 0 will choose the first word of the 32 bits register */
	return inportd(0xcfc)


class PCIDevice
	int bus, slot, func
	int vendor, device
	int xxx
	int bar0
PCIDevice[] pci_devices

void checkDevice(int bus, int slot)
	for fun in 0:8
		int a = pciConfigRead(bus, slot, fun, 0)
		int b = pciConfigRead(bus, slot, fun, 8)
		int bar0 = pciConfigRead(bus, slot, fun, 16)
	
		int vendor = (a >> 16) & 0xffff
		int dev = a & 0xffff
		if vendor != 0xffff
			PCIDevice p
			p.bus = bus
			p.slot = slot
			p.func = fun
			p.vendor = vendor
			p.device = dev
			p.xxx = b
			p.bar0 = bar0 & 0xfffffff0
			pci_devices.add(p)
			print "---- "
			print bus
			print ":"
			print slot
			print ":"
			print fun
			print " "
			printh vendor
			print " "
			printh dev
			print "   "
			printh b
			print "   "
			printh bar0
			print "\n"

void scan_pci()
	for bus in 0:256
		for dev in 0:32
			checkDevice(bus, dev)

class MouseController
	int x, y
	XWindow* cursor
	
	int dev
	
	void __init__()
	
		x = screen_width / 2
		y = screen_height / 2
		dev = open("/dev/mouse", O_RDONLY | O_NONBLOCK)
		//fcntl(dev, F_SETFL, O_RDONLY | O_NONBLOCK)
		
	void create()

		Image *im = LoadImage("/images/cursor.tga")
	
		if im
			cursor = new XWindow(x - im.width/2, y - im.height/2, im.width, im.height, WF_TRANSPARENT | 7)
			cursor.fill_image(0, 0, im)
		
			delete im
		else
			cursor = new XWindow(x-16, y-16, 32, 32, WF_TRANSPARENT | 7)
			cursor.fill(0xffc0c0c0)

	bool update_single()
		print "v"
		int[4] m
		if read(dev, &m, 4*4) < 16
			print "x"
			return false
		x += m[1]
		y -= m[2]
		if x < 0
			x = 0
		if x >= screen_width
			x = screen_width - 1
		if y < 0
			y = 0
		if y >= screen_height
			y = screen_height - 1
	
		print "j"
		return true

	void update()
		print "u"
		bool need_update = false
		for i in 0:8
			if !update_single()
				break
			need_update = true
		print "."
		if need_update
			print "+"
			cursor.move(x - cursor.r.w()/2, y - cursor.r.h()/2)
		print "-"

MouseController *mouse

void XExit()
	BgaWriteRegister(VBE_DISPI_INDEX_ENABLE, VBE_DISPI_DISABLED)
	exit(0)

class XRect
	int x0, y0, x1, y1
	int w()
		return x1 - x0
	int h()
		return y1 - y0
	bool inside(int x, int y)
		return x >= x0 and x < x1 and y >= y0 and y < y1

const int WF_TRANSPARENT = 1024


class XWindow
	int id
	XRect r
	int shm_key
	int shm_id
	int[0]* buf
	bool transparent
	int level
	
	void __init__(int x, int y, int w, int h, int flags)
		print "x: new win\n"
		r.x0 = x
		r.y0 = y
		r.x1 = x + w
		r.y1 = y + h
		level = flags & 0xf
		transparent = ((flags & WF_TRANSPARENT) > 0)
		id = next_window_id
		next_window_id ++
		shm_key = next_window_id + 0x0f810000 // randi()
		shm_id = shmget(shm_key, w*h*4, SHM_DEST | IPC_CREAT)
		buf = shmat(shm_id, 0)
		windows.add(self)
		sort_windows()
		invalidated.add(r)
		
	void __delete__()
		print "x: del win\n"
		invalidated.add(r)
		shmdt(buf)
		for ww,n in windows
			if ww == self
				windows_r.remove(windows.num - n - 1)
				windows.remove(n)
	
	void move(int x, int y)
		XRect r0 = r
		r.x1 += x - r.x0
		r.y1 += y - r.y0
		r.x0 = x
		r.y0 = y
		invalidated.add(r)
		invalidated.add(r0)
	
	//void draw_rect(int x, int y, int w, int h, int c)
	void fill(int c)
		int n = r.w() * r.h()
		for i in 0:n
			buf[i] = c
	void fill_image(int dx, int dy, Image *im)
		/*int x1 = dx
		if x1 < 0
			x1 = 0
			
		for y in y1:y2
			for x in x1:x2*/
		int w = r.w()
		int h = r.h()
		for y in 0:h
			for x in 0:w
				buf[x + y*w] = im.data[x + y*w]

int next_window_id
XWindow*[] windows, windows_r
XWindow* desktop

void sort_windows()
	for i in 0:windows.num
		for j in i+1:windows.num
			if windows[i].level > windows[j].level
				XWindow *t = windows[i]
				windows[i] = windows[j]
				windows[j] = t
	windows_r.resize(windows.num)
	for w, i in windows
		windows_r[windows.num - i - 1] = w

XRect[] invalidated

void draw(XRect rr)
	XRect r = rr
	if r.x0 < 0
		r.x0 = 0
	if r.x1 >= screen_width
		r.x1 = screen_width-1
	if r.y0 < 0
		r.y0 = 0
	if r.y1 >= screen_height
		r.y1 = screen_height-1
	for y in r.y0:r.y1
		int xs = r.x0
		while xs < r.x1
			int xe = r.x1
			
			// find the top most window at (x1,y)
			XWindow *ww = nil
			for w,i in windows_r
				if w.r.inside(xs, y)
					ww = w
					if w.r.x1 < xe
						xe = w.r.x1
					// test for overlap in [y]*[xs:xe]
					for j in 0:i
						XWindow *v = windows_r[j]
						if y < v.r.y0 or y >= v.r.y1
							continue
						if xe <= v.r.x0 or xs >= v.r.x1
							continue
						xe = v.r.x0
					break
			if !ww
				xs = xe
				continue
			if ww.transparent
				// brute force :P
				for x in xs:xe
					for w in windows_r
						if w.r.inside(x, y)
							int dx = x-w.r.x0
							int dy = y-w.r.y0
							int c = w.buf[dx + dy*w.r.w()]
							if w.transparent
								if (c & 0xff000000) != 0
									setPixel(x, y, c)
									break
							else
								setPixel(x, y, c)
								break
			else
				dy = y-ww.r.y0
				dx = xs-ww.r.x0
				int index = dx + dy*ww.r.w()
				for x in xs:xe
					setPixel(x, y, ww.buf[index])
					index ++
			
			xs = xe
	

void draw_invalidated()
	for r in invalidated
		draw(r)
	invalidated.clear()

const int XCMD_KILL = 666
const int XCMD_NEW_WINDOW = 1024
const int XCMD_DEL_WINDOW = 1025
const int XCMD_MOVE_WINDOW = 1026
const int XCMD_INVALIDATE_WINDOW = 1027

class Client
	int[0]* buf
	bool kill_me
	XWindow*[] win
	
	void __init__(int key)
		kill_me = false
		print "x: new client\n"
		int id = shmget(key, 0, 0)
		buf = shmat(id, 0)
	
	void __delete__()
		print "x: del client\n"
		shmdt(buf)
		for w in win
			delete w
	
	void update()
		if buf[0] == 1
			buf[32] = -1
			print "x: empfange "
			print buf[1]
			print "\n"
			if buf[1] == XCMD_KILL
				buf[32] = 0
				kill_me = true
			else if buf[1] == XCMD_NEW_WINDOW
				XWindow* ww = new XWindow(buf[2], buf[3], buf[4], buf[5], 2)
				win.add(ww)
				buf[32] = ww.id
				buf[33] = ww.shm_key
				print "x: key="
				print ww.shm_key
				print "\n"
			else if buf[1] == XCMD_INVALIDATE_WINDOW
				for w in win
					if w.id == buf[2]
						invalidated.add(w.r)
			else if buf[1] == XCMD_MOVE_WINDOW
				for w in win
					if w.id == buf[2]
						w.move(buf[3], buf[4])
			buf[0] = 0
		

class CommandController
	int[0]* buf
	//int connection
	Client*[] clients
	
	void __init__()
	
		//mkfifo("/tmp/x")
		//connection = open("/tmp/x", O_RDONLY)
		int id = shmget(0x7bcd0123, 1024, SHM_DEST | IPC_CREAT)
		buf = shmat(id, 0)
		int a = 1
		int b = 0
		a = a / b
		buf[-1] = 0
		
		buf[0] = 0
	
	void update()
		if buf[0] == 1
			clients.add(new Client(buf[1]))
			buf[0] = 0
		for c in clients
			c.update()
		for i in 0:clients.num
			if clients[i].kill_me
				delete clients[i]
				clients.remove(i)
				i --

CommandController *cmds

void main()
	init_lib()
	graphics_enabled = false

	next_window_id = 0
	windows.__init__()
	invalidated.__init__()
	
	screen_width = 800
	screen_height = 600
	
	cmds = new CommandController
	mouse = new MouseController
	
//	scan_pci()
	
	//BgaSetVideoMode(640, 480, 32, false, false)
	
	desktop = new XWindow(0, 0, screen_width, screen_height, 1)
	desktop.fill(0xff402040)
	
	mouse.create()
	
	draw_invalidated()
	
	// make our debugging life easier...
	string[] arg
	arg.add("/bin/client")
	//execute(arg, -1, -1)
	//execute(arg, -1, -1)
	
	print "x: running\n"
	while true
		print "a"
		cmds.update()
		print "b"
		//mouse.update()
		print "c"
		draw_invalidated()
		
	XExit()
