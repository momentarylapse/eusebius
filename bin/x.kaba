#define __OS__
use "prog_header.kaba"

const int VBE_DISPI_IOPORT_INDEX = 0x01ce
const int VBE_DISPI_IOPORT_DATA = 0x01cf

const int VBE_DISPI_ID5 = 0xb0c5
const int VBE_DISPI_ID4 = 0xb0c4

const int VBE_DISPI_DISABLED = 0
const int VBE_DISPI_ENABLED = 0x01
const int VBE_DISPI_LFB_ENABLED = 0x40
const int VBE_DISPI_NOCLEARMEM = 0x80

const int VBE_DISPI_INDEX_ID = 0
const int VBE_DISPI_INDEX_XRES = 1
const int VBE_DISPI_INDEX_YRES = 2
const int VBE_DISPI_INDEX_BPP = 3
const int VBE_DISPI_INDEX_ENABLE = 4
const int VBE_DISPI_INDEX_BANK = 5
const int VBE_DISPI_INDEX_VIRT_WIDTH = 6
const int VBE_DISPI_INDEX_VIRT_HEIGHT = 7
const int VBE_DISPI_INDEX_X_OFFSET = 8
const int VBE_DISPI_INDEX_Y_OFFSET = 9

int _temp_port_no_
int _temp_port_data_

void outportd(int port,int data)
	_temp_port_no_ = port
	_temp_port_data_ = data
	asm{
		mov eax, _temp_port_data_
		mov edx, _temp_port_no_
		out dx, eax
	}

int inportd(int port)
	_temp_port_no_ = port
	asm{
		mov edx, _temp_port_no_
		in eax, dx
		mov _temp_port_data_, eax
	}
	return _temp_port_data_

void outportw(int port,int data)
	_temp_port_no_ = port
	_temp_port_data_ = data
	asm{
		mov eax, _temp_port_data_
		mov edx, _temp_port_no_
		db 0x66
		out dx, eax
	}

int inportw(int port)
	_temp_port_no_ = port
	asm{
		mov edx, _temp_port_no_
		xor eax, eax
		db 0x66
		in eax, dx
		mov _temp_port_data_, eax
	}
	return _temp_port_data_

void BgaWriteRegister(int IndexValue, int DataValue)
	outportw(VBE_DISPI_IOPORT_INDEX, IndexValue)
	outportw(VBE_DISPI_IOPORT_DATA, DataValue)
 
int BgaReadRegister(int IndexValue)
	outportw(VBE_DISPI_IOPORT_INDEX, IndexValue)
	return inportw(VBE_DISPI_IOPORT_DATA)


 
bool BgaIsAvailable()
	return BgaReadRegister(VBE_DISPI_INDEX_ID) == VBE_DISPI_ID5

int screen_width, screen_height
int cur_bank
int[0]* vga_mem
 
void BgaSetVideoMode(int width, int height, int depth, bool UseLinearFrameBuffer, bool ClearVideoMemory)
	screen_width = width
	screen_height = height
	cur_bank = -1
	asm{
		mov eax, 0xa0000
		mov vga_mem, eax
	}
	BgaWriteRegister(VBE_DISPI_INDEX_ENABLE, VBE_DISPI_DISABLED)
	BgaWriteRegister(VBE_DISPI_INDEX_XRES, width)
	BgaWriteRegister(VBE_DISPI_INDEX_YRES, height)
	BgaWriteRegister(VBE_DISPI_INDEX_BPP, depth)
	int x = VBE_DISPI_ENABLED
	if UseLinearFrameBuffer
		x = x | VBE_DISPI_LFB_ENABLED
	if ClearVideoMemory
		x = x | VBE_DISPI_NOCLEARMEM
	BgaWriteRegister(VBE_DISPI_INDEX_ENABLE, x)
 
void BgaSetBank(int bank)
	BgaWriteRegister(VBE_DISPI_INDEX_BANK, bank)
	cur_bank = bank

void setPixel(int x, int y, int col)
	int p = x + y * screen_width
	int b = p >> 14
	int off = p & 0x3fff
	if b != cur_bank
		BgaSetBank(b)
	vga_mem[off] = col


int pciConfigRead(int bus, int slot, int func, int offset)
 
	/* create configuration address as per Figure 1 */
	int address = ((bus << 16) | (slot << 11) | (func << 8) | (offset & 0xfc) | (0x80000000))
 
	/* write out the address */
	outportd(0xcf8, address)
	/* read in the data */
	/* (offset & 2) * 8) = 0 will choose the first word of the 32 bits register */
	return inportd(0xcfc)

void checkDevice(int bus, int slot)
	for fun in 0:8
		int a = pciConfigRead(bus, slot, fun, 0)
		int b = pciConfigRead(bus, slot, fun, 8)
	
		int vendor = (a >> 16) & 0xffff
		int dev = a & 0xffff
		if vendor != 0xffff
			print "---- "
			print bus
			print ":"
			print slot
			print ":"
			print fun
			print " "
			print vendor
			print " "
			print dev
			print "   "
			print b
			print "\n"


void main()
	init_lib()
	
	//print BgaReadRegister(VBE_DISPI_INDEX_ID)
	if BgaIsAvailable()
		print "ja"
	else
		print "nein"
	
	/*for bus in 0:256
		for dev in 0:32
			checkDevice(bus, dev)*/
	
	//BgaSetVideoMode(800, 600, 32, true, false)
	BgaSetVideoMode(1024, 768, 32, false, false)
	
	for x in 0:100
		for y in 0:100
			setPixel(x, y, 0xffffffff)
	
	
	while true
		nil
	BgaWriteRegister(VBE_DISPI_INDEX_ENABLE, VBE_DISPI_DISABLED)
	exit(0)
