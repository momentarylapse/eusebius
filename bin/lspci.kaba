use "lib/std.kaba"
use "lib/pci.kaba"
use "lib/io.kaba"

PCIController *pci

void show_device(PCIDevice *d)
	print("[{{d.bus}}:{{d.slot}}:{{d.function}}]   {{binary(&d.vendor, 2).hex(true))}} : {{binary(&d.device, 2).hex(true))}}   ")
	if d._class == CLASS_NET and d.subclass == SUBCLASS_NET_ETHERNET
		print("ethernet")
	else if d._class == CLASS_DISPLAY and d.subclass == SUBCLASS_DISPLAY_VGA
		print("vga")
	else if d._class == CLASS_DISPLAY and d.subclass == SUBCLASS_DISPLAY_XGA
		print("xga")
	else if d._class == CLASS_MULTIMEDIA and d.subclass == SUBCLASS_MULTIMEDIA_MAUDIO
		print("sound")
	else if d._class == CLASS_MULTIMEDIA and d.subclass == SUBCLASS_MULTIMEDIA_AUDIO
		print("sound")
	else if d._class == CLASS_STORAGE and d.subclass == SUBCLASS_STORAGE_IDE
		print("ide")
	else
		print("class={{d._class}}:{{d.subclass}}")
	#print("  ht=")
	#print(d.header_type)
	if d.irq > 0
		print("  irq={{d.irq}}")
	print("\n")
	for i in 0:6
		if d.bar[i] != 0
			print("     bar[{{i}}]=")
			if (d.bar[i] & 1) == 1
				int addr = d.bar[i] & 0xfffffffc
				print(binary(&addr, 4).hex(true))
				print(" (io)\n")
			else
				int addr = d.bar[i] & 0xfffffff0
				print(binary(&addr, 4).hex(true))
				print(" (mem)\n")

void main()
	init_lib()
	lib_print_endl = false
	string[] arg
	get_args(arg)
	
	pci = new PCIController()
	
	pci.scan()
	
	for d in pci.devices
		show_device(d)
		
	exit(0)
