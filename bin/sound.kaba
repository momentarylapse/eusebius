use lib.std
use lib.io
use lib.pci

# http://www.lowlevel.eu/wiki/AC97


var io_base: int
var mem_key: int
var mem: int[0]*

func sb16_reset()
	print("reset...")
	outportb(io_base + 6, 1)
	usleep(5)
	outportb(io_base + 6, 0)
	#print("wait 1")
	while (inportb(io_base + 14) & 0x80) == 0
		pass
	#print("wait 2")
	while inportb(io_base + 10) != 0xaa
		pass
	print("ok")

func sb16_write(cmd: int)
	while (inportb(io_base + 0x0c) & 0x80) != 0
		pass
	outportb(io_base + 0x0c, cmd)

func sb16_read() -> int
	while (inportb(io_base + 0x0e) & 0x80) == 0
		pass
	return inportb(io_base + 0x0a)

func sb16_setup_dma()
	print("dma")
	int channel = 5
	# Disable the sound card DMA channel by setting the appropriate mask bit
	outportb(0xd4, 4 + (channel % 4))
	# Clear the byte pointer flip-flop
	outportb(0xd8, 0)
	# mode... single playback
	outportb(0xd6, 0x48 + (channel % 4))
	# base addr
	outportb(0xc4, mem_key >> 1)
	outportb(0xc4, mem_key >> 9)
	# page
	outportb(0x8b, mem_key >> 17) # ???
	# count (64k div 2 - 1)
	outportb(0xc6, 0xff) # lo
	outportb(0xc6, 0x7f) # hi

func sb16_set_sample_rate(sample_rate: int)
	print("set sample rate")
	sb16_write(0x41)
	print("b")
	sb16_write(sample_rate >> 8) # hi
	print("c")
	sb16_write(sample_rate)      # lo

func sb16_test()

	io_base = 0x220
	
	# 64k... enough
	mem_key = 0x00700000#0x0e680000 # randi()
	print(binary(&mem_key, 4).hex())
	int shm_id = shmget(mem_key, 0x00010000, IPC_CREAT | SHM_ABSOLUTE) # SHM_DEST)
	if shm_id < 0
		raise(new Exception("can't create shared memory"))
	mem = shmat(shm_id, 0)
	print(p2s(mem))
	

	for i in 0:16384
		mem[i] = 0
		if (i % 128) > 64
			mem[i] = 0x23452345

	# todo IRQ...
	
	sb16_reset()
	
	sb16_write(0xe1)
	int maj = sb16_read()
	int min = sb16_read()
	print("version {{maj}}.{{min}}")
	if maj < 4
		raise(new Exception("version < 4"))

	sb16_setup_dma()
	
	sb16_set_sample_rate(22050)
	
	print("start")
	sb16_write(0xb0) # play
	sb16_write(0x30) # mode = stereo + signed
	sb16_write(0xff) # block size??? lo
	sb16_write(0xff) # block size??? hi
	print("done?")
	
	sleep(5)

const PORT_NAM_RESET = 0x0000
const PORT_NAM_MASTER_VOLUME = 0x0002
const PORT_NAM_MONO_VOLUME = 0x0006
const PORT_NAM_PCM_VOLUME = 0x0018
const PORT_NAM_EXT_AUDIO_ID = 0x0028
const PORT_NAM_EXT_AUDIO_STC = 0x002a
const PORT_NAM_FRONT_SPLRATE = 0x002c
const PORT_NAM_LR_SPLRATE = 0x0032
const PORT_NABM_POBDBAR = 0x0010
const PORT_NABM_POLVI = 0x0015
const PORT_NABM_POCONTROL = 0x001b
const PORT_NABM_GLB_CTRL_STAT = 0x0060

func irq_handler()
	print("--irq--")

func ac97_test()
	var pci = new PCIController()
	pci.scan()
	var dev = pci.get(0x8086, 0x2415)
	if !dev
		raise(new Exception("pci dev not found"))
		
	#int addr = dev.get_mem_addr(0)
	#print("pci dev found, mem=0x{{addr|8x}}")
	
	int nambar = dev.get_io_addr(0)
	int nabmbar = dev.get_io_addr(1)
	#print("{{nambar|4x}}  {{nabmbar|4x}}")
	
	int x = dev.read_config(PCI_COMMAND)
	print("command {{x|4x}}")
	x = x & 0xfffffbff # clear bit #10 (IRQ disable)
	dev.write_config(PCI_COMMAND, x|5)
	
	#print("reset")
	outportw(nambar + PORT_NAM_RESET, 42)
	outportb(nabmbar + PORT_NABM_GLB_CTRL_STAT, 0x02)
	
	usleep(100000)
	int volume = 0
	outportw(nambar + PORT_NAM_MASTER_VOLUME, (volume<<8) | volume)
	outportw(nambar + PORT_NAM_MONO_VOLUME, volume)
	outportw(nambar + PORT_NAM_PCM_VOLUME, (volume<<8) | volume)
	
	int id = inportw(nambar + PORT_NAM_EXT_AUDIO_ID)
	#print("id={{id}}")
	
	if ((id & 1) == 0)
		print("sample rate fixed to 48 kHz")
	else
		print("sample rate 44100 Hz")
		outportw(nambar + PORT_NAM_EXT_AUDIO_STC, inportw(nambar + PORT_NAM_EXT_AUDIO_STC) | 1) # Variable Rate Audio aktivieren
 		usleep(10000)
 		outportw(nambar + PORT_NAM_FRONT_SPLRATE, 44100/2) # Allg. Samplerate: 44100 Hz
 		outportw(nambar + PORT_NAM_LR_SPLRATE, 44100/2) # Stereo-Samplerate: 44100 Hz
 		usleep(10000)
 		# TatsÃ¤chliche Samplerate steht jetzt in PORT_NAM_FRONT_SPLRATE bzw. PORT_NAM_LR_SPLRATE
 		
	int shm_id = shmget(13, 1<<26, IPC_CREAT)
 	#print("shm id {{shm_id}}")
	if shm_id < 0
		raise(new Exception("can't create shared memory"))
	mem = shmat(shm_id, 0)
	#print(p2s(mem))
 	
 	int samples = 0x40000
 	int[0]* p = mem
 	for i in 0:samples
 		p[i] = 0
 		float w = sin(float(i) * 0.0002)
 		float y = sin(float(i) * 0.07) * w
 		int z = (int(y * 0x7f00) & 0xffff)
 		p[i] = z | (z << 16)
 	
 	int buf_addr = addr2phys(p)
 	
 	int N = 0
 	int CHUNK = 0x4000 # samples
 
 	#bd.resize(32)
 	int done = 0
 	for d in bd
 		d.addr = 0
 		d.length_etc = 0
 	for d in bd
	 	d.addr = addr2phys(&p[done])
# 		print("buf addr: {{d.addr|8x}}")
 		d.length_etc = CHUNK*2 + 0x8000000 #(samples << 16) + 0x00004000
 		done += CHUNK
 		N ++
 		if done >= samples
 			break
 	#bd[N-1].length_etc += 0x40000000
 	#print("xxx   {{bd[0].length_etc|8x}}  {{binary(&bd[0].length_etc, 4).hex()}}")
 	#print("xxx   {{bd[1].length_etc|8x}}")
 	print("{{N}} chunks")
 	
 	#bd[2].length_etc = 0x0
 	
 	int bd_addr = addr2phys(&bd[0])
 	#print("desc addr: {{bd_addr|8x}}")
 	usleep(100000)
 	
 	if !sigaction(23, irq_handler)
 		raise(new Exception("sigaction {{lib_error}}"))
 	if !mapirq(dev.irq, 23)
 		raise(new Exception("mapirq {{lib_error}}"))
 	
 	outportd(nabmbar + PORT_NABM_POBDBAR, bd_addr)
 	outportb(nabmbar + PORT_NABM_POLVI, N) # final.... count-1?
 	outportb(nabmbar + PORT_NABM_POCONTROL, 0x15) # Abspielen, und danach auch Interrupt generieren!
 	
 	# seems we need an extra empty descriptor...
 	
 	sleep(5)

class BufferDesc
	func __init__()
		pass
	var addr: int
	var length_etc: int
#BufferDesc[] bd
var bd: BufferDesc[32]


func main()
	init_lib()
	string[] arg
	get_args(arg)
	
	#sb16_test()
	ac97_test()
	
	exit(0)
