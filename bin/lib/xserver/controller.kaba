use windows
use lib.std
use lib.std.sys
use lib.std.net
use lib.std.file

const XCMD_KILL = 666
const XCMD_NEW_WINDOW= 1024
const XCMD_DEL_WINDOW = 1025
const XCMD_WINDOW_MOVE = 1026
const XCMD_WINDOW_INVALIDATE = 1027
const XCMD_WINDOW_GET_SIZE = 2048
const XCMD_WINDOW_GET_POS = 2049
const XCMD_WINDOW_DRAG_START = 2050
const XCMD_WINDOW_DRAG_STOP = 2051
const XCMD_WINDOW_ACTIVATE = 2052
const XCMD_POINTER_GET_WINDOW = 3072
const XCMD_EXECUTE = 4096

const XCMD_EVENT_MOUSE = 3072
const XCMD_EVENT_KEY = 3073
const XCMD_EVENT_DRAW = 3074

const CON_STATUS_CLEAR = 0
const CON_STATUS_BUSY = 13
const CON_STATUS_SERVER_SEND = 1
const CON_STATUS_SERVER_ANSWER = 2
const CON_STATUS_CLIENT_SEND = 3
const CON_STATUS_CLIENT_ANSWER = 4



class Client
	var sock: int
	var kill_me: bool
	var win: owned![XWindow][]
	var buf: int[8]
	
	func __init__(_sock: int)
		sock = _sock
		kill_me = false
		kprint("x: new client sock={{sock}}\n")
	
	func __delete__()
		kprint("x: del client\n")
		win.clear()
		#for w in win
		#	del w
		close(sock)
	
	func mut send(cmd: int, p1: int, p2: int, p3: int, p4: int, p5: int)
		kprint(" x:send ")
		buf[0] = cmd
		buf[1] = p1
		buf[2] = p2
		buf[3] = p3
		buf[4] = p4
		buf[5] = p5
		var r = write(sock, &buf[0], 4*8)
		kprint(str(r))
		#return buf[32]
		kprint(" x:/send ")
	
#	func mut send_mouse()
#		kprint("x: send mouse\n")
#		var w = find_top_most_window(mouse.x, mouse.y)
#		var id = -1
#		for _w in w
#			id = _w.id
#		send(XCMD_EVENT_MOUSE, mouse.x, mouse.y, mouse.flags, id, 0)
#	
#	func mut send_key()
#		kprint("x: send key\n")
#		send(XCMD_EVENT_KEY, keyboard.key, 0, 0, 0, 0)
	
	func mut poll()
		let n = read(sock, &buf[0], 4*8)
		if n == -ENOTCONN
			kill_me = true
			return
		if n <= 0
			return
		kprint("x: recv\n")
		if buf[0] == XCMD_KILL
			kill_me = true
		else if buf[0] == XCMD_NEW_WINDOW
			var ww = new XWindow(&self, buf[1], buf[2], buf[3], buf[4], 2 | WF_DONT_INVALIDATE)
			send(XCMD_NEW_WINDOW, ww.id, ww.shm_key, ww.r.x0, ww.r.y0, 0)
			kprint("x: c.sock={{sock}} w.key={{ww.shm_key}}\n")
			activate_window(weak(ww))
			win.add(give(ww))
		else if buf[0] == XCMD_WINDOW_INVALIDATE
			for w in win
				if w.id == buf[1]
					invalidated.add(w.r)
		else if buf[0] == XCMD_WINDOW_MOVE
			for w in win
				if w.id == buf[1]
					w.move(buf[2], buf[3])
		else if buf[0] == XCMD_WINDOW_GET_POS
			for w in win
				if w.id == buf[1]
					send(XCMD_WINDOW_GET_POS, w.id, w.r.x0, w.r.y0, 0, 0)
					break
		else if buf[0] == XCMD_WINDOW_GET_SIZE
			for w in win
				if w.id == buf[1]
					send(XCMD_WINDOW_GET_SIZE, w.id, w.r.w(), w.r.h(), 0, 0)
					break
#		else if buf[0] == XCMD_WINDOW_DRAG_START
#			for w in win
#				if w.id == buf[1]
#					mouse.drag_win = w
#					break
#		else if buf[0] == XCMD_WINDOW_DRAG_STOP
#			for w in win
#				if w.id == buf[1]
#					mouse.drag_win = nil
#					break
		else if buf[0] == XCMD_WINDOW_ACTIVATE
			for w in win
				if w.id == buf[1]
					w.level = 3
					sort_windows()
					w.level = 2
					activate_window(w)
					invalidated.add(w.r)
					break
		else if buf[0] == XCMD_DEL_WINDOW
			for i=>w in win
				if w.id == buf[1]
					win.remove(i)
					break
#		else if buf[0] == XCMD_POINTER_GET_WINDOW
#			for w in find_top_most_window(mouse.x, mouse.y)
#				send(XCMD_POINTER_GET_WINDOW, w.id, 0, 0, 0, 0)
#			else
#				send(XCMD_POINTER_GET_WINDOW, -1, 0, 0, 0, 0)
#		else if buf[0] == XCMD_EXECUTE
#			var cmd: string[]
#			for i in 0:buf[1]
#				cmd.add(read_string())
#			#print("EXE  " + cmd[0] + "  ---")
#			let r = pm.run(cmd)
#			send(XCMD_EXECUTE, r, 0, 0, 0, 0)
	
	func read_string() -> string
		var num: int
		read(sock, &num, 4)
		var s: string
		s.resize(num)
		read(sock, &s[0], num)
		return s
			
		

class CommandController
	var sock: int
	#int connection
	var clients: owned![Client][]
	
	func __init__()
	
		sock = socket(0)
		if !bind(sock, 0x7bcd0123)
			print("x: bind() failed")
			exit(-1)
		if !listen(sock)
			print("x: listen() failed")
			exit(-1)
		fcntl(sock, F_SETFL, O_RDWR | O_NONBLOCK)
		
		#mkfifo("/tmp/x")
		#connection = open("/tmp/x", O_RDONLY)
	
	func mut update()
		let ss = accept(sock)
		if ss >= 0
			fcntl(ss, F_SETFL, O_RDWR | O_NONBLOCK)
			clients.add(new Client(ss))
			
		for c in clients
			c.poll()
		for i in 0:len(clients)
			if clients[i].kill_me
				clients.remove(i)
				i --

var cmds: owned![CommandController]