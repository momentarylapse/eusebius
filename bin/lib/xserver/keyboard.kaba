use lib.std.file.*
use controller.*
use hui

class KeyboardController
	var key: int
	var handle: int
	var control, shift, altgr: bool
	var escaped: bool
	func __init__()
		handle = open("/dev/keyboard", O_RDONLY | O_NONBLOCK)
#		fcntl(stdin, F_SETFL, O_RDONLY | O_NONBLOCK)
		control = false
		shift = false
		altgr = false
		escaped = false
	func mut digest(_k: int)
		var k = _k
		if k == 0xe0
			escaped = true
			return

		if escaped
			k += 0xe000
		escaped = false
	
		if (k & 0x80) > 0
			if k == 0xaa or k == 0xb6
				shift = false
			if k == 0x9d or k == 0xe09d
				control = false
			if k == 0xe0b8
				altgr = false
		if k == 0x2a or k == 0x36
			shift = true
		if k == 0x1d or k == 0xe01d
			control = true
		if k == 0xe038
			altgr = true
		
		key = getkey(k)
		if key < 0
			return
		if shift
			key += hui.KEY_SHIFT
		if control
			key += hui.KEY_CONTROL
		if altgr
			key += hui.KEY_ALT
		
#		for cc in cmds.clients
#			cc.send_key()

	func getkey(k: int) -> int
		if k == 0x1c
			return hui.KEY_RETURN
		if k == 0x39
			return hui.KEY_SPACE
		if k == 0x0e
			return hui.KEY_BACKSPACE
		if k == 0xe053
			return hui.KEY_DELETE
		if k == 0xe048
			return hui.KEY_UP
		if k == 0xe050
			return hui.KEY_DOWN
		if k == 0xe04b
			return hui.KEY_LEFT
		if k == 0xe04d
			return hui.KEY_RIGHT
		if k == 0x0b
			return hui.KEY_0
		if k == 0x02
			return hui.KEY_1
		if k == 0x03
			return hui.KEY_2
		if k == 0x04
			return hui.KEY_3
		if k == 0x05
			return hui.KEY_4
		if k == 0x06
			return hui.KEY_5
		if k == 0x07
			return hui.KEY_6
		if k == 0x08
			return hui.KEY_7
		if k == 0x09
			return hui.KEY_8
		if k == 0x0a
			return hui.KEY_9
		if k == 0x35
			return hui.KEY_MINUS
		if k == 0x34
			return hui.KEY_DOT
		if k == 0x33
			return hui.KEY_COMMA
		if k == 0x56
			return hui.KEY_LESS
		if k == 0x2b
			return hui.KEY_FENCE
		if k == 0x1b
			return hui.KEY_PLUS
		if k == 0x29
			return -1 # '^'
		if k == 0x0c
			return hui.KEY_SZ
		if k == 0x0d
			return -1 # 'Â´'
			
		if k == 0x1e
			return hui.KEY_A
		if k == 0x30
			return hui.KEY_B
		if k == 0x2e
			return hui.KEY_C
		if k == 0x20
			return hui.KEY_D
		if k == 0x12
			return hui.KEY_E
		if k == 0x21
			return hui.KEY_F
		if k == 0x22
			return hui.KEY_G
		if k == 0x23
			return hui.KEY_H
		if k == 0x17
			return hui.KEY_I
		if k == 0x24
			return hui.KEY_J
		if k == 0x25
			return hui.KEY_K
		if k == 0x26
			return hui.KEY_L
		if k == 0x32
			return hui.KEY_M
		if k == 0x31
			return hui.KEY_N
		if k == 0x18
			return hui.KEY_O
		if k == 0x19
			return hui.KEY_P
		if k == 0x10
			return hui.KEY_Q
		if k == 0x13
			return hui.KEY_R
		if k == 0x1f
			return hui.KEY_S
		if k == 0x14
			return hui.KEY_T
		if k == 0x16
			return hui.KEY_U
		if k == 0x2f
			return hui.KEY_V
		if k == 0x11
			return hui.KEY_W
		if k == 0x2d
			return hui.KEY_X
		if k == 0x2c
			return hui.KEY_Y
		if k == 0x15
			return hui.KEY_Z
		return -1

	func mut poll()
		var k = 0
		let r = read(handle, &k, 1)
		if r > 0
			digest(k)

var keyboard: owned![KeyboardController]