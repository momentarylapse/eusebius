#define __FUNCTION_POINTER_AS_CODE__
use os

const O_RDONLY = 1
const O_WRONLY = 2
const O_RDWR = 3
const O_APPEND = 16
const O_CREATE = 32
const O_NONBLOCK = 64
const O_TRUNC = 128


const EWOULDBLOCK = 128
const ENOSPC = 127
const EACCES = 126
const EEXIST = 125
const EINVAL = 124
const ENOENT = 123
const ENOMEM = 122
const ESRCH = 121
const ECHILD = 120
const EBADF = 119
const ENFILE = 118
const EFAULT = 117
const ENOSYS = 116
const ENOTDIR = 115
const EISDIR = 114
const ENOTEMPTY = 113
const ENOTSOCK = 112
const EADDRINUSE = 111
const ECONNREFUSED = 110
const ENOTCONN = 109

const F_GETFL = 1
const F_SETFL = 2

const SEEK_SET = 1
const SEEK_CUR = 2
const SEEK_END = 3

const SIGKILL = 9
const SIGSEGV = 11
const SIGCONT = 18
const SIGSTOP = 19
const SIGX = 23



const SHM_ABSOLUTE = 1 << 20
const SHM_DEST = 1<<11
const IPC_CREAT = 1<<12
const IPC_EXCL = 1<<13

class TimeValue
	var sec, nanosec: int

class SysInfo
	var uptime: int
	var loads: int[3]
	var totalram, freeram, sharedram, bufferram: int
	var totalswap, freeswap: int
	var procs: int
	var totalhigh, freehigh: int
	var mem_unit: int
	var pad: int[2]
	var totalheap, freeheap: int

class TaskInfo
	var name: cstring
	var pid, ppid, mode, status: int
	var mem: int
	var cpu: int
	var life: TimeValue
	func __assign__(o: TaskInfo)
		pass

class MountInfo
	var major, minor: int
	var dir: cstring
	func __assign__(o: MountInfo)
		pass
class BlockDevice
	var major, minor: int
	var disk_no: int
	var offset, size: int
	var block_size: int
	var type: char
	var active: bool
	var name: cstring
	var p: void*
	func __assign__(o: BlockDevice)
		pass

class StatData
	var name: cstring
	var type: int
	var size: int
	var inode: int
	var mp_inode: int
	var time: int
	func __assign__(o: StatData)
		pass

func extern init_lib()
#func extern get_args(arg: string[])
#
#var extern malloc_first_free: int&
#
#var extern stdin, stdout: int
#var extern lib_error: int
#var extern lib_mem_debug: bool
#var extern lib_print_endl: bool
#
#func extern cs2s(cs: cstring) -> string
##func extern binary(p: void*, num: int) -> string
#
func extern exit(r: int) -> bool
#func extern execute(arg: string[], fd_in: int, fd_out: int) -> int
#func extern fork() -> int
#func extern open(filename: Path, flags: int) -> int
#func extern create(filename: Path) -> int
#func extern close(h: int) -> bool
#func extern read(h: int, buf: void&, size: int) -> int
#func extern write(h: int, buf: void&, size: int) -> int
#func extern seek(h: int, offset: int, mode: int) -> int
#func extern mkdir(filename: Path) -> bool
#func extern rmdir(filename: Path) -> bool
#func extern mkfifo(filename: Path) -> bool
#func extern unlink(filename: Path) -> bool
#func extern dup(h: int) -> int
#func extern pipe(h: int[2]) -> bool
#func extern fcntl(h: int, op: int, param: int) -> int
#func extern getpid() -> int
#func extern chdir(dir: Path) -> bool
#func extern waitpid(pid: int, status: void&, block: bool) -> int
#func extern kill(pid: int, signal: int) -> bool
#func extern shmget(key: int, size: int, flags: int) -> int
#func extern shmat(id: int, flags: int) -> void*
#func extern shmdt(p: void&) -> bool
#func extern waitmsg() -> bool
#func extern yield(pid: int) -> bool
#func extern sysinfo(s: SysInfo) -> bool
#func extern taskinfo(pid: int, out t: TaskInfo) -> bool
#func extern mountinfo(index: int, out i: MountInfo) -> bool
#func extern blockinfo(major: int, minor: int, out d: BlockDevice) -> bool
#func extern stat(filename: Path, out s: StatData) -> bool
#func extern sched_yield(pid: int) -> bool
#func extern uname(buf: void*) -> bool
#func extern time(t: TimeValue) -> bool
#func extern nanosleep(a: TimeValue, b: TimeValue) -> bool
#func extern sleep(sec: int) -> bool
#func extern usleep(usec: int) -> bool
#func extern sigaction(sig: int, f: void*) -> bool
#func extern mapirq(irq: int, signal: int) -> bool
#func extern addr2phys(p: void*) -> int
#
#func extern kprint(s: string)
func extern kprinti(i: int)
func extern kprintc(s: cstring, l: int)
#
#func extern socket(type: int) -> int
#func extern bind(fd: int, port: int) -> bool
#func extern connect(fd: int, port: int) -> bool
#func extern listen(fd: int) -> bool
#func extern accept(fd: int) -> int

func extern memcpy(dest: void&, source: void&, size: int)

## because std lib is 64bit...
#func extern Filesystem_size32(filename: Path) -> int
#
#