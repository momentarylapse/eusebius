use lib.std
use lib.x.*
use lib.draw.*
#use lib.ttfx
#use hui

let FRAME_BAR = 30
let FRAME_WIDTH = 2
let WIDGET_FRAME_WIDTH = 2.0
let GRID_MARGIN = 10
let FONT_SIZE = 15.0
let FONT_SIZE_BAR = 17.0
let FONT_NAME = "Cantarell"

var col_window_frame: Color
var col_text: Color
var col_background: Color
var col_title: Color
var col_button: Color
var col_button_frame: Color
var col_button_hover: Color
var col_button_hover_frame: Color
var col_button_click: Color
var col_button_click_frame: Color
var col_frame: Color
var col_frame_active: Color


func dir_append(dir: string, e: string) -> string
	var r: string = dir
	if r.tail(1) != "/"
		r += "/"
	return r + e

func key_to_str(_key: int) -> string
	var key = _key
	if key == KEY_RETURN
		return "\n"
	if key == KEY_SPACE
		return " "
	if key == KEY_TAB
		return "\t"
	if key == KEY_LESS
		return "<"
	if key == KEY_PLUS
		return "+"
	if key == KEY_MINUS
		return "-"
	if key == KEY_FENCE
		return "#"
	if key == KEY_DOT
		return "."
	if key == KEY_COMMA
		return ","
	if key == KEY_AE
		return "ä"
	if key == KEY_OE
		return "ö"
	if key == KEY_UE
		return "ü"
	if key == KEY_SZ
		return "ß"
	if key >= KEY_A and key <= KEY_Z
		var s: string
		s.add('a' + key - KEY_A)
		return s
	if key >= KEY_0 and key <= KEY_9
		var s: string
		s.add('0' + key - KEY_0)
		return s
	if (key & KEY_SHIFT) > 0
		key -= KEY_SHIFT
		if key >= KEY_A and key <= KEY_Z
			var s: string
			s.add('A' + key - KEY_A)
			return s
		if key == KEY_0
			return "="
		if key == KEY_1
			return "!"
		if key == KEY_2
			return "\""
		if key == KEY_3
			return "§"
		if key == KEY_4
			return "$"
		if key == KEY_5
			return "%"
		if key == KEY_6
			return "&"
		if key == KEY_7
			return "/"
		if key == KEY_8
			return "("
		if key == KEY_9
			return ")"
		if key == KEY_PLUS
			return "*"
		if key == KEY_FENCE
			return "'"
		if key == KEY_COMMA
			return ";"
		if key == KEY_DOT
			return ":"
		if key == KEY_MINUS
			return "_"
		if key == KEY_LESS
			return ">"
	if (key & KEY_ALT) > 0
		key -= KEY_ALT
		if key == KEY_SZ
			return "\\"
		if key == KEY_7
			return "{"
		if key == KEY_8
			return "["
		if key == KEY_9
			return "]"
		if key == KEY_0
			return "}"
		if key == KEY_PLUS
			return "~"
		if key == KEY_LESS
			return "|"
		if key == KEY_Q
			return "@"

struct MtkSizeNegotiationData
	var min_width: int
	var min_height: int
	var expand_x: bool
	var expand_y: bool
	
	func __init__(min_w: int, min_h: int, exp_x: bool, exp_y: bool)
		min_width = min_w
		min_height = min_h
		expand_x = exp_x
		expand_y = exp_y

class MtkWidget
	var win: MtkWindow*
	var p: owned[XPainter]
	var r: XRect # relative to window
	var mx, my: int
	var snd: MtkSizeNegotiationData
#	var font: FontDescriptor*
	
	func __init__()
		win = nil
		p = nil
		mx = 0
		my = 0
		snd = MtkSizeNegotiationData(10, 10, true, true)
#		font = default_font
	
#	func virtual __delete__()
#		if p
#			del p
	
	func virtual can_grab_input() -> bool
		return false
	
	func has_input() -> bool
		for w in win
			return w.active and (&self == w.input_widget)
		return false
	
	func mut set_win(win: MtkWindow&, x: int, y: int, w: int, h: int)
		self.win = win
		for _w in self.win
			_w.widgets.add(&self)
			p = new XPainter(_w)
#			p.font = font
			resize(x, y, w, h)
	
	func mut resize(x: int, y: int, w: int, h: int)
		for _w in win
			for _p in p
				_p.set_as_ref(_p, x, y, w, h)
		r.x0 = x
		r.y0 = y
		r.x1 = x + w
		r.y1 = y + h
	
		on_resize()
		
#	func set_font(f: FontDescriptor*)
#		font = f
#		if p
#			p.font = f
	
	func virtual on_resize()
	func virtual draw()
	func virtual on_mouse_move()
	func virtual on_mouse_left_button_down()
	func virtual on_mouse_left_button_up()
	func virtual on_key(key: int)

class MtkLabel extends MtkWidget
	var text: string
	func __init__(text: string)
		self.text = text
		snd = MtkSizeNegotiationData(default_font.get_str_width(text)+10, 25, false, false)
	func set_text(text: string)
		if self.text == text
			return
		self.text = text
		if p
			draw()
			p.end()
		snd.min_width = default_font.get_str_width(text)+10
	func override draw()
		p.set_color(col_background)
		p.rectangle(p.all)
		p.fill()
		p.set_color(col_text)
		p.draw_str(5, 5, text)

class MtkGrid extends MtkWidget
	var nx, ny: int
	var children: MtkWidget*[]
	var child_exp_x, child_exp_y: bool[]
	var child_min_w, child_min_h: int[]
	var child_w, child_h: int[]
	func __init__(_nx: int, _ny: int)
		nx = _nx
		ny = _ny
		children.resize(nx * ny)
		for c in children
			c = nil
		child_exp_x.resize(nx)
		child_exp_y.resize(ny)
		child_min_w.resize(nx)
		child_w.resize(nx)
		child_min_h.resize(ny)
		child_h.resize(ny)
		for w in child_min_w
			w = 0
		for h in child_min_h
			h = 0
		for w in child_w
			w = 0
		for h in child_h
			h = 0
		for b in child_exp_x
			b = false
		for b in child_exp_y
			b = false
		snd = MtkSizeNegotiationData((nx-1) * GRID_MARGIN, (ny-1) * GRID_MARGIN, false, false)
	func override draw()
		p.set_color(col_background)
		p.rectangle(p.all)
		p.fill()
		for c in children
			if c
				c.draw()
	func put(x: int, y: int, out c: MtkWidget*)
		# update snd
		if c.snd.expand_x
			child_exp_x[x] = true
			snd.expand_x = true
		if c.snd.expand_y
			child_exp_y[y] = true
			snd.expand_y = true
		child_min_w[x] = max(child_min_w[x], c.snd.min_width)
		child_min_h[y] = max(child_min_h[y], c.snd.min_height)
		snd.min_width = (nx-1) * GRID_MARGIN
		for i in 0:nx
			snd.min_width += child_min_w[i]
		snd.min_height = (ny-1) * GRID_MARGIN
		for j in 0:ny
			snd.min_height += child_min_h[j]
	
		children[x + y * nx] = c
		var ww = (r.w() - (nx - 1) * GRID_MARGIN) / nx
		var hh = (r.h() - (ny - 1) * GRID_MARGIN) / ny
		var dx = (ww + GRID_MARGIN) * x
		var dy = (hh + GRID_MARGIN) * y
		c.set_win(win, r.x0 + dx, r.y0 + dy, ww, hh)
		
	func override on_resize()
		# plan child sizes...
		
		# min
		var sum_min_w = 0
		for w in child_min_w
			sum_min_w += w
		var sum_min_h = 0
		for h in child_min_h
			sum_min_h += h
			
		# expansion
		var n_exp_x = 0
		var n_exp_y = 0
		for b in child_exp_x
			if b
				n_exp_x ++
		for b in child_exp_y
			if b
				n_exp_y ++
		var exp_x = 0
		if n_exp_x > 0
			exp_x = (r.w() - (nx-1)*GRID_MARGIN - sum_min_w) / n_exp_x
		var exp_y = 0
		if n_exp_y > 0
			exp_y = (r.h() - (ny-1)*GRID_MARGIN - sum_min_h) / n_exp_y
	
		# actual sizes
		var child_x, child_y: int[]
		var x0 = r.x0
		var y0 = r.y0
		for w,i in child_w
			child_x.add(x0)
			w = child_min_w[i]
			if child_exp_x[i]
				w += exp_x
			x0 += w + GRID_MARGIN
		for h,j in child_h
			child_y.add(y0)
			h = child_min_h[j]
			if child_exp_y[j]
				h += exp_y
			y0 += h + GRID_MARGIN
			
		# apply
		for c,ci in children
			if c
				var i = ci % nx
				var j = ci / nx
				c.resize(child_x[i], child_y[j], child_w[i], child_h[j])

enum ButtonState
	DEFAULT
	HOVER
	CLICK

class MtkButton extends MtkWidget
	var text: string
	var state: ButtonState
	func __init__(text: string)
		self.text = text
		state = ButtonState.DEFAULT
		snd = MtkSizeNegotiationData(default_font.get_str_width(text)+30, 30, true, false)
	
	func override can_grab_input() -> bool
		return true
		
	func set_text(text: string)
		if self.text == text
			return
		self.text = text
		if p
			draw()
			p.end()
		snd.min_width = default_font.get_str_width(text)+30
			
	func override draw()
		p.set_color(col_button)
		if state == BUTTON_STATE_HOVER
			p.set_color(col_button_hover)
		if state == BUTTON_STATE_CLICK
			p.set_color(col_button_click)
		p.rectangle(p.all)
		p.fill()
		
		p.set_color(col_button_frame)
		if state == BUTTON_STATE_HOVER
			p.set_color(col_button_hover_frame)
		if state == BUTTON_STATE_CLICK
			p.set_color(col_button_click_frame)
		var fr = WIDGET_FRAME_WIDTH / 2.0
		p.line_width = fr
		p.rectangle(rect(fr, r.w()-fr, fr, r.h()-fr))
		p.strike()
		p.line_width = 1
		
		p.set_color(col_text)
		var w = p.font.get_str_width(text)
		p.draw_str((r.w() - w) / 2, (r.h() - FONT_SIZE) / 2, text)
		
	func set_state(_state: int)
		if _state == state
			return
		state = _state
		draw()
		p.end()
		if state == BUTTON_STATE_CLICK
			on_click()
	
	func override on_mouse_move()
		var inside = r.inside(win.mx, win.my)
		if inside
			if win.lbut
				set_state(BUTTON_STATE_CLICK)
			else
				set_state(BUTTON_STATE_HOVER)
		if !inside
			set_state(BUTTON_STATE_DEFAULT)
		# not the best way :P
		
	func virtual on_click()

class MtkTextView extends MtkWidget
	var text: string
	var cursor_pos: int
	var multi_line: bool
	
	func override __init__()
		cursor_pos = 0
		multi_line = true
		snd = MtkSizeNegotiationData(30, 30, true, true)
	
	func override can_grab_input() -> bool
		return true
		
	func set_text(text: string)
		self.text = text
		cursor_pos = text.num
		if p
			draw()
			p.end()
	
	func to_screen(pos: int, out x: int*, out y: int*)
		var lines = text.head(pos).explode("\n")
		*y = 5
		*x = 5
		if lines.num > 0
			*y = 5 + 20*(lines.num - 1)
			*x = 5 + p.font.get_str_width(lines[lines.num - 1])
	
	func to_text(x: int, y: int) -> int
		var lines = text.explode("\n")
		var n = (y - 5) / 20
		var pos = 0
		for l,i in lines
			if i >= n
				pos += (x - 5) / 16
				break
			pos += l.num + 1
		if pos > text.num
			pos = text.num
		return pos
			
	func override draw()
		if win.active
			p.set_color(col_window_frame)
		else
			p.set_color(col_background)
		p.rectangle(p.all)
		p.fill()
		
		if has_input()
			p.set_color(col_frame_active)
		else
			p.set_color(col_frame)
		var fr = WIDGET_FRAME_WIDTH / 2.0
		p.line_width = fr
		p.rectangle(rect(fr, r.w()-fr, fr, r.h()-fr))
		p.strike()
		p.line_width = 1
		
		p.set_color(col_text)
		var lines = text.explode("\n")
		for l,i in lines
			p.draw_str(5, 5 + i * 20, l)
		
		if has_input()
			var cx, cy: int
			to_screen(cursor_pos, &cx, &cy)
			p.move_to(cx, cy)
			p.line_to(cx, cy + 20)
			p.strike()
	
	func override on_mouse_left_button_down()
		cursor_pos = to_text(mx, my)
		draw()
		p.end()
		
	func override on_key(key: int)
		if key == KEY_RETURN and multi_line
			insert("\n")
		else if key == KEY_BACKSPACE
			if cursor_pos > 0
				text.remove(cursor_pos - 1)
				cursor_pos --
				notify_change()
		else if key == KEY_DELETE
			if cursor_pos < text.num
				text.remove(cursor_pos)
				notify_change()
		else if key == KEY_LEFT
			if cursor_pos > 0
				cursor_pos --
				notify_change()
		else if key == KEY_RIGHT
			if cursor_pos < text.num
				cursor_pos ++
				notify_change()
		else
			var s = key_to_str(key)
			if s.num > 0
				insert(s)
	
	func insert(s: string)
		text = text.head(cursor_pos) + s + text.tail(text.num - cursor_pos)
		#text.insert(cursor_pos, key)
		cursor_pos ++
		notify_change()
			
	func notify_change()
		if p
			draw()
			p.end()
		on_edit()
		
	func virtual on_edit()
	

class MtkEdit extends MtkTextView
	func override __init__()
		multi_line = false
		snd = MtkSizeNegotiationData(30, 30, true, false)

class MtkWindow extends XWindow
	var p: XPainter*
	var title: string
	var widget: MtkWidget* = nil
	var widgets: MtkWidget*[]
	var input_widget: MtkWidget* = nil
	var shown = false
	var dragging = false
	var frame = true
	var killed = false
	var button_close_hover = false
	
	func __init__(title: string, w: int, h: int)
		super.__init__(xcon, -1, -1, w + FRAME_WIDTH * 2, h + FRAME_WIDTH + FRAME_BAR)
		mtk_windows.add(&self)
		
		self.title = title
		
		p = new XPainter(&self)
		p.font = font_db.get(FONT_NAME, FONT_SIZE_BAR)
		
	#void __init__(string title, int x, int y, int w, int h)
#		super.__init__(xcon, x, y, w+20, h+30)
#		widget = nil
#		input_widget = nil
#		shown = false
#		dragging = false
#		frame = true
#		
#		self.title = title
#		
#		p = new XPainter(self)
#		p.font = LoadTTF("/home/x.font")
	
	func override __delete__()
		if !killed
			close()
		if widget
			del widget
		del p
	
	func show()
		shown = true
		if widget
			widget.resize(FRAME_WIDTH, FRAME_BAR, w - FRAME_WIDTH*2, h - FRAME_WIDTH - FRAME_BAR)
		draw()
		p.end()
	
	func override close()
		super.close()
		killed = true
	
	func draw()
		shown = true
		if frame
			draw_frame()
		if widget
			widget.draw()
	
	func set_title(_title: string)
		if title == _title
			return
		title = _title
		if shown
			show()
	
	func put(out widget: MtkWidget*)
		self.widget = widget
		widget.set_win(&self, FRAME_WIDTH, FRAME_BAR, w - FRAME_WIDTH*2, h - FRAME_WIDTH - FRAME_BAR)
		
		if shown
			widget.draw()
	
	func draw_frame()
		if active
			p.set_color(col_window_frame)
		else
			p.set_color(col_background)
		p.rectangle(p.all)
		p.fill()
		p.set_color(col_title)
		p.draw_str(FRAME_WIDTH, 4.0, title)
		if button_close_hover
			p.set_color([1,0,0, 1]) #color.RED)
			p.draw_str(w - 20, 4, "X")
		
	func override on_mouse_move()
		for w in widgets
			w.mx = mx - w.r.x0
			w.my = my - w.r.y0
			w.on_mouse_move()
		var new_button_close_hover = frame and (my < FRAME_BAR) and (mx > w - FONT_SIZE_BAR - FRAME_WIDTH)
		if new_button_close_hover != button_close_hover
			button_close_hover = new_button_close_hover
			draw()
			invalidate(w - 30, 0, w, FRAME_BAR)
			
	func override on_mouse_left_button_down()
		#XWindow* ww = xcon.get_at_cursor()
		if &self == xcon.cursor_win
			activate()
			if frame and my < FRAME_BAR
				if button_close_hover
					if on_close_request()
						#exit(0)
						close()
				else
					drag_start()
					dragging = true
			else
				for w in widgets
					if w.r.inside(mx, my)
						if w.can_grab_input()
							if w != input_widget
								MtkWidget *old = input_widget
								input_widget = w
								if old
									old.draw()
								w.draw()
								p.end()
						w.on_mouse_left_button_down()
					
	func override on_mouse_left_button_up()
		if dragging
			drag_stop()
			dragging = false
		for w in widgets
			w.on_mouse_left_button_up()
			
	func override on_key(key: int)
		if input_widget
			input_widget.on_key(key)
	
	func virtual on_close_request() -> bool
		return true
	
	func override handle_activate()
		show()

class MtkErrorBoxOkButton extends MtkButton
	func __init__()
		super.__init__("Ok")
	func override on_click()
		win.close()

class MtkErrorBox extends MtkWindow
	func __init__(message: string)
		super.__init__("Error", 300, 100)
		MtkGrid* g = new MtkGrid(1, 2)
		put(g)
		
		MtkLabel* l = new MtkLabel(message)
		l.snd.expand_y = true
		g.put(0, 0, l)
		
		MtkButton* b = new MtkErrorBoxOkButton()
		g.put(0, 1, b)
			

func mtk_error_box(message: string)
	MtkWindow *win = new MtkErrorBox(message)
	win.show()


class MtkIdle
	func virtual do()
		pass

var xcon: XConnection*
var idles: MtkIdle*[]
#var default_font: FontDescriptor*
#var title_font: FontDescriptor*
#var font_db: FontDB*
var mtk_windows: MtkWindow*[]

func mtk_init()
	init_lib()
	stdout = open("/dev/tty", O_WRONLY)
	idles.__init__()
	mtk_windows.__init__()
	
	col_window_frame = [1,1,1, 1] #color.WHITE
	col_text = [0,0,0, 1] #color.BLACK
	col_background = [0.9, 0.9, 0.9, 1]
	col_title = [0,0,0, 1] #color.BLACK
	col_button = [0.6, 0.6, 0.95, 1]
	col_button_frame = [0.4, 0.4, 0.80, 1]
	col_button_hover = [0.7, 0.7, 1.0, 1]
	col_button_hover_frame = [0.5, 0.5, 0.85, 1]
	col_button_click = [0.4, 0.4, 0.8, 1]
	col_button_click_frame = [0.2, 0.2, 0.5, 1]
	col_frame = [0.6, 0.6, 0.6, 1]
	col_frame_active = [0.4, 0.4, 0.80, 1]
	
	xcon = new XConnection()
	if xcon.error
		print("client: can not connect to x\n")
		exit(-1)
	
	font_db = new FontDB()
	default_font = font_db.get(FONT_NAME, FONT_SIZE)

func mtk_add_idle(i: MtkIdle*)
	idles.add(i)

func mtk_open(filename: string)
	var cmd: string[]
	if filename.tail(4) == ".tga"
		cmd.add("/bin/ximage")
	else
		cmd.add("/bin/xedit")
	cmd.add(filename)
	if xcon.execute(cmd) < 0
		mtk_error_box("execute... {{lib_error}}")

func mtk_run()
	while true
		xcon.poll()
		usleep(5000)
		for i in idles
			i.do()
		
		for w,i in mtk_windows
			if w.killed
				mtk_windows.remove(i)
				del(w)
				break
			
		# nothing more to do...
		if mtk_windows.num + idles.num == 0
			break
		
	del xcon
	exit(0)
