use "../std.kaba"
use "../x.kaba"
use "../draw.kaba"
use "../ttfx.kaba"

const int FRAME_BAR = 30
const int FRAME_WIDTH = 10
const int GRID_MARGIN = 10

color col_frame
color col_text
color col_background
color col_title
color col_button
color col_button_frame
color col_button_hover
color col_button_hover_frame
color col_button_click
color col_button_click_frame

class MtkWidget
	MtkWindow* owner
	XPainter* p
	int offset_x, offset_y
	int width, height
	
	void __init__()
		owner = nil
		p = nil
	
	virtual void __delete__()
		if p
			delete p
	
	void set_win(MtkWindow* win, int x, int y, int w, int h)
		owner = win
		p = new XPainter(win.p_outer, x, y, w, h)
		offset_x = x
		offset_y = y
		width = w
		height = h
	
	virtual void draw()
	virtual void onMouse(int x, int y, int flags)
	virtual void onKey(int key)

class MtkLabel extends MtkWidget
	string text
	void __init__(string text)
		self.text = text
	void set_text(string text)
		if self.text == text
			return
		self.text = text
		if p
			draw()
			p.end()
	override void draw()
		p.set_color(col_background)
		p.rectangle(p.all)
		p.fill()
		p.set_color(col_text)
		p.draw_str(5, 5, text, 0.007)

class MtkGrid extends MtkWidget
	int nx, ny
	MtkWidget*[] children
	void __init__(int _nx, int _ny)
		nx = _nx
		ny = _ny
		children.resize(nx * ny)
		for c in children
			c = nil
	override void draw()
		p.set_color(col_background)
		p.rectangle(p.all)
		p.fill()
		for c in children
			if c
				c.draw()
	override void onMouse(int x, int y, int flags)
		for c in children
			if c
				c.onMouse(x + offset_x - c.offset_x, y + offset_y - c.offset_y, flags)
	void put(int x, int y, MtkWidget *c)
		children[x + y * nx] = c
		int ww = (width - (nx - 1) * GRID_MARGIN) / nx
		int hh = (height - (ny - 1) * GRID_MARGIN) / ny
		int dx = (ww + GRID_MARGIN) * x
		int dy = (hh + GRID_MARGIN) * y
		c.set_win(owner, offset_x + dx, offset_y + dy, ww, hh)

enum
	BUTTON_STATE_DEFAULT
	BUTTON_STATE_HOVER
	BUTTON_STATE_CLICK

class MtkButton extends MtkWidget
	string text
	int state
	void __init__(string text)
		self.text = text
		state = BUTTON_STATE_DEFAULT
	void set_text(string text)
		if self.text == text
			return
		self.text = text
		if p
			draw()
			p.end()
	override void draw()
		p.set_color(col_button)
		if state == BUTTON_STATE_HOVER
			p.set_color(col_button_hover)
		if state == BUTTON_STATE_CLICK
			p.set_color(col_button_click)
		p.rectangle(p.all)
		p.fill()
		
		p.set_color(col_button_frame)
		if state == BUTTON_STATE_HOVER
			p.set_color(col_button_hover_frame)
		if state == BUTTON_STATE_CLICK
			p.set_color(col_button_click_frame)
		p.line_width = 4
		p.rectangle(rect(3, width-3, 3, height-3))
		p.strike()
		p.line_width = 1
		
		p.set_color(col_text)
		p.draw_str(15, 15, text, 0.007)
		
	void set_state(int _state)
		if _state == state
			return
		state = _state
		draw()
		p.end()
		if state == BUTTON_STATE_CLICK
			onClick()
	virtual void onClick()
	override void onMouse(int x, int y, int flags)
		bool inside = (x >= 0) and (x < width) and (y >= 0) and (y < height)
		if inside
			if (flags & 1) > 0
				set_state(BUTTON_STATE_CLICK)
			else
				set_state(BUTTON_STATE_HOVER)
		if !inside
			set_state(BUTTON_STATE_DEFAULT)
		// not the best way :P

class MtkWindow extends XWindow
	XPainter* p_outer
	string title
	MtkWidget* widget
	bool shown
	bool lb
	
	void __init__(string title, int w, int h)
		super.__init__(xcon, -1, -1, w + FRAME_WIDTH * 2, h + FRAME_WIDTH + FRAME_BAR)
		widget = nil
		shown = false
		lb = false
		
		self.title = title
		
		p_outer = new XPainter(self)
		p_outer.font = LoadTTF("/home/x.font")
	
	override void __delete__()
		if widget
			delete widget
	
	void show()
		shown = true
		draw()
		p_outer.end()
	
	void draw()
		shown = true
		draw_frame()
		if widget
			widget.draw()
	
	void set_title(string _title)
		if title == _title
			return
		title = _title
		if shown
			show()
	
	void put(MtkWidget* widget)
		self.widget = widget
		widget.set_win(self, FRAME_WIDTH, FRAME_BAR, w - FRAME_WIDTH*2, h - FRAME_WIDTH - FRAME_BAR)
		
		if shown
			widget.draw()
	
	void draw_frame()
		p_outer.set_color(col_frame)
		p_outer.rectangle(p_outer.all)
		p_outer.fill()
		p_outer.set_color(col_title)
		p_outer.draw_str(FRAME_WIDTH, 12.0, title, 0.008)
		
	override void onMouse(int x, int y, int flags)
		bool lb_new = ((flags & 1) > 0)
		//kprint("-- ff " + flags + "  ")
		if !lb and lb_new
			//kprint(" ============= DOWN ================")
			//kprint(id)
			XWindow* ww = xcon.get_at_cursor()
			if ww == self
				raise_top()
				if y < FRAME_BAR
					drag_start()
		if lb and !lb_new
			//kprint(" ============= UP ================")
			//kprint(id)
			drag_stop()
		lb = lb_new
		//kprint(">>")
		
		if widget
			widget.onMouse(x - widget.offset_x, y - widget.offset_y, flags)
	/*override void onKey(int key)
		if widget
			widget.onKey(key)*/


class MtkIdle
	virtual void do()
		nil

XConnection* xcon
MtkIdle*[] idles

void mtk_init()
	init_lib()
	idles.__init__()
	
	col_frame = White
	col_text = Black
	col_background = color(1, 0.9, 0.9, 0.9)
	col_title = Black
	col_button = color(1, 0.6, 0.6, 0.95)
	col_button_frame = color(1, 0.4, 0.4, 0.80)
	col_button_hover = color(1, 0.7, 0.7, 1.0)
	col_button_hover_frame = color(1, 0.5, 0.5, 0.85)
	col_button_click = color(1, 0.4, 0.4, 0.8)
	col_button_click_frame = color(1, 0.2, 0.2, 0.5)
	
	xcon = new XConnection
	if xcon.error
		print("client: kann nicht mit x verbinden\n")
		exit(-1)

void mtk_add_idle(MtkIdle *i)
	idles.add(i)

void mtk_run()
	while true
		xcon.poll()
		usleep(5000)
		for i in idles
			i.do()
		
	delete xcon
	exit(0)