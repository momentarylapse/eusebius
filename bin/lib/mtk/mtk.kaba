use lib.std
use lib.x
use lib.draw
use lib.ttfx
use hui

const int FRAME_BAR = 30
const int FRAME_WIDTH = 2
const float WIDGET_FRAME_WIDTH = 2.0
const int GRID_MARGIN = 10
const float FONT_SIZE = 15.0
const float FONT_SIZE_BAR = 17.0
const string FONT_NAME = "Cantarell"

color col_window_frame
color col_text
color col_background
color col_title
color col_button
color col_button_frame
color col_button_hover
color col_button_hover_frame
color col_button_click
color col_button_click_frame
color col_frame
color col_frame_active


string dir_append(string dir, string e)
	string r = dir
	if r.tail(1) != "/"
		r += "/"
	return r + e

string key_to_str(int _key)
	int key = _key
	if key == KEY_RETURN
		return "\n"
	if key == KEY_SPACE
		return " "
	if key == KEY_TAB
		return "\t"
	if key == KEY_LESS
		return "<"
	if key == KEY_PLUS
		return "+"
	if key == KEY_MINUS
		return "-"
	if key == KEY_FENCE
		return "#"
	if key == KEY_DOT
		return "."
	if key == KEY_COMMA
		return ","
	if key == KEY_AE
		return "ä"
	if key == KEY_OE
		return "ö"
	if key == KEY_UE
		return "ü"
	if key == KEY_SZ
		return "ß"
	if key >= KEY_A and key <= KEY_Z
		string s
		s.add('a' + key - KEY_A)
		return s
	if key >= KEY_0 and key <= KEY_9
		string s
		s.add('0' + key - KEY_0)
		return s
	if (key & KEY_SHIFT) > 0
		key -= KEY_SHIFT
		if key >= KEY_A and key <= KEY_Z
			string s
			s.add('A' + key - KEY_A)
			return s
		if key == KEY_0
			return "="
		if key == KEY_1
			return "!"
		if key == KEY_2
			return "\""
		if key == KEY_3
			return "§"
		if key == KEY_4
			return "$"
		if key == KEY_5
			return "%"
		if key == KEY_6
			return "&"
		if key == KEY_7
			return "/"
		if key == KEY_8
			return "("
		if key == KEY_9
			return ")"
		if key == KEY_PLUS
			return "*"
		if key == KEY_FENCE
			return "'"
		if key == KEY_COMMA
			return ";"
		if key == KEY_DOT
			return ":"
		if key == KEY_MINUS
			return "_"
		if key == KEY_LESS
			return ">"
	if (key & KEY_ALT) > 0
		key -= KEY_ALT
		if key == KEY_SZ
			return "\\"
		if key == KEY_7
			return "{"
		if key == KEY_8
			return "["
		if key == KEY_9
			return "]"
		if key == KEY_0
			return "}"
		if key == KEY_PLUS
			return "~"
		if key == KEY_LESS
			return "|"
		if key == KEY_Q
			return "@"

class MtkSizeNegotiationData
	int min_width
	int min_height
	bool expand_x
	bool expand_y
	
	void __init__(int min_w, int min_h, bool exp_x, bool exp_y)
		min_width = min_w
		min_height = min_h
		expand_x = exp_x
		expand_y = exp_y

class MtkWidget
	MtkWindow* win
	XPainter* p
	XRect r # relative to window
	int mx, my
	MtkSizeNegotiationData snd
	FontDescriptor* font
	
	void __init__()
		win = nil
		p = nil
		mx = 0
		my = 0
		snd = MtkSizeNegotiationData(10, 10, true, true)
		font = default_font
	
	virtual void __delete__()
		if p
			del p
	
	virtual bool can_grab_input()
		return false
	
	bool has_input()
		return win.active and (&self == win.input_widget)
	
	void set_win(out MtkWindow* win, int x, int y, int w, int h)
		self.win = win
		win.widgets.add(&self)
		p = new XPainter(win)
		p.font = font
		resize(x, y, w, h)
	
	void resize(int x, int y, int w, int h)
		p.set_as_ref(win.p, x, y, w, h)
		r.x0 = x
		r.y0 = y
		r.x1 = x + w
		r.y1 = y + h
	
		on_resize()
		
	void set_font(FontDescriptor* f)
		font = f
		if p
			p.font = f
	
	virtual void on_resize()
	virtual void draw()
	virtual void on_mouse_move()
	virtual void on_mouse_left_button_down()
	virtual void on_mouse_left_button_up()
	virtual void on_key(int key)

class MtkLabel extends MtkWidget
	string text
	void __init__(string text)
		self.text = text
		snd = MtkSizeNegotiationData(default_font.get_str_width(text)+10, 25, false, false)
	void set_text(string text)
		if self.text == text
			return
		self.text = text
		if p
			draw()
			p.end()
		snd.min_width = default_font.get_str_width(text)+10
	override void draw()
		p.set_color(col_background)
		p.rectangle(p.all)
		p.fill()
		p.set_color(col_text)
		p.draw_str(5, 5, text)

class MtkGrid extends MtkWidget
	int nx, ny
	MtkWidget*[] children
	bool[] child_exp_x, child_exp_y
	int[] child_min_w, child_min_h
	int[] child_w, child_h
	void __init__(int _nx, int _ny)
		nx = _nx
		ny = _ny
		children.resize(nx * ny)
		for c in children
			c = nil
		child_exp_x.resize(nx)
		child_exp_y.resize(ny)
		child_min_w.resize(nx)
		child_w.resize(nx)
		child_min_h.resize(ny)
		child_h.resize(ny)
		for w in child_min_w
			w = 0
		for h in child_min_h
			h = 0
		for w in child_w
			w = 0
		for h in child_h
			h = 0
		for b in child_exp_x
			b = false
		for b in child_exp_y
			b = false
		snd = MtkSizeNegotiationData((nx-1) * GRID_MARGIN, (ny-1) * GRID_MARGIN, false, false)
	override void draw()
		p.set_color(col_background)
		p.rectangle(p.all)
		p.fill()
		for c in children
			if c
				c.draw()
	void put(int x, int y, out MtkWidget *c)
		# update snd
		if c.snd.expand_x
			child_exp_x[x] = true
			snd.expand_x = true
		if c.snd.expand_y
			child_exp_y[y] = true
			snd.expand_y = true
		child_min_w[x] = max(child_min_w[x], c.snd.min_width)
		child_min_h[y] = max(child_min_h[y], c.snd.min_height)
		snd.min_width = (nx-1) * GRID_MARGIN
		for i in 0:nx
			snd.min_width += child_min_w[i]
		snd.min_height = (ny-1) * GRID_MARGIN
		for j in 0:ny
			snd.min_height += child_min_h[j]
	
		children[x + y * nx] = c
		int ww = (r.w() - (nx - 1) * GRID_MARGIN) / nx
		int hh = (r.h() - (ny - 1) * GRID_MARGIN) / ny
		int dx = (ww + GRID_MARGIN) * x
		int dy = (hh + GRID_MARGIN) * y
		c.set_win(win, r.x0 + dx, r.y0 + dy, ww, hh)
		
	override void on_resize()
		# plan child sizes...
		
		# min
		int sum_min_w = 0
		for w in child_min_w
			sum_min_w += w
		int sum_min_h = 0
		for h in child_min_h
			sum_min_h += h
			
		# expansion
		int n_exp_x = 0
		int n_exp_y = 0
		for b in child_exp_x
			if b
				n_exp_x ++
		for b in child_exp_y
			if b
				n_exp_y ++
		int exp_x = 0
		if n_exp_x > 0
			exp_x = (r.w() - (nx-1)*GRID_MARGIN - sum_min_w) / n_exp_x
		int exp_y = 0
		if n_exp_y > 0
			exp_y = (r.h() - (ny-1)*GRID_MARGIN - sum_min_h) / n_exp_y
	
		# actual sizes
		int[] child_x, child_y
		int x0 = r.x0
		int y0 = r.y0
		for w,i in child_w
			child_x.add(x0)
			w = child_min_w[i]
			if child_exp_x[i]
				w += exp_x
			x0 += w + GRID_MARGIN
		for h,j in child_h
			child_y.add(y0)
			h = child_min_h[j]
			if child_exp_y[j]
				h += exp_y
			y0 += h + GRID_MARGIN
			
		# apply
		for c,ci in children
			if c
				int i = ci % nx
				int j = ci / nx
				c.resize(child_x[i], child_y[j], child_w[i], child_h[j])

enum
	BUTTON_STATE_DEFAULT
	BUTTON_STATE_HOVER
	BUTTON_STATE_CLICK

class MtkButton extends MtkWidget
	string text
	int state
	void __init__(string text)
		self.text = text
		state = BUTTON_STATE_DEFAULT
		snd = MtkSizeNegotiationData(default_font.get_str_width(text)+30, 30, true, false)
	
	override bool can_grab_input()
		return true
		
	void set_text(string text)
		if self.text == text
			return
		self.text = text
		if p
			draw()
			p.end()
		snd.min_width = default_font.get_str_width(text)+30
			
	override void draw()
		p.set_color(col_button)
		if state == BUTTON_STATE_HOVER
			p.set_color(col_button_hover)
		if state == BUTTON_STATE_CLICK
			p.set_color(col_button_click)
		p.rectangle(p.all)
		p.fill()
		
		p.set_color(col_button_frame)
		if state == BUTTON_STATE_HOVER
			p.set_color(col_button_hover_frame)
		if state == BUTTON_STATE_CLICK
			p.set_color(col_button_click_frame)
		float fr = WIDGET_FRAME_WIDTH / 2.0
		p.line_width = fr
		p.rectangle(rect(fr, r.w()-fr, fr, r.h()-fr))
		p.strike()
		p.line_width = 1
		
		p.set_color(col_text)
		float w = p.font.get_str_width(text)
		p.draw_str((r.w() - w) / 2, (r.h() - FONT_SIZE) / 2, text)
		
	void set_state(int _state)
		if _state == state
			return
		state = _state
		draw()
		p.end()
		if state == BUTTON_STATE_CLICK
			on_click()
	
	override void on_mouse_move()
		bool inside = r.inside(win.mx, win.my)
		if inside
			if win.lbut
				set_state(BUTTON_STATE_CLICK)
			else
				set_state(BUTTON_STATE_HOVER)
		if !inside
			set_state(BUTTON_STATE_DEFAULT)
		# not the best way :P
		
	virtual void on_click()

class MtkTextView extends MtkWidget
	string text
	int cursor_pos
	bool multi_line
	
	override void __init__()
		cursor_pos = 0
		multi_line = true
		snd = MtkSizeNegotiationData(30, 30, true, true)
	
	override bool can_grab_input()
		return true
		
	void set_text(string text)
		self.text = text
		cursor_pos = text.num
		if p
			draw()
			p.end()
	
	void to_screen(int pos, out int* x, out int* y)
		string[] lines = text.head(pos).explode("\n")
		*y = 5
		*x = 5
		if lines.num > 0
			*y = 5 + 20*(lines.num - 1)
			*x = 5 + p.font.get_str_width(lines[lines.num - 1])
	
	int to_text(int x, int y)
		string[] lines = text.explode("\n")
		int n = (y - 5) / 20
		int pos = 0
		for l,i in lines
			if i >= n
				pos += (x - 5) / 16
				break
			pos += l.num + 1
		if pos > text.num
			pos = text.num
		return pos
			
	override void draw()
		if win.active
			p.set_color(col_window_frame)
		else
			p.set_color(col_background)
		p.rectangle(p.all)
		p.fill()
		
		if has_input()
			p.set_color(col_frame_active)
		else
			p.set_color(col_frame)
		float fr = WIDGET_FRAME_WIDTH / 2.0
		p.line_width = fr
		p.rectangle(rect(fr, r.w()-fr, fr, r.h()-fr))
		p.strike()
		p.line_width = 1
		
		p.set_color(col_text)
		string[] lines = text.explode("\n")
		for l,i in lines
			p.draw_str(5, 5 + i * 20, l)
		
		if has_input()
			int cx, cy
			to_screen(cursor_pos, &cx, &cy)
			p.move_to(cx, cy)
			p.line_to(cx, cy + 20)
			p.strike()
	
	override void on_mouse_left_button_down()
		cursor_pos = to_text(mx, my)
		draw()
		p.end()
		
	override void on_key(int key)
		if key == KEY_RETURN and multi_line
			insert("\n")
		else if key == KEY_BACKSPACE
			if cursor_pos > 0
				text.remove(cursor_pos - 1)
				cursor_pos --
				notify_change()
		else if key == KEY_DELETE
			if cursor_pos < text.num
				text.remove(cursor_pos)
				notify_change()
		else if key == KEY_LEFT
			if cursor_pos > 0
				cursor_pos --
				notify_change()
		else if key == KEY_RIGHT
			if cursor_pos < text.num
				cursor_pos ++
				notify_change()
		else
			string s = key_to_str(key)
			if s.num > 0
				insert(s)
	
	void insert(string s)
		text = text.head(cursor_pos) + s + text.tail(text.num - cursor_pos)
		#text.insert(cursor_pos, key)
		cursor_pos ++
		notify_change()
			
	void notify_change()
		if p
			draw()
			p.end()
		onEdit()
		
	virtual void onEdit()
	

class MtkEdit extends MtkTextView
	override void __init__()
		multi_line = false
		snd = MtkSizeNegotiationData(30, 30, true, false)

class MtkWindow extends XWindow
	XPainter* p
	string title
	MtkWidget* widget
	MtkWidget*[] widgets
	MtkWidget* input_widget
	bool shown
	bool dragging
	bool frame
	bool killed
	bool button_close_hover
	
	void __init__(string title, int w, int h)
		super.__init__(xcon, -1, -1, w + FRAME_WIDTH * 2, h + FRAME_WIDTH + FRAME_BAR)
		widget = nil
		input_widget = nil
		shown = false
		dragging = false
		frame = true
		killed = false
		button_close_hover = false
		mtk_windows.add(&self)
		
		self.title = title
		
		p = new XPainter(&self)
		p.font = font_db.get(FONT_NAME, FONT_SIZE_BAR)
		
	#void __init__(string title, int x, int y, int w, int h)
#		super.__init__(xcon, x, y, w+20, h+30)
#		widget = nil
#		input_widget = nil
#		shown = false
#		dragging = false
#		frame = true
#		
#		self.title = title
#		
#		p = new XPainter(self)
#		p.font = LoadTTF("/home/x.font")
	
	override void __delete__()
		if !killed
			close()
		if widget
			del widget
		del p
	
	void show()
		shown = true
		if widget
			widget.resize(FRAME_WIDTH, FRAME_BAR, w - FRAME_WIDTH*2, h - FRAME_WIDTH - FRAME_BAR)
		draw()
		p.end()
	
	override void close()
		super.close()
		killed = true
	
	void draw()
		shown = true
		if frame
			draw_frame()
		if widget
			widget.draw()
	
	void set_title(string _title)
		if title == _title
			return
		title = _title
		if shown
			show()
	
	void put(out MtkWidget* widget)
		self.widget = widget
		widget.set_win(&self, FRAME_WIDTH, FRAME_BAR, w - FRAME_WIDTH*2, h - FRAME_WIDTH - FRAME_BAR)
		
		if shown
			widget.draw()
	
	void draw_frame()
		if active
			p.set_color(col_window_frame)
		else
			p.set_color(col_background)
		p.rectangle(p.all)
		p.fill()
		p.set_color(col_title)
		p.draw_str(FRAME_WIDTH, 4.0, title)
		if button_close_hover
			p.set_color([1,0,0, 1]) #color.RED)
			p.draw_str(w - 20, 4, "X")
		
	override void on_mouse_move()
		for w in widgets
			w.mx = mx - w.r.x0
			w.my = my - w.r.y0
			w.on_mouse_move()
		bool new_button_close_hover = frame and (my < FRAME_BAR) and (mx > w - FONT_SIZE_BAR - FRAME_WIDTH)
		if new_button_close_hover != button_close_hover
			button_close_hover = new_button_close_hover
			draw()
			invalidate(w - 30, 0, w, FRAME_BAR)
			
	override void on_mouse_left_button_down()
		#XWindow* ww = xcon.get_at_cursor()
		if &self == xcon.cursor_win
			activate()
			if frame and my < FRAME_BAR
				if button_close_hover
					if on_close_request()
						#exit(0)
						close()
				else
					drag_start()
					dragging = true
			else
				for w in widgets
					if w.r.inside(mx, my)
						if w.can_grab_input()
							if w != input_widget
								MtkWidget *old = input_widget
								input_widget = w
								if old
									old.draw()
								w.draw()
								p.end()
						w.on_mouse_left_button_down()
					
	override void on_mouse_left_button_up()
		if dragging
			drag_stop()
			dragging = false
		for w in widgets
			w.on_mouse_left_button_up()
			
	override void on_key(int key)
		if input_widget
			input_widget.on_key(key)
	
	virtual bool on_close_request()
		return true
	
	override void handle_activate()
		show()

class MtkErrorBoxOkButton extends MtkButton
	void __init__()
		super.__init__("Ok")
	override void on_click()
		win.close()

class MtkErrorBox extends MtkWindow
	void __init__(string message)
		super.__init__("Error", 300, 100)
		MtkGrid* g = new MtkGrid(1, 2)
		put(g)
		
		MtkLabel* l = new MtkLabel(message)
		l.snd.expand_y = true
		g.put(0, 0, l)
		
		MtkButton* b = new MtkErrorBoxOkButton()
		g.put(0, 1, b)
			

void mtk_error_box(string message)
	MtkWindow *win = new MtkErrorBox(message)
	win.show()


class MtkIdle
	virtual void do()
		nil

XConnection* xcon
MtkIdle*[] idles
FontDescriptor* default_font
FontDescriptor* title_font
FontDB* font_db
MtkWindow*[] mtk_windows

void mtk_init()
	init_lib()
	stdout = open("/dev/tty", O_WRONLY)
	idles.__init__()
	mtk_windows.__init__()
	
	col_window_frame = [1,1,1, 1] #color.WHITE
	col_text = [0,0,0, 1] #color.BLACK
	col_background = [0.9, 0.9, 0.9, 1]
	col_title = [0,0,0, 1] #color.BLACK
	col_button = [0.6, 0.6, 0.95, 1]
	col_button_frame = [0.4, 0.4, 0.80, 1]
	col_button_hover = [0.7, 0.7, 1.0, 1]
	col_button_hover_frame = [0.5, 0.5, 0.85, 1]
	col_button_click = [0.4, 0.4, 0.8, 1]
	col_button_click_frame = [0.2, 0.2, 0.5, 1]
	col_frame = [0.6, 0.6, 0.6, 1]
	col_frame_active = [0.4, 0.4, 0.80, 1]
	
	xcon = new XConnection()
	if xcon.error
		print("client: can not connect to x\n")
		exit(-1)
	
	font_db = new FontDB()
	default_font = font_db.get(FONT_NAME, FONT_SIZE)

void mtk_add_idle(MtkIdle *i)
	idles.add(i)

void mtk_open(string filename)
	string[] cmd
	if filename.tail(4) == ".tga"
		cmd.add("/bin/ximage")
	else
		cmd.add("/bin/xedit")
	cmd.add(filename)
	if xcon.execute(cmd) < 0
		mtk_error_box("execute... {{lib_error}}")

void mtk_run()
	while true
		xcon.poll()
		usleep(5000)
		for i in idles
			i.do()
		
		for w,i in mtk_windows
			if w.killed
				mtk_windows.remove(i)
				del(w)
				break
			
		# nothing more to do...
		if mtk_windows.num + idles.num == 0
			break
		
	del xcon
	exit(0)
