use "std.kaba"

string hex(char[0]* p, int size)
	string s
	for i in 0:size
		s.add(p[i])
	return s.hex(false)
string i2h(int i)
	return hex(&i, 4)



void _read(File *f, char[0]* p, int size)
	string s = f.read(size)
	for i in 0:size
		p[i] = s[i]

class TTFContour
	int start, num
	

class TTFGlyph
	//float xmin, ymin, xmax, ymax
	float width
	int code
	TTFContour[] contours

class TTFFont
	
	complex[] points
	bool[] on_curve
	TTFGlyph[] glyphs
	float kerning
	
	File *f
	
	int readI()
		int i
		_read(f, &i, 4)
		return i
	
	float readF()
		float r
		_read(f, &r, 4)
		return r
	
	bool readB()
		bool r
		_read(f, &r, 1)
		return r
		
	
	bool load(string filename)

		f = FileOpen(filename)
		if !f
			print("kann Datei nicht lesen\n")
			return false
		//f.setBinaryMode(true)
		
		int n = readI()
		glyphs.resize(n)
		for g,i in glyphs
			g.code = readI() + 3 // FIXME!!!!
			g.width = readF()
			readF()
			n = readI()
			g.contours.resize(n)
			for c in g.contours
				c.start = readI()
				c.num = readI()
		n = readI()
		points.resize(n)
		_read(f, &points[0], n*8)
		on_curve.resize(n)
		_read(f, &on_curve[0], n)
		
		kerning = 0.2
	
		delete f
		return true
		
	
	TTFGlyph* get(int code)
		//print("get ")
		for g,i in glyphs
			if g.code == code
				//print("" + i + "\n")
				return &g
		return &glyphs[0]
		
	float get_str_width(string text, float font_size)
		float scale = font_size
		float w = 0
		for c,i in text
			int code = c2i(c) & 0x000000ff
			if code == 9
				w += 4
				continue
				
			if i > 0
				w += kerning
			int index = 0
			for g in glyphs
				if g.code == code
					w += g.width
					break
		return w * scale

TTFFont *LoadTTF(string filename)
	TTFFont *f = new TTFFont
	if f.load(filename)
		return f
	delete f
	return nil
