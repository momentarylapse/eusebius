use os
use "std.kaba"

string hex(void* _p, int size)
	char[0]* p = _p
	string s
	for i in 0:size
		s.add(p[i])
	return s.hex(false)
string i2h(int i)
	return hex(&i, 4)


float time_dif(TimeValue t1, TimeValue t2)
	float d = t2.sec - t1.sec
	d += float(t2.nanosec - t1.nanosec) * 0.000000001
	return d


void _read(out File *f, void* _p, int size)
	char[0]* p = _p
	string s = f.read(size)
	for i in 0:size
		p[i] = s[i]

class TTFContour
	int start, num
	

class TTFGlyph
	int code
	float width
	float _dummy_
	int _num_contours_
	TTFContour[] contours

class TTFFont
	
	string name
	complex[] points
	bool[] on_curve
	TTFGlyph[] glyphs
	
	File *f
	
	int readI()
		int i
		_read(f, &i, 4)
		return i
	
	float readF()
		float r
		_read(f, &r, 4)
		return r
	
	bool readB()
		bool r
		_read(f, &r, 1)
		return r
		
	
	bool load(string filename)

		f = Filesystem.open(filename)
		if !f
			print("kann Datei nicht lesen\n")
			return false
		#f.setBinaryMode(true)
		#TimeValue tv1
#		time(tv1)
#		kprint("load font ")
		
		int n = readI()
		glyphs.resize(n)
		for g,i in glyphs
			#g.code = readI()
#			g.width = readF()
#			readF()
#			n = readI()
			_read(f, &g.code, 4*4)
			g.contours.resize(g._num_contours_)
			_read(f, &g.contours[0], g.contours.num * 8)
			#for c in g.contours
#				c.start = readI()
#				c.num = readI()
		#TimeValue tv2
#		time(tv2)
#		kprint("[" + time_dif(tv1, tv2) + "]")
		n = readI()
		points.resize(n)
		_read(f, &points[0], n*8)
		on_curve.resize(n)
		_read(f, &on_curve[0], n)
		
		#TimeValue tv3
#		time(tv3)
#		kprint("[" + time_dif(tv2, tv3) + "]")
		
		del f
		return true
		
	
	TTFGlyph* get(int code)
		#print("get ")
		for g,i in glyphs
			if g.code == code
				#print("" + i + "\n")
				return &g
		return &glyphs[0]
		
	float get_str_width(string text, float font_size)
		float scale = font_size
		float w = 0
		for c,i in text
			int code = int(c) & 0x000000ff
			if code == 9
				w += 4 * 0.5
				continue
				
			int index = 0
			for g in glyphs
				if g.code == code
					w += g.width
					break
		return w * scale

TTFFont *LoadTTF(string filename)
	let f = new TTFFont()
	if f.load(filename)
		return f
	del f
	return nil

class FontDescriptor
	TTFFont *font
	float size
	
	void __init__()
	float get_str_width(string text)
		return font.get_str_width(text, size)

class FontDB
	TTFFont*[] fonts
	FontDescriptor*[] descriptors
	
	FontDescriptor* get(string name, float size)
		for d in descriptors
			if d.font.name == name and d.size == size
				return d
		let d = new FontDescriptor()
		d.size = size
		for f in fonts
			if f.name == name
				d.font = f
				return d
		d.font = LoadTTF("/home/" + name + ".font")
		if d.font
			d.font.name = name
			descriptors.add(d)
			return d
		if fonts.num > 0
			d.font = fonts[0]
			descriptors.add(d)
			return d
		del d
		return nil
