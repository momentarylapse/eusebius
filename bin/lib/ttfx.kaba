use os
use lib.std

func hex(_p: void*, size: int) -> string
	char[0]* p = _p
	string s
	for i in 0:size
		s.add(p[i])
	return s.hex()
func i2h(i: int) -> string
	return hex(&i, 4)


func time_dif(t1: TimeValue, t2: TimeValue) -> float
	float d = t2.sec - t1.sec
	d += float(t2.nanosec - t1.nanosec) * 0.000000001
	return d


func _read(out f: File*, _p: void*, size: int)
	char[0]* p = _p
	string s = f.read(size)
	for i in 0:size
		p[i] = s[i]

class TTFContour
	var start, num: int
	

class TTFGlyph
	var code: int
	var width: float
	var _dummy_: float
	var _num_contours_: int
	var contours: TTFContour[]

class TTFFont
	
	var name: string
	var points: complex[]
	var on_curve: bool[]
	var glyphs: TTFGlyph[]
	
	var f: File*
	
	func readI() -> int
		int i
		_read(f, &i, 4)
		return i
	
	func readF() -> float
		float r
		_read(f, &r, 4)
		return r
	
	func readB() -> bool
		bool r
		_read(f, &r, 1)
		return r
		
	
	func load(filename: string) -> bool

		f = Filesystem.open(filename)
		if !f
			print("can not read file\n")
			return false
		#f.setBinaryMode(true)
		#TimeValue tv1
#		time(tv1)
#		kprint("load font ")
		
		int n = readI()
		glyphs.resize(n)
		for g,i in glyphs
			#g.code = readI()
#			g.width = readF()
#			readF()
#			n = readI()
			_read(f, &g.code, 4*4)
			g.contours.resize(g._num_contours_)
			_read(f, &g.contours[0], len(g.contours) * 8)
			#for c in g.contours
#				c.start = readI()
#				c.num = readI()
		#TimeValue tv2
#		time(tv2)
#		kprint("[" + time_dif(tv1, tv2) + "]")
		n = readI()
		points.resize(n)
		_read(f, &points[0], n*8)
		on_curve.resize(n)
		_read(f, &on_curve[0], n)
		
		#TimeValue tv3
#		time(tv3)
#		kprint("[" + time_dif(tv2, tv3) + "]")
		
		del f
		return true
		
	
	func get(code: int) -> TTFGlyph*
		#print("get ")
		for g,i in glyphs
			if g.code == code
				#print("" + i + "\n")
				return &g
		return &glyphs[0]
		
	func get_str_width(text: string, font_size: float) -> float
		float scale = font_size
		float w = 0
		for c,i in text
			int code = int(c) & 0x000000ff
			if code == 9
				w += 4 * 0.5
				continue
				
			int index = 0
			for g in glyphs
				if g.code == code
					w += g.width
					break
		return w * scale

func LoadTTF(filename: string) -> TTFFont*
	var f = new TTFFont()
	if f.load(filename)
		return f
	del f
	return nil

class FontDescriptor
	var font: TTFFont*
	var size: float
	
	func __init__()
	func get_str_width(text: string) -> float
		return font.get_str_width(text, size)

class FontDB
	var fonts: TTFFont*[]
	var descriptors: FontDescriptor*[]
	
	func get(name: string, size: float) -> FontDescriptor*
		for d in descriptors
			if d.font.name == name and d.size == size
				return d
		var d = new FontDescriptor()
		d.size = size
		for f in fonts
			if f.name == name
				d.font = f
				return d
		d.font = LoadTTF("/home/{{name}}.font")
		if d.font
			d.font.name = name
			descriptors.add(d)
			return d
		if len(fonts) > 0
			d.font = fonts[0]
			descriptors.add(d)
			return d
		del d
		return nil
