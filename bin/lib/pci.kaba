use lib.std
use lib.io

const CLASS_STORAGE = 1
const SUBCLASS_STORAGE_IDE = 1
const SUBCLASS_STORAGE_ATA = 5
const SUBCLASS_STORAGE_SATA = 6

const CLASS_NET = 2
const SUBCLASS_NET_ETHERNET = 0

const CLASS_DISPLAY = 3
const SUBCLASS_DISPLAY_VGA = 0
const SUBCLASS_DISPLAY_XGA = 1

const CLASS_MULTIMEDIA = 4
const SUBCLASS_MULTIMEDIA_MAUDIO = 1
const SUBCLASS_MULTIMEDIA_AUDIO = 3

const CLASS_BRIDGE = 6
const SUBCLASS_BRIDGE_HOST = 0

const CLASS_SERIAL_BUS = 0x0c
const SUBCLASS_SERIAL_BUS_USB = 3


const PCI_VENDOR_ID = 0x00
const PCI_DEVICE_ID = 0x02
const PCI_COMMAND = 0x04

const PCI_CONFIG_DATA = 0x0cfc
const PCI_CONFIG_ADDRESS = 0x0cf8


class PCIDevice
	var controller: PCIController*
	var header_type: int
	var bus, slot, function: int
	var vendor, device: int
	var _class, subclass: int
	var bar: int[6]
	var secondary_bus: int
	var irq: int
	
	func const get_secondary_bus() -> int
		return -1
		
	func __init__(con: PCIController)
		controller = &con
		for i in 0:6
			bar[i] = 0
		irq = -1
	
	func const get_mem_addr(index: int) -> int
		if (bar[index] & 1) == 0
			return bar[index] & 0xfffffff0
		return 0
	
	func const get_io_addr(index: int) -> int
		if (bar[index] & 1) == 1
			return bar[index] & 0xfffffffc
		return 0
	
	func const __str__() -> string
		string s = "{{bus}}:{{slot}}:{{function}} {{vendor|4x}}:{{device|4x}} class={{_class}}:{{subclass}}  ht={{header_type}}"
		if irq >= 0
			s += "  irq={{irq}}"
		return s
	
	func const usage() -> string
		if _class == CLASS_NET and subclass == SUBCLASS_NET_ETHERNET
			return "ethernet"
		if _class == CLASS_DISPLAY and subclass == SUBCLASS_DISPLAY_VGA
			return "vga"
		if _class == CLASS_DISPLAY and subclass == SUBCLASS_DISPLAY_XGA
			return "xga"
		if _class == CLASS_MULTIMEDIA and subclass == SUBCLASS_MULTIMEDIA_MAUDIO
			return "sound"
		if _class == CLASS_MULTIMEDIA and subclass == SUBCLASS_MULTIMEDIA_AUDIO
			return "sound"
		if _class == CLASS_STORAGE and subclass == SUBCLASS_STORAGE_IDE
			return "ide"
		return "?"
	func read_config(offset: int) -> int
		return controller.read_config(bus, slot, function, offset)
	func write_config(offset: int, value: int)
		controller.write_config(bus, slot, function, offset, value)

class PCIController
	func read_config(bus: int, slot: int, _func: int, offset: int) -> int
		# configuration address
		int address = ((bus << 16) | (slot << 11) | (_func << 8) | (offset & 0xfc) | (0x80000000))
		outportd(PCI_CONFIG_ADDRESS, address)
		# read in the data 
		# (offset & 2) * 8) = 0 will choose the first word of the 32 bits register 
		return inportd(PCI_CONFIG_DATA)
	func write_config(bus: int, slot: int, _func: int, offset: int, value: int)
		# configuration address
		int address = ((bus << 16) | (slot << 11) | (_func << 8) | (offset & 0xfc) | (0x80000000))
		outportd(PCI_CONFIG_ADDRESS, address)
		outportd(PCI_CONFIG_DATA, value)


	var devices: PCIDevice*[]

	func check_device(bus: int, slot: int, function: int) -> PCIDevice*
		var p = getx(bus, slot, function)
		if p
			return p
	
		int a = read_config(bus, slot, function, PCI_VENDOR_ID)
	
		int vendor = a & 0xffff
		if vendor == 0xffff
			return nil
		#int b = read_config(bus, slot, function, 0x04)
		int c = read_config(bus, slot, function, 0x08)
		int d = read_config(bus, slot, function, 0x0c)
		p = new PCIDevice(self)
		p.header_type = (d >> 16) & 0x7f
		p.bus = bus
		p.slot = slot
		p.function = function
		p.vendor = vendor
		p.device = (a >> 16) & 0xffff
		p._class = c >> 24
		p.subclass = (c >> 16) & 0xff
		if p.header_type == 0
			for i in 0:6
				p.bar[i] = read_config(bus, slot, function, 0x10 + 4*i)
			p.irq = read_config(bus, slot, function, 0x3c) & 0x000000ff
		else if p.header_type == 1
			p.secondary_bus = (read_config(bus, slot, function, 0x18) >> 16) & 0xff
			p.irq = read_config(bus, slot, function, 0x3c) & 0x000000ff
		devices.add(p)
		return p

	func __scan()
		for bus in 0:256
			for slot in 0:32
				for function in 0:8
					check_device(bus, slot, function)
	
	func scan()
		var d = check_device(0, 0, 0)
		if !d
			return
		if (d.header_type & 0x80) == 0
			check_bus(0)
		else
			for function in 0:8
				if !check_device(0, 0, function)
					break
				check_bus(function)
	
	func check_bus(bus: int)
 		for slot in 0:32
 			for function in 0:8
				check_device(bus, slot, function)
	
	void check_function(int bus, int slot, int function)
		var d = getx(bus, slot, function)
		if (d._class == 0x06) and (d.subclass == 0x04)
			check_bus(d.get_secondary_bus())
	
	void show()
		for d in devices
			print(str(d))

	PCIDevice* getx(int bus, int slot, int function)
		for d in devices
			if (d.bus == bus) and (d.slot == slot) and (d.function == function)
				return d
		return nil

	PCIDevice* get(int vendor, int device)
		for d in devices
			if (d.vendor == vendor) and (d.device == device)
				return d
		return nil



