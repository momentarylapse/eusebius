use "std.kaba"

const int XCMD_KILL = 666
const int XCMD_NEW_WINDOW = 1024
const int XCMD_DEL_WINDOW = 1025
const int XCMD_WINDOW_MOVE = 1026
const int XCMD_WINDOW_INVALIDATE = 1027
const int XCMD_WINDOW_GET_SIZE = 2048
const int XCMD_WINDOW_GET_POS = 2049

class XWindow
	int id
	int[0]* buf
	XConnection *con
	void invalidate()
		con.send(XCMD_WINDOW_INVALIDATE, id, -1, -1, -1, -1)
	void move(int x, int y)
		con.send(XCMD_WINDOW_MOVE, id, x, y, 0, 0)
	void get_size(int *w, int *h)
		con.just_send(XCMD_WINDOW_GET_SIZE, id, 0, 0, 0, 0)
		*w = con.buf[33]
		*h = con.buf[34]
		con.wait_clear()
		

class XConnection
	int[0]* buf
	
	void __init__()
	
		int key = randi(1000000)
		print "client: key=" + key + "\n"
		int id = shmget(key, 1024, SHM_DEST | IPC_CREAT)
		buf = shmat(id, 0)
		buf[0] = 0
	
		// connect
		int id0 = shmget(0x7bcd0123, 0, 0)
		int[0]* buf0 = shmat(id0, 0)
	
		while buf0[0] != 0
			nil
		buf0[0] = 13
		buf0[1] = key
		buf0[0] = 1
		shmdt(buf0)
		
	void __delete__()
		send_exit()
	
	void wait_clear()
		while buf[0] != 0
			nil
	
	void clear()
		buf[0] = 1
	
	int just_send(int cmd, int p1, int p2, int p3, int p4, int p5)
		wait_clear()
		buf[0] = 13
		buf[1] = cmd
		buf[2] = p1
		buf[3] = p2
		buf[4] = p3
		buf[5] = p4
		buf[6] = p5
		buf[0] = 1
		wait_clear()
		return buf[32]
	
	int send(int cmd, int p1, int p2, int p3, int p4, int p5)
		int r = just_send(cmd, p1, p2, p3, p4, p5)
		clear()
		return r

	void send_exit()
		send(XCMD_KILL, 0, 0, 0, 0, 0)

	XWindow *create_win(int x, int y, int w, int h)
		if just_send(XCMD_NEW_WINDOW, x, y, w, h, 0) != 0
			print "   -- client: kein neues Fenster --\n"
			return nil
		XWindow *win = new XWindow
		win.con = self
		win.id = buf[33]
		int key = buf[34]
		clear()
		int id = shmget(key, 0, 0)
		win.buf = shmat(id, 0)
		print "client: ok " + key + " " + id + "\n"
		return win
		