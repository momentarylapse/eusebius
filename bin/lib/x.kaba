use lib.std

const int XCMD_KILL = 666
const int XCMD_NEW_WINDOW = 1024
const int XCMD_DEL_WINDOW = 1025
const int XCMD_WINDOW_MOVE = 1026
const int XCMD_WINDOW_INVALIDATE = 1027
const int XCMD_WINDOW_GET_SIZE = 2048
const int XCMD_WINDOW_GET_POS = 2049
const int XCMD_WINDOW_DRAG_START = 2050
const int XCMD_WINDOW_DRAG_STOP = 2051
const int XCMD_WINDOW_ACTIVATE = 2052
const int XCMD_POINTER_GET_WINDOW = 3072
const int XCMD_EXECUTE = 4096

const int XCMD_EVENT_MOUSE = 3072
const int XCMD_EVENT_KEY = 3073
const int XCMD_EVENT_DRAW = 3074

const int CON_STATUS_CLEAR = 0
const int CON_STATUS_BUSY = 13
const int CON_STATUS_SERVER_SEND = 1
const int CON_STATUS_SERVER_ANSWER = 2
const int CON_STATUS_CLIENT_SEND = 3
const int CON_STATUS_CLIENT_ANSWER = 4

class XRect
	int x0, y0, x1, y1
	int w()
		return x1 - x0
	int h()
		return y1 - y0
	bool inside(int x, int y)
		return x >= x0 and x < x1 and y >= y0 and y < y1
	string __str__()
		return "{{x0}}/{{y0}}:{{x1}}/{{y1}}"

class XWindow
	int x, y, w, h
	int id
	int[0]* buf
	XConnection *con
	
	bool active
	bool lbut, mbut, rbut
	int mx, my
	
	void __init__(out XConnection *c, int x, int y, int w, int h)
		con = c
		buf = nil
		self.x = x
		self.y = y
		self.w = w
		self.h = h
		lbut = false
		mbut = false
		rbut = false
		mx = 0
		my = 0
		active = false
		c._create_win(&self, x, y, w, h)
	virtual void __delete__()
		if buf
			shmdt(buf)
		for w,i in con.windows
			if w == &self
				con.windows.remove(i)
				break
	void create_buf(int _id, int key)
		id = _id
		int mem_id = shmget(key, 0, 0)
		buf = shmat(mem_id, 0)
		if !buf
			kprint("  -- client: konnte Fenster-Puffer nicht anlegen --\n")
	void invalidate(int x0, int y0, int x1, int y1)
		print("inval...")
		con.send(XCMD_WINDOW_INVALIDATE, id, x0, y0, x1, y1)
	void invalidate_all()
		print("inval all...")
		con.send(XCMD_WINDOW_INVALIDATE, id, -1, -1, -1, -1)
	void move(int x, int y)
		con.send(XCMD_WINDOW_MOVE, id, x, y, 0, 0)
	void get_size(out int *w, out int *h)
		con.just_send(XCMD_WINDOW_GET_SIZE, id, 0, 0, 0, 0)
		con.wait_recv(XCMD_WINDOW_GET_SIZE)
		*w = con.buf[2]
		*h = con.buf[3]
	void activate()
		con.send(XCMD_WINDOW_ACTIVATE, id, 0, 0, 0, 0)
	void drag_start()
		con.just_send(XCMD_WINDOW_DRAG_START, id, 0, 0, 0, 0)
	void drag_stop()
		con.just_send(XCMD_WINDOW_DRAG_STOP, id, 0, 0, 0, 0)
	void close()
		con.just_send(XCMD_DEL_WINDOW, id, 0, 0, 0, 0)
	virtual void on_key(int key)
		#print("c-win: key " + key + "\n")
	virtual void on_mouse_move()
	virtual void on_mouse_left_button_down()
	virtual void on_mouse_left_button_up()
	virtual void on_mouse_middle_button_down()
	virtual void on_mouse_middle_button_up()
	virtual void on_mouse_right_button_down()
	virtual void on_mouse_right_button_up()
		#print("c-win: mouse " + x + "/" + y + "   " + flags + "\n")
	virtual void handle_activate()
		

class XConnection
	int sock
	int[8] buf
	bool error
	XWindow*[] windows
	int mx, my
	bool lbut, mbut, rbut
	XWindow* cursor_win
	
	void __init__()
		error = true
		
		lbut = false
		mbut = false
		rbut = false
	
		# connect
		sock = socket(0)
		if !connect(sock, 0x7bcd0123)
			kprint("client: connect (2) failed\n")
			return
		fcntl(sock, F_SETFL, O_RDWR | O_NONBLOCK)
	
		error = false
		
	void __delete__()
		if error
			return
		send_exit()
		close(sock)
	
	void just_send(int cmd, int p1, int p2, int p3, int p4, int p5)
		kprint(" c:send ")
		buf[0] = cmd
		buf[1] = p1
		buf[2] = p2
		buf[3] = p3
		buf[4] = p4
		buf[5] = p5
		let r = write(sock, &buf[0], 4*8)
		kprint(str(r))
		kprint(" c:/send ")
	
	void send(int cmd, int p1, int p2, int p3, int p4, int p5)
		just_send(cmd, p1, p2, p3, p4, p5)
	
	void send_string(string s)
		write(sock, &s.num, 4)
		write(sock, &s[0], s.num)
	
	void wait_recv(int cmd)
		kprint(" WAIT ")
		while true
			if poll()
				if buf[0] == cmd
					break
			usleep(100)
		kprint(" /WAIT ")

	void send_exit()
		send(XCMD_KILL, 0, 0, 0, 0, 0)

	bool _create_win(out XWindow *win, int x, int y, int w, int h)
		kprint("client: send new win\n")
		just_send(XCMD_NEW_WINDOW, x, y, w, h, 0)
		
		wait_recv(XCMD_NEW_WINDOW)
		kprint("....client#/  ")
		if buf[0] != XCMD_NEW_WINDOW
			kprint("   -- client: no new window --\n")
			return false
		kprint("ok")
		int win_id = buf[1]
		int win_key = buf[2]
		win.create_buf(win_id, win_key)
		if !win.buf
			return false
		win.x = buf[3]
		win.y = buf[4]
		
		windows.add(win)
		#print "client: ok\n"# " + key + " " + id + "\n"
		return true
	
	#XWindow* get_at_cursor()
#		just_send(XCMD_POINTER_GET_WINDOW, 0, 0, 0, 0, 0)
#		wait_recv(XCMD_POINTER_GET_WINDOW)
#		int id = buf[1]
#		for w in windows
#			if w.id == id
#				return w
#		return nil
	
	int execute(string[] cmd)
		just_send(XCMD_EXECUTE, cmd.num, 0, 0, 0, 0)
		for c in cmd
			send_string(c)
		
		wait_recv(XCMD_EXECUTE)
		return buf[1]
	
	bool poll()
		int n = read(sock, &buf, 4*8)
		if n < 32
			return false
		#kprint("  c:poll  ")
		if buf[0] == XCMD_EVENT_MOUSE
			#kprint("client: mouse\n")
			int x = buf[1]
			int y = buf[2]
			int flags = buf[3]
			int win_id = buf[4]
			cursor_win = nil
			for w in windows
				if w.id == win_id
					cursor_win = w
			#kprint("MM " + x)
#			kprint("/" + y)
#			kprint(" - " + flags + "\n")
			bool new_lbut = (flags & 1) > 0
			bool new_mbut = (flags & 2) > 0
			bool new_rbut = (flags & 4) > 0
			for w in windows
				if w != cursor_win
					continue
				w.mx = x - w.x
				#kprint("mmmm " + y + "  " + w.y + "  ")
				w.my = y - w.y
				w.lbut = new_lbut
				w.mbut = new_mbut
				w.rbut = new_rbut
				w.on_mouse_move()
				if !lbut and new_lbut
					w.on_mouse_left_button_down()
				if !mbut and new_mbut
					w.on_mouse_middle_button_down()
				if !rbut and new_rbut
					w.on_mouse_right_button_down()
				if lbut and !new_lbut
					w.on_mouse_left_button_up()
				if mbut and !new_mbut
					w.on_mouse_middle_button_up()
				if rbut and !new_rbut
					w.on_mouse_right_button_up()
			lbut = new_lbut
			mbut = new_mbut
			rbut = new_rbut
			#kprint(" /MM ")
		else if buf[0] == XCMD_EVENT_KEY
			#kprint("client: key\n")
			int key = buf[1]
			for w in windows
				if w.active
					w.on_key(key)
		else if buf[0] == XCMD_EVENT_DRAW
			#kprint("client: draw\n")
			pass
		else if buf[0] == XCMD_WINDOW_MOVE
			#kprint("client: move\n")
			int id = buf[1]
			for w in windows
				if w.id == id
					w.x = buf[2]
					w.y = buf[3]
		else if buf[0] == XCMD_WINDOW_ACTIVATE
			#kprint(" activate  ")
			int id = buf[1]
			for w in windows
				bool old_active = w.active
				w.active = (w.id == id)
				if w.active != old_active
					w.handle_activate()
		
		#kprint("  c:/poll  ")
		return true
	
	void run()
		while true
			poll()
			usleep(5000)
