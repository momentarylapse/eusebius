use "std.kaba"

const int XCMD_KILL = 666
const int XCMD_NEW_WINDOW = 1024
const int XCMD_DEL_WINDOW = 1025
const int XCMD_WINDOW_MOVE = 1026
const int XCMD_WINDOW_INVALIDATE = 1027
const int XCMD_WINDOW_GET_SIZE = 2048
const int XCMD_WINDOW_GET_POS = 2049

const int XCMD_EVENT_MOUSE = 3072
const int XCMD_EVENT_KEY = 3073
const int XCMD_EVENT_DRAW = 3074

const int CON_STATUS_CLEAR = 0
const int CON_STATUS_BUSY = 13
const int CON_STATUS_SERVER_SEND = 1
const int CON_STATUS_SERVER_ANSWER = 2
const int CON_STATUS_CLIENT_SEND = 3
const int CON_STATUS_CLIENT_ANSWER = 4

class XRect
	int x0, y0, x1, y1
	int w()
		return x1 - x0
	int h()
		return y1 - y0
	bool inside(int x, int y)
		return x >= x0 and x < x1 and y >= y0 and y < y1

class XWindow
	int w, h
	int id
	int[0]* buf
	XConnection *con
	void __init__(XConnection *c, int x, int y, int w, int h)
		con = c
		buf = nil
		c._create_win(self, x, y, w, h)
		self.w = w
		self.h = h
	void __delete__()
		if buf
			shmdt(buf)
	void create_buf(int _id, int key)
		id = _id
		int mem_id = shmget(key, 0, 0)
		buf = shmat(mem_id, 0)
		if !buf
			kprint("  -- client: konnte Fenster-Puffer nicht anlegen --\n")
	void invalidate(int x0, int y0, int x1, int y1)
		con.send(XCMD_WINDOW_INVALIDATE, id, x0, y0, x1, y1)
	void invalidate_all()
		con.send(XCMD_WINDOW_INVALIDATE, id, -1, -1, -1, -1)
	void move(int x, int y)
		con.send(XCMD_WINDOW_MOVE, id, x, y, 0, 0)
	void get_size(int *w, int *h)
		con.just_send(XCMD_WINDOW_GET_SIZE, id, 0, 0, 0, 0)
		con.wait_recv(XCMD_WINDOW_GET_SIZE)
		*w = con.buf[1]
		*h = con.buf[2]
	virtual void onKey(int key)
		print("c-win: key " + key + "\n")
	virtual void onMouse(int x, int y, int flags)
		print("c-win: mouse " + x + "/" + y + "   " + flags + "\n")
		

class XConnection
	int sock
	int[8] buf
	bool error
	XWindow*[] windows
	
	void __init__()
		error = true
	
		// connect
		sock = socket(0)
		if !connect(sock, 0x7bcd0123)
			kprint("client: connect (2) fehlgeschlagen\n")
			return
		fcntl(sock, F_SETFL, O_RDWR | O_NONBLOCK)
	
		error = false
		
	void __delete__()
		if error
			return
		send_exit()
		close(sock)
	
	void just_send(int cmd, int p1, int p2, int p3, int p4, int p5)
		kprint(" c:send ")
		buf[0] = cmd
		buf[1] = p1
		buf[2] = p2
		buf[3] = p3
		buf[4] = p4
		buf[5] = p5
		kprint(write(sock, &buf[0], 4*8))
		kprint(" c:/send ")
	
	void send(int cmd, int p1, int p2, int p3, int p4, int p5)
		just_send(cmd, p1, p2, p3, p4, p5)
	
	void wait_recv(int cmd)
		kprint(" WAIT ")
		while true
			if poll()
				if buf[0] == cmd
					break
			usleep(100)
		kprint(" /WAIT ")

	void send_exit()
		send(XCMD_KILL, 0, 0, 0, 0, 0)

	bool _create_win(XWindow *win, int x, int y, int w, int h)
		kprint("client: send new win\n")
		just_send(XCMD_NEW_WINDOW, x, y, w, h, 0)
		
		wait_recv(XCMD_NEW_WINDOW)
		kprint("....client///  ")
		if buf[0] != XCMD_NEW_WINDOW
			kprint("   -- client: kein neues Fenster --\n")
			return false
		kprint("ok")
		int win_id = buf[1]
		int win_key = buf[2]
		win.create_buf(win_id, win_key)
		if !win.buf
			return false
		windows.add(win)
		//print "client: ok\n"// " + key + " " + id + "\n"
		return true
	
	bool poll()
		int n = read(sock, &buf, 4*8)
		if n <= 0
			return false
		kprint("  c:poll  ")
		if buf[0] == XCMD_EVENT_MOUSE
			kprint("client: mouse\n")
			int x = buf[1]
			int y = buf[2]
			int flags = buf[3]
			kprint(x)
			kprint("/" + y)
			kprint(" - " + flags + "\n")
			for w in windows
				w.onMouse(x, y, flags)
		else if buf[0] == XCMD_EVENT_KEY
			kprint("client: key\n")
			int key = buf[1]
			for w in windows
				w.onKey(key)
		else if buf[0] == XCMD_EVENT_DRAW
			kprint("client: draw\n")
		
		
		kprint("  c:/poll  ")
		return true
	
	void run()
		while true
			poll()
			usleep(5000)
