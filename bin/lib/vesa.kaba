use "std.kaba"
use "io.kaba"
use "pci.kaba"

extern int _p2i(void *p)
extern void* _i2p(int i)

const int VBE_DISPI_IOPORT_INDEX = 0x01ce
const int VBE_DISPI_IOPORT_DATA = 0x01cf

const int VBE_DISPI_ID5 = 0xb0c5
const int VBE_DISPI_ID4 = 0xb0c4

const int VBE_DISPI_DISABLED = 0
const int VBE_DISPI_ENABLED = 0x01
const int VBE_DISPI_LFB_ENABLED = 0x40
const int VBE_DISPI_NOCLEARMEM = 0x80

const int VBE_DISPI_INDEX_ID = 0
const int VBE_DISPI_INDEX_XRES = 1
const int VBE_DISPI_INDEX_YRES = 2
const int VBE_DISPI_INDEX_BPP = 3
const int VBE_DISPI_INDEX_ENABLE = 4
const int VBE_DISPI_INDEX_BANK = 5
const int VBE_DISPI_INDEX_VIRT_WIDTH = 6
const int VBE_DISPI_INDEX_VIRT_HEIGHT = 7
const int VBE_DISPI_INDEX_X_OFFSET = 8
const int VBE_DISPI_INDEX_Y_OFFSET = 9

PCIController *pci

void bga_write_register(int index, int value)
	outportw(VBE_DISPI_IOPORT_INDEX, index)
	outportw(VBE_DISPI_IOPORT_DATA, value)
 
int bga_read_register(int index)
	outportw(VBE_DISPI_IOPORT_INDEX, index)
	return inportw(VBE_DISPI_IOPORT_DATA)


 
bool bga_is_available()
	return bga_read_register(VBE_DISPI_INDEX_ID) == VBE_DISPI_ID5

bool graphics_enabled
int screen_width, screen_height
int cur_bank
int[0]* vga_mem
int[0]* vga_mem2
 
void bga_set_video_mode(int width, int height, int depth)
	bool use_linear_framebuffer = false
	if vga_mem2
		use_linear_framebuffer = true
	bool clear_video_memory = false
	screen_width = width
	screen_height = height
	cur_bank = -1
	vga_mem = _i2p(0xa0000)
	bga_write_register(VBE_DISPI_INDEX_ENABLE, VBE_DISPI_DISABLED)
	bga_write_register(VBE_DISPI_INDEX_XRES, width)
	bga_write_register(VBE_DISPI_INDEX_YRES, height)
	bga_write_register(VBE_DISPI_INDEX_BPP, depth)
	int x = VBE_DISPI_ENABLED
	if use_linear_framebuffer
		x = x | VBE_DISPI_LFB_ENABLED
	if clear_video_memory
		x = x | VBE_DISPI_NOCLEARMEM
	bga_write_register(VBE_DISPI_INDEX_ENABLE, x)
	graphics_enabled = true
	
	
	
	#vga_mem2 = _i2p(0xc0000000)
	#for d in pci_devices
#		if d.vendor == 0x1111 and d.device == 0x1234
#			print d.bar0
#			vga_mem2 = _i2p(d.bar0)
#	BgaWriteRegister(VBE_DISPI_INDEX_ENABLE, VBE_DISPI_DISABLED)
#	print _p2i(vga_mem2)
 
void bga_set_bank(int bank)
	bga_write_register(VBE_DISPI_INDEX_BANK, bank)
	cur_bank = bank
	for i in 0:1000
		nil

void set_pixel(int x, int y, int col)
	if !graphics_enabled
		return
	int p = x + y * screen_width
	if vga_mem2
		vga_mem2[p] = col
	else
		int b = p >> 14
		int off = p & 0x3fff
		if b != cur_bank
			bga_set_bank(b)
		vga_mem[off] = col

void set_pixels(int x, int y, int* cc, int n)
	if !graphics_enabled
		return
	int[0]* col = cc
	int p = x + y * screen_width
	if vga_mem2
		for i in 0:n
			vga_mem2[p] = col[i]
			p ++
	else
		pass

void set_pixel2(int x, int y, int col)
	int p = x + y * screen_width
	vga_mem2[p] = col

void vesa_init()
	
	screen_width = 800
	screen_height = 600
	graphics_enabled = false
	vga_mem2 = nil
	
	
	pci = new PCIController
	pci.scan()
	PCIDevice *dev = pci.get(0x1111, 0x1234)
	if !dev
		print("ERROR: pci dev not found\n")
		return
		
	print("pci dev found, mem=")
	printh(dev.get_mem_addr(0))
	print("\n")

	# 3mb... enough for 1024*768*32
	int id = shmget(dev.get_mem_addr(0), 0x00300000, IPC_CREAT | SHM_ABSOLUTE)
	if id >= 0
		vga_mem2 = shmat(id, 0)
	else
		kprint(" ...ERROR: can not map\n")

