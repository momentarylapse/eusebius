use lib.std
use lib.mtk.mtk
use lib.draw
use os
use hui
use image

class FilesView extends MtkWidget
	var dir: string
	var list: Path[]
	func __init__(dir: string)
		set_dir(dir)
		snd = MtkSizeNegotiationData(30, 30, true, true)
	
	func override can_grab_input() -> bool
		return true
	
	func set_dir(_dir: string)
		dir = _dir
		if dir[dir.num-1] == '/'
			dir.remove(dir.num-1)
		if dir == ""
			dir = "/"
		list = Filesystem.search(dir, "*", "fd")
		if win
			win.set_title(dir)
			win.invalidate_all()
		#p.end()
	
	func override draw()
		if win.active
			p.set_color(col_window_frame)
		else
			p.set_color(col_background)
		p.rectangle(p.all)
		p.fill()
		
		for e,i in list
			if Filesystem.is_directory(dir + "/" + e)
				p.draw_image(10, 10 + i * 20, icon_dir)
			else
				p.draw_image(10, 10 + i * 20, icon_file)
			p.set_color(col_text)
			p.draw_str(30, 10 + i * 20, e)
		#p.draw_str(200, 10, dir)
	
	func override on_mouse_move()
	func override on_mouse_left_button_down()
		for e,i in list
			if mx >= 10 and mx < 200 and my >= 10+i*20 and my < 30+i*20
				if Filesystem.is_directory(dir + "/" + e)
					set_dir(dir_append(dir, e))
					break
				else
					mtk_open(dir_append(dir, e))
	func override on_mouse_left_button_up()
	func override on_key(key: int)
		if key == KEY_BACKSPACE
			if dir.num > 2
				var parts = dir.explode("/")
				string d
				for i in 1:parts.num-1
					d += "/"
					d += parts[i]
				set_dir(d)
	func override on_resize()
		win.set_title(dir)
		

class FilesWindow extends MtkWindow
	var v: FilesView*
	func __init__(dir: string)
		super.__init__("XFiles", 600, 400)
		
		v = new FilesView(dir)
		put(v)
		
		

var icon_dir, icon_file: Image*

func main()
	mtk_init()
	string[] arg
	get_args(arg)
	
	icon_dir = new Image(16, 16, color(1, 0.5, 0.5, 0))
	icon_file = new Image(16, 16, color(1, 0.8, 0.8, 0.8))

	string dir = "/"
	if arg.num > 1
		dir = arg[1]
	var window = new FilesWindow(dir)
	window.show()

	mtk_run()
	
