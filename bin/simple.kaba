#define __FUNCTION_POINTER_AS_CODE__

use lib.std.*
use lib.std.sys.*
use os

#func @noframe main()
#func _main()
#	asm{
##		push rbp
##		mov rbp, rsp
###		sub rsp, 0x10
#		mov eax, 0x00001234
#		syscall
#		jmp $
#	}

#func main()
#	var i = 13
#	str(i)

func main()
	init_lib()
	
	var s = "Hi "
	s += "a  "
	let a = 20
	
	#let b = 1
	#let xxx = max(a, b)
	#kprinti(xxx)
	#print("  ")
	#print(xxx)
	#print("  ")
	#kprinti(a)
	#print("  ")
	
#	print(a.format("04") + "\n")
#	print(a.format("4") + "\n")
#	print(a.format("4x") + "\n")

#	let f = 1.234
#	print(str(f))
#	print("\nX")
#	for x in 0.0:2*pi:0.1
#		#print(cos(x))
#		print(sin(x)*sin(x) + cos(x)*cos(x))
#		print("  ")
	
#	print(os.fs.size("/bin/simple"))
#	if os.fs.exists("/bin/simple")
#		print(" FILE ")
#	if os.fs.is_directory("/bin")
#		print(" DIR ")
#	print(os.fs.current_directory())
#	os.fs.set_current_directory("/bin")
#	print("  ")
#	print(os.fs.current_directory())
#	print("\n")
#	var h = open("/bin/simple", O_RDONLY)
#	var xx: cstring
#	read(h, &xx, 80)
#	print(as_binary(&xx, 80).hex())
	
	
#	while true
#		pass
#	
#	#var p = @malloc(100) as int[10]&
#	#kprinti(13)
#	#@free(p)
#	#kprintp(&s)
#	
#	var x = 0
	while true
		
		print(s)
		
#		for i in 0:80000000
#			pass
		sleep(2)
		#exit(0)
#		x ++
#		if x > 100
#			while true
#				pass
