use lib.std.*
use lib.std.sys.*
use lib.x.*
use lib.draw.*
#use lib.ttfx.*

class CWindow extends XWindow
	var p: owned![XPainter]
	func __init__(x: int, y: int, w: int, h: int)
		super.__init__(xcon, x, y, w, h)
		p = new XPainter(&self)
		#var font_db = new FontDB()
		#p.font = font_db.get("Cantarell", 60)
	
	func override on_key(key: int)
		if key == 'w'
			y -= 5
		if key == 's'
			y += 5
		if key == 'a'
			x -= 5
		if key == 'd'
			x += 5
		move(x, y)
			

	func mut redraw()
		p.set_color(color(0,0,0, 1))
		p.rectangle(p.all)
		p.fill()
		p.line_width = 1
	
		p.set_color(color(0.2, 0.2, 0.2, 1))
		p.move_to([20,20])
		p.line_to([220,50])
		p.line_to([250,220])
		p.line_to([40,210])
		p.path_close()
		#p.strike()
		p.fill()
	
		#for x in 0:10
#			for y in 0:10
#				p.draw_glyph(40*x, 40*y, x + 10*y, 0.02)

		p.set_color([1,1,1, 1]) #color.WHITE)
		p.draw_str([20,  50], "Hallo Welt")
		p.draw_str([20, 140], "ABCDEFG")
	
#		for c in g.contours
#			for i in c.start:c.start+c.num
#				p.path_add(100+ttf.points[i].x*0.1, 100+ttf.points[i].y*0.1)
#			p.path_close()
#			p.set_color(White)
#			p.strike()
		p.draw_spline(vec2(0,0), vec2(100, 0), vec2(100, 100))
		p.end()


var xcon: owned![XConnection]

func main()
	init_lib()
	
	
	#TTFFont *font = LoadTTF("/home/x.font")
#	
#	print font.points[0]
#	print "\n"
#	print font.glyphs[23].contours.num
#	print "\n"
#	print font.glyphs[23].contours[0].start
#	print "\n"
#	print font.points[font.glyphs[23].contours[0].start]
#	print "\n"
#	exit(0)
	
	#stdout = open("/dev/tty", O_WRONLY)
	
	let aa = [1,5,3,8,2]
	print(aa)
	print(aa |> sort)
	
	rand_seed(getpid())
	
	xcon = new XConnection()
	if xcon.error
		print("client: kann nicht mit x verbinden")
		exit(-1)
	
	var win = new CWindow(10 + rand(100), 10 + rand(100), 400, 400)
	if !win.buf
		print("client: kann kein Fenster erstellen")
		exit(-2)
		
		
		
	
	win.redraw()
	
	xcon.run()
	
	xcon = nil
	
	exit(0)
