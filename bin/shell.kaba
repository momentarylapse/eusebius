use "lib/std.kaba"


class Prompt
	string cur
	string[] history
	int history_pos
	void __init__()
		history_pos = 0
		history.add("")
	void add(int k)
		cur.add(k)
		string s
		s.add(k)
		print(s)
	void clear()
		string s
		s.add(0x7f)
		for i in 0:cur.num
			print(s)
		cur.clear()
	void add_to_history()
		if history.num > 1
			if history[history.num - 2] == cur
				history_pos = history.num - 1
				return
		history[history.num - 1] = cur
		history.add("")
		history_pos = history.num - 1
	void history_jump(int pos)
		history[history_pos] = cur
		history_pos = pos
		clear()
		cur = history[history_pos]
		print(cur)
	void history_up()
		if history_pos > 0
			history_jump(history_pos - 1)
	void history_down()
		if history_pos < history.num - 1
			history_jump(history_pos + 1)
	void show()
		print(getcwd() + ": ")
		
	void process(int k)
		if k < 0
			return
		int c = k
		if jobs.fg
			if c == 0x1a // '^Z'
				kill(jobs.fg.pid, 19)
				jobs.fg = nil
				print("stopped\n")
				show()
			else if c == 0x03 // '^C'
				kill(jobs.fg.pid, 9)
				jobs.test_all()
				show()
			else if c == 0x04 // '^D'
				close(jobs.fg.pipe_in[1])
				jobs.test_all()
				show()
			else
				write(jobs.fg.pipe_in[1], &c, 1)
			return
		
		if c == 0x0a // '\n'
			print("\n")
			jobs.test_all()
			exec(cur)
			add_to_history()
			cur.clear()
			if !jobs.fg
				show()
		else if c == 0x7f // BACKSPACE
			if cur.num > 0
				string s
				s.add(c)
				print(s)
				cur.resize(cur.num - 1)
		else if c == 0x1b5b41 // ^[A up
			history_up()
		else if c == 0x1b5b42 // ^[B down
			history_down()
		else if c == 0x1b5b43 // ^[C left
			nil//print "----left---"
		else if c == 0x1b5b44 // ^[D right
			nil//print "----right---"
		else if c >= 0x20 and c <= 0x7e
			string s
			s.add(c)
			print(s)
			cur.add(c)
		//else
		//	printh(&k, 2)

Prompt prompt

class Variable
	string name, value
class VariableSet
	Variable*[] var
	Variable *get(string name)
		for v in var
			if v.name == name
				return v
		Variable *v = new Variable
		v.name = name
		var.add(v)
		return v
	void show()
		for v in var
			print(v.name + " = " + v.value + "\n")
VariableSet vars

class Job
	string cmd
	int pid, id
	bool done
	int[2] pipe_in, pipe_out // from job's point of view
	bool as_bg
	void __init__(string[] c, string _cmd)
		cmd = _cmd
		done = false
		pipe_in[0] = -1
		pipe_in[1] = -1
		pipe_out[0] = -1
		pipe_out[1] = -1
		pid = -1
		
		for i in 0:c.num
			if c[i] == ">" or c[i] == ">>"
				if i == c.num - 1
					print("filename expected after >")
					return
				if c[i] == ">"
					pipe_out[1] = open(c[i+1], O_CREATE | O_WRONLY | O_TRUNC)
				else
					pipe_out[1] = open(c[i+1], O_CREATE | O_WRONLY)
				c.remove(i+1)
				c.remove(i)
		for i in 0:c.num
			if c[i] == "<"
				if i == c.num - 1
					print("filename expected after <")
					return
				pipe_in[0] = open(c[i+1], O_RDONLY)
				c.remove(i+1)
				c.remove(i)
		if pipe_in[0] < 0
			pipe(pipe_in)
		if pipe_out[1] < 0
			pipe(pipe_out)
		
		as_bg = (c[c.num - 1] == "&")
		if as_bg
			c.remove(c.num - 1)
		id = -1
		//pid = execute(c, stdin, stdout)
		pid = execute(c, pipe_in[0], pipe_out[1])
		close(pipe_in[0])
		close(pipe_out[1])
		if as_bg
			print("[" + id + "]: ")
			//print pid
			print("\n")
		fcntl(pipe_out[0], F_SETFL, O_RDONLY | O_NONBLOCK)
	
	void __delete__()
		close(pipe_in[1])
		close(pipe_out[0])
	
	void test()
		string s
		s.resize(512)
		int r = read(pipe_out[0], &s[0], s.num)
		if r > 0
			s.resize(r)
			print(s)
			return
		
		int status
		if waitpid(pid, &status, false) == -2
			return
		vars.get("?").value = status
		if self != jobs.fg
			print("[" + id + "] done: " + cmd + "\n")
	//	if status < -600//-652
	//		print("  -- Programm hat was boeses gemacht! --\n")
		//print(" status " + status)
		done = true

class JobManager
	Job*[] job
	Job *fg
	void __init__()
		fg = nil
	int get_next_id()
		int id = 1
		for j in job
			if j.id >= id
				id = j.id + 1
		return id
	Job *get(int id)
		if (id == -1) and (job.num > 0)
			return job[job.num - 1]
		for j in job
			if j.id == id
				return j
		return nil
	Job *create(string[] c, string cmd)
		Job *j = new Job(c, cmd)
		if j.pid < 0
			delete j
			return nil
		j.id = get_next_id()
		job.add(j)
		if !j.as_bg
			fg = j
		return j
	void test_all()
		for j in job
			j.test()
		for i in 0:job.num
			if job[i].done
				if job[i] == fg
					fg = nil
					prompt.show()
				delete job[i]
				job.remove(i)
				i --
	void show()
		for j in job
			print("" + j.id + " - " + j.cmd + "\n")

JobManager jobs


string parse_var_name(string cmd, int pos)
	string name
	for i in pos:cmd.num
		if cmd[i] == ' ' or cmd[i] == '"' or cmd[i] == '$' or cmd[i] == '.' or cmd[i] == ':' or cmd[i] == ',' or cmd[i] == '<' or cmd[i] == '>' or cmd[i] == '|'
			break
		name.add(cmd[i])
	return name

string parse_single(string cmd, int *pos)
	string t
	bool in_string = false
	for j in *pos:cmd.num
		//if (cmd[j] == ' ' or cmd[j] == '<' or cmd[j] == '>' or cmd[j] == '|') and !in_string
		if cmd[j] == ' ' and !in_string
			break
		if cmd[j] == '"'
			in_string = ! in_string
		else if cmd[j] == '$'
			string var_name = parse_var_name(cmd, j+1)
			t += vars.get(var_name).value
			j += var_name.num
		else
			t.add(cmd[j])
		*pos = j
	return t

void parse(string cmd0, string[] c)
	string cmd = cmd0
	for i in 0:cmd.num
		if cmd[i] == ' '
			continue
		string t = parse_single(cmd, &i)
		if t.num > 0
			if t[0] == '#'
				break
		c.add(t)

void execute_assign(string cmd)
	string[] a = cmd.explode("=")
	if a.num == 2
		vars.get(a[0]).value = a[1]

bool execute_job(string[] c, string cmd)
	Job *j = jobs.create(c, cmd)
	return j

void do_fg(string[] c)
	int id = -1
	if c.num >= 2
		id = c[1].int()
	Job *j = jobs.get(id)
	if j
		kill(j.pid, 18)
		jobs.fg = j
		print(j.cmd + "\n")
	else
		print("no job\n")

void do_bg(string[] c)
	int id = -1
	if c.num >= 2
		id = c[1].int()
	Job *j = jobs.get(id)
	if j
		kill(j.pid, 18)
		print("in background: " + j.cmd + "\n")
	else
		print("no job\n")

void do_cd(string[] c)
	if c.num > 1
		if !chdir(c[1])
			print("no valid directory: " + c[1] + "\n")
	else
		print("directory?\n")

void exec(string cmd)
	string cmd0 = cmd
	string[] c
	parse(cmd, c)
	if c.num == 0
		return
	//print(c.join(" - ")+"|\n")
	string cc = c[0]
	if cc.find("=", 0) > 0
		execute_assign(cc)
	else if cc == "vars"
		vars.show()
	else if cc == "jobs"
		jobs.show()
	else if cc == "fg"
		do_fg(c)
	else if cc == "bg"
		do_bg(c)
	else if cc == "cd"
		do_cd(c)
	else if cc == "exit"
		exit(0)
	else
		if cc[0] == '/' or cc[0] == '.'
			if execute_job(c, cmd0)
				return
		c[0] = vars.get("PATH").value + c[0]
		if execute_job(c, cmd0)
			return
		print("unknown command: " + cc + "\n")


int getkey()
	int buf = 0, key = 0
	int r = read(stdin, &key, 1)
	if r <= 0
		return -1
	if key != 0x0000001b
		return key
	r = read(stdin, &buf, 1)
	if r <= 0
		return -1
	key = (key << 8) + buf
	if buf != 0x5b
		return key
	r = read(stdin, &buf, 1)
	if r <= 0
		return -1
	key = (key << 8) + buf
	return key

void main()
	init_lib()
	lib_print_endl = false
	prompt.__init__()
	vars.__init__()
	vars.get("PATH").value = "/bin/"
	jobs.__init__()
	
	fcntl(stdin, F_SETFL, O_RDONLY | O_NONBLOCK)
	
	prompt.show()
	
	while true
		usleep(100000)
		jobs.test_all()
		int key = getkey()
		if key != -1
			prompt.process(key)
	
	exit(0)
