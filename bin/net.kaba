#define __FUNCTION_POINTER_AS_CODE__
use lib.std
use lib.pci
use lib.io




class Driver
	int io_base
	int[0]* buf_send
	int[0]* buf_recv
	int vendor_id, product_id
	PCIDevice* dev
	string mac
	string name
	void __init__()
		dev = nil
	static Driver* installed
	static void my_signal_handler()
		installed.on_irq()
	void install_base()
		print("installing ethernet card: {{name}}\n")
		#print(str(dev))
		
		io_base = dev.get_io_addr(0)
		print("io: 0x{{io_base|4x}}")
		
		# 64k... enough
		int shm_id = shmget(randi(10000000), 0x00010000, IPC_CREAT)
		if shm_id < 0
			raise(new Exception("can't create shared memory for send buffer"))
		buf_send = shmat(shm_id, 0)
		shm_id = shmget(randi(10000000), 0x00010000, IPC_CREAT)
		if shm_id < 0
			raise(new Exception("can't create shared memory for receive buffer"))
		buf_recv = shmat(shm_id, 0)
		print("mem: {{p2s(buf_send)}} {{p2s(buf_recv)}}\n")
	bool get_device(out PCIController pci)
		dev = pci.get(vendor_id, product_id)
		return dev
	
	virtual void install()
		install_base()
	virtual void test()
	virtual void on_irq()
		print("-------IRQ-------\n")
	static Driver* choose()
		let pci = new PCIController()
		pci.scan()
		Driver*[] drivers
		drivers.add(new DriverNE2k())
		drivers.add(new DriverRTL8139())
		for d in drivers
			if d.get_device(pci)
				installed = d
				return d
		raise(new Exception("no known ethernet card found"))
	

class DriverNE2k extends Driver
	override void __init__()
		vendor_id = 0x10ec
		product_id = 0x8029
		name = "ne2k"
	override void install()
		install_base()
		
		# perform reset
		int reset = inportb(io_base + 0x1f)
		outportb(io_base + 0x1f, reset)
		
		# wait
		while ((inportb(io_base + 0x07) & 0x80) == 0)
			pass
		outportb(io_base + 0x07, 0xff)                     # mask interrupts

		char[32] prom
		outportb(io_base, (1 << 5) | 1)	# page 0, no DMA, stop
		outportb(io_base + 0x0e, 0x49)		# set word-wide access
		outportb(io_base + 0x0a, 0)		# clear the count regs
		outportb(io_base + 0x0b, 0)
		outportb(io_base + 0x0f, 0)		# mask completion IRQ
		outportb(io_base + 0x07, 0xff)
		outportb(io_base + 0x0c, 0x20)		# set to monitor
		outportb(io_base + 0x0d, 0x02)		# and loopback mode.
		outportb(io_base + 0x0a, 32)		# reading 32 bytes
		outportb(io_base + 0x0b, 0)		# count high
		outportb(io_base + 0x08, 0)		# start DMA at 0
		outportb(io_base + 0x09, 0)		# start DMA high
		outportb(io_base, 0x0a)		# start the read

		for i in 0:32
			prom[i] = inportb(io_base + 0x10)
		print("MAC: {{binary(&prom, 6).hex()}}\n")
	override void test()
		

		# program the PAR0..PAR5 registers to listen for packets to our MAC address!		
	#	for (i=0; i<6; i++)
	#	{
	#  writeRegister(nif, 1, 0x01+i, prom[i]);
	#};

class DriverRTL8139 extends Driver
	int cur_send_buf
	override void __init__()
		vendor_id = 0x10ec
		product_id = 0x8139
		name = "rtl8139"
		cur_send_buf = 0
	override void install()
		install_base()
		
		print("mapirq\n")
		if !sigaction(29, my_signal_handler)
			raise(new Exception("sigaction"))
		if !mapirq(11, 29)
			raise(new Exception("mapirq"))
		
		# power on
	#	outportb(io_base + 0x52, 0x00)
		# reset
	#	outportb(io_base + 0x37, 0x10)
	#	while (inportb(io_base + 0x37) & 0x10) != 0
	#		pass
		
		int r = inportb(io_base + 0x37)
		print("command {{r|2x}}\n")
		
		# reset
		print("reset...\n")
		usleep(1000000)
		outportb(io_base + 0x37, inportb(io_base + 0x37) | 0x10)
		
		# enable transmit/receive
		outportb(io_base + 0x37, inportb(io_base + 0x37) | 0x0c)
		
		outportd(io_base + 0x40, 0x03000700) # TCR
		outportd(io_base + 0x44, 0x0000070a) # PCR
		outportd(io_base + 0x30, addr2phys(buf_recv)) # RBSTART
		
		outportw(io_base + 0x3c, 0xffff)
		
		for i in 0:6
			mac.add(inportb(io_base + i))
		print("MAC {{mac.hex()}}\n")
	void read_package()
		print("receive\n")
		print(binary(buf_recv, 20).hex())
		print("------------END-------")
		exit(0)
	void send_package(string s)
		int c = cur_send_buf
		cur_send_buf = ((cur_send_buf + 1) % 4)
		int[0]* buf = &buf_send[c * 4096]
		memcpy(buf, &s[0], len(s))
		outportd(io_base + 0x20 + c*4, addr2phys(buf)) # TSAD0
		outportd(io_base + 0x10 + c*4, len(s)) # TSD0 size
	override void test()
		while true
			print("send\n")
			usleep(1000000)
			send_package("hallo bloeder test")
		
		print("run\n")
		while true
			#usleep(1000)
			pass
		
		print("IRQ?")
		usleep(1000000)
		asm {
			int 0x2b
		}
		print("done")
		usleep(1000000)
	override void on_irq()
		int r = inportw(io_base + 0x3e)
		print("irq  0x{{r|4x}} ")
		if (r & 0x8000) > 0 # system error
			raise(new Exception("ERROR"))
		else if (r & 0x4) > 0 # transmit ok
			print("trans\n")
			# receive ok
			outportw(io_base + 0x3e, 0x0004)
		else if (r & 0x1) > 0 # receive ok
			print("read\n")
			while (inportb(io_base + 0x37) & 0x01) == 0
				read_package()
				# receive ok
				outportw(io_base + 0x3e, 0x0001)

void main()
	init_lib()
	lib_print_endl = false
	string[] arg
	get_args(arg)
	
	let driver = Driver.choose()
	driver.install()
	driver.test()
	
	exit(0)

