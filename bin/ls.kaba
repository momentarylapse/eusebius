use os
use lib.std
use lib.std.file


func ftype(path: Path) -> string
	if os.fs.is_directory(path)
		return "d"
	else
		return "f"

func table_widths(list: string[], cols: int, space: int) -> int[]
	var ww: int[]
	for i in 0:cols
		var w = 0
		for k=>s in list
			if (k%cols) == i
				w = max(w, len(s))
		if i < cols-1
			w += space
		ww.add(w)
	return ww

func optimal_table(list: string[], space: int, max_width: int) -> int[]
	var cols = len(list)
	while cols > 0
		var w = table_widths(list, cols, space)
		if sum(w) <= max_width
			return w
		cols --
	return [10]

func print_table(list: string[])
	var w = optimal_table(list, 2, 80)
	var o: string
	for i=>s in list
		let col = (i % len(w))
		if col == 0 and i > 0
			o += "\n"
		o += s
		for j in len(s):w[col]
			o.add(' ')
	print(o)

func ls(dirname: Path, extended: bool)
	print("SEARCH\n")
	var list = os.fs.search(dirname, "", "df")
	if lib_error != 0
		print("ls: can not read directory: {{dirname}}\n")

	if extended
		for e in list
			var path = dirname | e
			print("{{ftype(path)|-4}} {{os_fs_size32(path)|8}} {{e}}\n")
	else
		print_table([for f in list f.__str__()])
		print("\n")

func main()
	init_lib()
	lib_print_endl = false
	var arg: string[]
	get_args(arg)
	
	var extended = false

	var paths: Path[]

	for i in 1:arg.num
		if arg[i] == "-l"
			extended = true
		else
			paths.add(arg[i])
	for p in paths
		ls(p, extended)
	if len(paths) == 0
		ls(os.fs.current_directory(), extended)

	exit(0)
