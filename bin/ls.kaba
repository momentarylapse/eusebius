use os
use "lib/std.kaba"

string glue(string dir, string f)
	if len(dir) == 0
		return f
	if dir[len(dir)-1] == '/'
		return dir + f
	return dir + "/" + f

string ftype(string path)
	if Filesystem.is_directory(path)
		return "d"
	else
		return "f"

int[] table_widths(string[] list, int cols, int space)
	int[] ww
	for i in 0:cols
		int w = 0
		for s,k in list
			if (k%cols) == i
				w = max(w, len(s))
		if i < cols-1
			w += space
		ww.add(w)
	return ww

int[] optimal_table(string[] list, int space, int max_width)
	int cols = len(list)
	while cols > 0
		let w = table_widths(list, cols, space)
		if w.sum() <= max_width
			return w
		cols --
	return [10]

void print_table(string[] list)
	let w = optimal_table(list, 2, 80)
	string o
	for s,i in list
		int col = (i % len(w))
		if col == 0 and i > 0
			o += "\n"
		o += s
		for j in len(s):w[col]
			o.add(' ')
	print(o)

void ls(string dirname, bool extended)
	let l = Filesystem.search(dirname, "", true)
	if lib_error != 0
		print("ls: can not read directory: {{dirname}}\n")

	if extended
		for e in l
			let path = glue(dirname, e)
			print("{{ftype(path)|-4}} {{Filesystem_size32(path)|8}} {{e}}\n")
	else
		print_table(l)
		print("\n")


void main()
	init_lib()
	lib_print_endl = false
	string[] arg
	get_args(arg)
	
	bool extended = false
	int n_shown = 0
	
	for i in 1:arg.num
		if arg[i] == "-l"
			extended = true
		else
			ls(arg[i], extended)
			n_shown ++
	if n_shown == 0
		ls(getcwd(), extended)
	
	exit(0)
