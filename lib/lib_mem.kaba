use lib_base

func kprint(s: string)
func kprinti(i: int)
func brk(i: int) -> int
	return -1
func lib__print(s: string)
func exit(i: int)

func memcpy(_dest: void&, _source: void&, size: int)
	var dest = _dest as char[0]&
	var source = _source as char[0]&
	for i in 0:size
		dest[i] = source[i]


var MemHeapAllocated: int # includes overhead of all headers

class MallocHeader
	var size: int
	var magic: int
	var next: MallocHeader*
	var prev: MallocHeader*
	func after() -> void&
		var pp = &self as char[0]&
		return &pp[size]
	func payload() -> void&
		var pp = &self as char[0]&
		return &pp[sizeof(MallocHeader)]
var malloc_first_free: MallocHeader&
var malloc_end_marker: MallocHeader&
var cur_break_value: int

# heap is split into a (hole-free) list of blocks
# blocks are either free or allocated
# free blocks form a doubly-linked list (no loop)
# allocated blocks are not linked

func _align8_(size: int) -> int
	if (size & 0x00000007) == 0
		return size
	return (size & 0xfffffff8) + 8


func lib__@malloc(_size: int) -> void&
	if _size <= MALLOC_SMALL_SIZE
		for ppp in small_malloc()
			return ppp

	var size = _align8_(_size)
	if lib_mem_debug
		kprint(" [+")
		kprinti(size)
		kprint("] ")
	
	# account for the allocation header
	size += sizeof(MallocHeader)
	
	# find a free block big enough
	var cur = malloc_first_free
	while cur.next
		if size <= cur.size - sizeof(MallocHeader)
		
			# shrink free block
			cur.size -= size
			
			# create allocated block at (former) end of free block
			var hh = cur.after() as MallocHeader&
			hh.magic = 0x12345678
			hh.size = size
			hh.next = nil
			hh.prev = nil
			
			MemHeapAllocated += size
			if lib_mem_debug
				kprint(" ")
				kprinti(_p2i(hh.payload()))
			memcheck()
			#if lib_mem_debug
#				kprint(">")
#				kprinti(_p2i(hh.payload()))
			return hh.payload()
		for n in cur.next
			cur := n

	
	var last_before_end_new = _i2p(cur_break_value - sizeof(MallocHeader) - MALLOC_STOPPER) as MallocHeader&
 	
	# request more memory from kernel
	let new_break_value = cur_break_value + size + sizeof(MallocHeader) + 1024
	if lib_mem_debug
		kprint("  BREAK ")
		kprinti(cur_break_value)
		kprint(" - ")
		kprinti(new_break_value)
		kprint("  ")
	let r = brk(new_break_value)
	if r < 0
		__lib_fatal__("malloc/brk()")
	cur_break_value = r
	
	# get the pointer now... we might overwrite the end marker...
	var last_before_end_old = malloc_end_marker.prev as MallocHeader&
	last_before_end_old.next = last_before_end_new
	last_before_end_new.prev = last_before_end_old
	last_before_end_new.magic = 0x1234567
	
	
	# add allocated block
	var hh = _i2p(cur_break_value - size - sizeof(MallocHeader) - MALLOC_STOPPER) as MallocHeader&
	hh.size = size
	hh.next = nil
	hh.prev = nil
	
	# resize last free block
	last_before_end_new.size = _p2i(hh) - _p2i(last_before_end_new)
	
	# create new end marker
	malloc_end_marker := _i2p(cur_break_value - sizeof(MallocHeader))
	malloc_end_marker.size = sizeof(MallocHeader)
	malloc_end_marker.next = nil
	malloc_end_marker.prev = last_before_end_new
	last_before_end_new.next = malloc_end_marker
	
	return hh.payload()

func _cleanup(out h: MallocHeader&)
	if h.after() == h.next
		MemHeapAllocated -= sizeof(MallocHeader)
		if lib_mem_debug
			kprint(" merge after ")
		for next in h.next
			h.size += next.size
			h.next = next.next
		for next in h.next
			next.prev = h
	for prev in h.prev
		if prev.after() == h
			MemHeapAllocated -= sizeof(MallocHeader)
			if lib_mem_debug
				kprint(" merge before ")
			prev.size += h.size
			for next in h.next
				next.prev = prev
			prev.next = h.next

func lib__@free(_p: void*)
	for p in _p
		let index = small_malloc_no(p)
		if index >= 0
			small_free(index)
			return
		let ip = _p2i(p)
		if lib_mem_debug
			kprint(" free ")
			kprinti(ip)
		
		var hh = _i2p(ip - sizeof(MallocHeader)) as MallocHeader&
		if hh.magic != 0x12345678
			kprint(" free___:  ")
			kprinti(ip)
			__lib_fatal__("evil free(1)")
	
		if lib_mem_debug
			kprint(" ")
			kprinti(hh.size)
	
		# find last free window before p
		var cur = malloc_first_free
		while cur.next
			if (ip >= _p2i(cur)) and (ip < _p2i(cur) + cur.size)
				#prints("\n")
#				printi(_p2i(cur))
#				prints("  ")
#				printi(cur.size)
#				
#				panic("double free")
			#	__lib_free_error__()
				__lib_fatal__("double free()")
			if ip < _p2i(cur.next)
				# turn allocated block into a free one
				hh.magic = 0
			
				if lib_mem_debug
					kprinti(hh.size)
				MemHeapAllocated -= hh.size - sizeof(MallocHeader)
			
				# ..by linking it to its neighbors
				hh.next = cur.next
				for n in cur.next
					n.prev = hh
				hh.prev = cur
				cur.next = hh
			
				_cleanup(hh)
				memcheck()
				if lib_mem_debug
					kprint(">")
				return
			for n in cur.next
				cur := n
		__lib_fatal__( "invalid call to free()")



func memcheck()
	var h = malloc_first_free
	while h.next
		for n in h.next
			if _p2i(n) < _p2i(h) + h.size
				__lib_fatal__("memcheck: h.next<h+size")
			if h != n.prev
				__lib_fatal__("memcheck: h!=h.next.prev")
			h := n

#void* realloc(void* po, int old_size, int new_size)
#	void *pn = malloc(new_size)
#	int n = old_size
#	if new_size < n
#		n = new_size
#	memcpy(pn, po, n)
#	free(po)
#	return pn
# double-linked list of free fields


func __lib_fatal__(s: string)
	lib__print("\n\nkalib: ")
	lib__print(s)
	exit(-1)

func __lib_free_error__()
	__free_error__ = true
	lib__print("\n\nkalib: invalid call to free()")
	exit(-1)


func lib__@realloc(p: void&, size: int) -> void&
	var hp = p as MallocHeader[0]&
	let neg1 = -1
	var h = &hp[neg1] as MallocHeader&
	var old_size: int
	let sm_index = small_malloc_no(p)
	if sm_index >= 0
		old_size = MALLOC_SMALL_SIZE
	else
		old_size = h.size - sizeof(MallocHeader)
	var pp = lib__@malloc(size)
	
	if size < old_size
		old_size = size
	
	memcpy(pp, p, old_size)
	lib__@free(p)
	return pp

class MallocSmallBlock
	var mask: int[MALLOC_SMALL_NUM / 32]
	var buf: char[MALLOC_SMALL_SIZE * MALLOC_SMALL_NUM]
	var delta: int
	var full_below: int
	
	
	func mut init()
		for i in 0:(MALLOC_SMALL_NUM/32)
			mask[i] = 0
		delta = _p2i(&buf)
		full_below = 0
	
	func mut alloc() -> void*
		#kprint " +sm "
		for i in full_below:(MALLOC_SMALL_NUM/32)
			if mask[i] == 0xffffffff
				continue
			for j in 0:32
				let m = 1 << j
				if (mask[i] & m) == 0
					full_below = i
					mask[i] = mask[i] | m
					let n = i * 32 + j
					#kprinti(n)
					#kprint(" : ")
					var p = &buf[n * MALLOC_SMALL_SIZE]
					#kprinti _p2i(p)
					return p
		#kprint " --[XXX]--"
		return nil
	
	func to_index(p: void&) -> int
		let ip = _p2i(p)
		#kprint(" - ")
#		kprinti(ip)
#		kprint(" : ")
#		kprinti((ip - delta) / MALLOC_SMALL_SIZE)
		return (ip - delta) / MALLOC_SMALL_SIZE
	
	func mut free(index: int)
		#kprint " -sm "
		let _mask = 1 << (index & 31)
		let mn = index >> 5
		if (mask[mn] & _mask) != 0
			mask[mn] -= _mask
		if mn < full_below
			full_below = mn

var malloc_small_block: MallocSmallBlock&

func small_malloc() -> void*
	return malloc_small_block.alloc()

func small_free(n: int)
	malloc_small_block.free(n)

func small_malloc_no(p: void&) -> int
	let index = malloc_small_block.to_index(p)
	if index < 0 or index >= MALLOC_SMALL_NUM
		return -1
	return index
