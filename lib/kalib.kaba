#define __FUNCTION_POINTER_AS_CODE__
use lib_base.*
use lib_syscalls.*
use lib_mem.*
use lib_array.*
use lib_math.*
use lib_file.*
use lib_image.*


func execute(arg: string[], fd_in: int, fd_out: int) -> int
	var tt_arg: cstring
	sa2cs(arg, tt_arg)
	__temp_p__ := &tt_arg
	__temp_i__ = fd_in
	__temp_i2__ = fd_out
	asm{
		mov eax, 0x0000000b
		mov rdi, __temp_p__
		mov esi, __temp_i__
		mov edx, __temp_i2__
		syscall
		mov lib_error, eax
	}
	return lib_error


func get_args() -> lib__string@list
	var cs: cstring
	__temp_p__ := &cs
	asm{
		mov eax, 0x00002001
		mov rdi, __temp_p__
		syscall
	}
	var args: Ret
	var s: lib__string
	var p = 0
	var first = true
	for i in 0:250
		if cs[i] == 0
			if s.num == 0
				break
			if first
				first = false
			else
				args.add(s)
			s.clear()
			p = i + 1
		else
			s.add(cs[i])
	return args



class lib__Exception
	var msg: lib__string
	func __init__(_msg: lib__string)
		msg = _msg
	func virtual __str__() -> lib__string
		return msg

func lib__raise(e: xfer[lib__Exception])
#	var msg: string& = &e.msg
#	lib_print_endl = false
#	lib__print("\n  EXCEPTION:    ")
#	lib__print(*msg)
#	lib__print("\n")
	lib__print("\n  EXCEPTION:    ")
	exit(1)	

##--------------------------------------------------------------------------
## start
#
#func signal_handler_segv()
#	#kprint("--->SEGFAULT<--")
#	lib_print_endl = true
#	lib__print("  -- Segmentation Fault --\n")
#	exit(1)
#func signal_handler_x()
#	#kprint("--->SEGFAULT<--")
#	lib_print_endl = true
#	lib__print("  -- XXXX --\n")
#	exit(1)

func init_lib()
	lib_print_endl = true
	_init_memory()
	
	rand_state = 0
	
#	sigaction(SIGSEGV, raw_function_pointer(signal_handler_segv))
	
	stdin = 0
	stdout = 1
	
	

