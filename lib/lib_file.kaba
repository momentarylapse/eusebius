use lib_base
use lib_syscalls
use lib_array


int open(lib__Path filename, int flags)
	cstring tt
	_s2cs(filename.s, tt)
	__temp_p__ = &tt
	__temp_i__ = flags
	asm{
		mov eax, 0x00000005
		mov ebx, __temp_p__
		mov ecx, __temp_i__
		int 0x80
		mov __temp_i__, eax
	}
	return __temp_i__

int create(lib__Path filename)
	cstring tt
	_s2cs(filename.s, tt)
	__temp_p__ = &tt
	asm{
		mov eax, 0x00000008
		mov ebx, __temp_p__
		mov ecx, 0x00000000
		int 0x80
		mov __temp_i__, eax
	}
	return __temp_i__

int fork()
	asm{
		mov eax, 0x00000002
		int 0x80
		mov __temp_i__, eax
	}
	if __temp_i__ == 0
		lib__Path* p = &"/dev/tty"
		stdout = open(*p, O_RDONLY)
	return __temp_i__

bool mkdir(lib__Path filename)
	cstring tt
	_s2cs(filename.s, tt)
	__temp_p__ = &tt
	asm{
		mov eax, 0x00000027
		mov ebx, __temp_p__
		int 0x80
		mov lib_error, eax
	}
	return lib_error == 0

bool rmdir(lib__Path filename)
	cstring tt
	_s2cs(filename.s, tt)
	__temp_p__ = &tt
	asm{
		mov eax, 0x00000028
		mov ebx, __temp_p__
		int 0x80
		mov lib_error, eax
	}
	return lib_error == 0


bool mkfifo(lib__Path filename)
	cstring tt
	_s2cs(filename.s, tt)
	__temp_p__ = &tt
	asm{
		mov eax, 0x0000000e
		mov ebx, __temp_p__
		int 0x80
		mov lib_error, eax
	}
	return lib_error == 0

bool unlink(lib__Path filename)
	cstring tt
	_s2cs(filename.s, tt)
	__temp_p__ = &tt
	asm{
		mov eax, 0x0000000a
		mov ebx, __temp_p__
		int 0x80
		mov lib_error, eax
	}
	return lib_error == 0

bool chdir(lib__Path dir)
	cstring tt
	_s2cs(dir.s, tt)
	__temp_p__ = &tt
	asm{
		mov eax, 0x0000000c
		mov ebx, __temp_p__
		int 0x80
		mov lib_error, eax
	}
	return lib_error == 0

lib__string lib__Filesystem@@current_directory()
	cstring tt
	__temp_p__ = &tt
	asm{
		mov eax, 0x000000b7
		mov ebx, __temp_p__
		mov ecx, 0x00000100
		int 0x80
		mov lib_error, eax
	}
	lib__string r
	_cs2s(tt, r)
	return r


bool stat(lib__Path filename, StatData buf)
	cstring tt
	_s2cs(filename.s, tt)
	__temp_p__ = &tt
	__temp_p2__ = &buf
	asm{
		mov eax, 0x0000200a
		mov ebx, __temp_p__
		mov ecx, __temp_p2__
		int 0x80
		mov lib_error, eax
	}
	return lib_error == 0



class lib__Path
	lib__string s
	void __init__()
	void __init__(lib__string p)
		s = p
	void __delete__()
	const lib__string __str__()
		return s
	const bool is_empty()
		return len(s) == 0
	const bool is_absolute()
		if len(s) == 0
			return false
		return s.data[0] == '/'
	const bool is_relative()
		return not is_absolute()
	const bool has_dir_ending()
		if len(s) == 0
			return false
		return s.data[len(s)-1] == '/'
	const lib__string __lshift__(lib__Path p)
		if is_empty()
			return p.s
		if has_dir_ending()
			return s + p.s
		lib__string r = s
		r.add('/')
		return r + p.s
	static lib__Path @from_str(lib__string p)
		return lib__Path(p)
	void __assign__(lib__Path p)
		s = p.s


#class lib__Path@list extends lib__string@list
# not working because this does not export new functions...

class lib__Path@list
	lib__string@list l
	void add(lib__Path p)
		l.add(p.s)
	lib__string@list __add__(lib__Path@list o)
		return l + o.l
	void __iadd__(lib__Path@list o)
		l + o.l
	void __assign__(lib__Path@list o)
		l = o.l
		

#--------------------------------------------------------------------------
# dir entry

class dirent_struct
	int struct_size
	int size
	int type
	cstring name
	void __assign__(dirent_struct o)
		pass



lib__string@list lib__Filesystem@@search(lib__Path dirname, string filter, string options)
	lib__string@list list_dirs, list_files
	lib__print("") # ?!?!?!? FIXME
	int h = open(dirname, O_RDONLY)
	if h < 0
		lib_error = -1
		return list_files
	dirent_struct d
	while getdents(h, &d)
		lib__string s
		_cs2s(d.name, s)
		if d.type == 1
			list_dirs.add(s)
		else
			list_files.add(s)
	close(h)
	lib_error = 0
	
	bool flag_dir = false
	bool flag_file = false
	for c in options
		if c == 'f'
			flag_file = true
		else if c == 'd'
			flag_dir = true
	
	if flag_dir
		for i in 0:list_dirs.num-1
			for j in i+1:list_dirs.num
				if list_dirs.data[i].compare(list_dirs.data[j]) > 0
					list_dirs.swap(i, j)
	if flag_file
		for i in 0:list_files.num-1
			for j in i+1:list_files.num
				if list_files.data[i].compare(list_files.data[j]) > 0
					list_files.swap(i, j)
	return list_dirs + list_files

class lib__File
	int h
	int buf_pos
	int pos
	
	void __init__()
		h = -1
	
	void __delete__()
		close()
	
	bool open(lib__Path filename)
		h = xxx_open(filename, O_RDONLY)
		pos = 0
		return h >= 0
	
	bool create(lib__Path filename)
		h = xxx_create(filename)
		pos = 0
		return h >= 0
	
	void close()
		if h < 0
			return
		xxx_close(h)
		h = -1
	
	void setBinaryMode(bool b)
	
	lib__string read(int size)
		lib__string s
		s.resize(size)
		int r = xxx_read(h, s.data, size)
		if r < 0
			r = 0
		s.resize(r)
		
		pos += r
		return s
	
	int write(lib__string s)
		int r = xxx_write(h, s.data, s.num)
		if r > 0
			pos += r
		return r
	
	int getPos()
		return pos
		#return xxx_seek(h, 0, SEEK_CUR)
	
	void seek(int _pos, bool absolute)
		if absolute
			pos = _pos
			xxx_seek(h, pos, SEEK_SET)
		else
			xxx_seek(h, pos, SEEK_CUR)

bool xxx_close(int h)
	return close(h)

int xxx_open(lib__Path filename, int flags)
	return open(filename, flags)

int xxx_create(lib__Path filename)
	return create(filename)

int xxx_read(int h, void* buf, int size)
	return read(h, buf, size)

int xxx_write(int h, void* buf, int size)
	return write(h, buf, size)

int xxx_seek(int h, int pos, int mode)
	seek(h, pos, mode)

lib__File* lib__Filesystem@@open(lib__Path filename)
	lib__File* f = lib__@malloc(sizeof(lib__File))
	f.__init__()
	if !f.open(filename)
		lib__@free(f)
		return nil
	return f

lib__File* lib__Filesystem@@create(lib__Path filename)
	lib__File* f = lib__@malloc(sizeof(lib__File))
	f.__init__()
	if !f.create(filename)
		lib__@free(f)
		return nil
	return f

lib__string lib__Filesystem@@read(lib__Path filename)
	lib__string content
	int h = open(filename, O_RDONLY)
	if h < 0
		lib__print("can not open file: ")
		#lib__print(filename.s)
		lib__print("\n")
		return content
	int size = 0
	while true
		content.resize(size + 1024)
		int r = read(h, &content.data[size], 1024)
		if r < 0
			lib__print("Error while reading...\n")
		if r <= 0
			break
		size += r
	content.resize(size)
	close(h)
	return content

class StatData
	cstring name
	int type
	int size
	int inode
	int mp_inode
	int time
	void __assign__(StatData o)
		pass


bool lib__Filesystem@@is_directory(lib__Path filename)
	StatData d
	if stat(filename, &d)
		return d.type == 1
	return false

int64 lib__Filesystem@@size(lib__Path filename)
	pass

int Filesystem_size32(lib__Path filename)
	StatData d
	if stat(filename, &d)
		return d.size
	return d.size
	return -1
