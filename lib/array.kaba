use "base.kaba"
use "syscalls.kaba"



void _s2cs(string s, out cstring cs)
	for i in 0:s.num
		cs[i] = s[i]
	cs[s.num] = 0

void _cs2s(cstring cs, out lib__string s)
	s.clear()
	for i in 0:255
		if cs[i] == 0
			return
		s.add(cs[i])

lib__string cs2s(cstring cs)
	lib__string s
	_cs2s(cs, s)
	return s

# ["aa", "bb"] -> "aa\0bb\0\0"
void sa2cs(string[] a, out cstring cs)
	int n = 0
	for k in 0:a.num
		for i in 0:a[k].num
			cs[n] = a[k][i]
			n ++
		cs[n] = 0
		n ++
	cs[n] = 0


#--------------------------------------------------------------------------
# memory management


void memcpy(void* _dest, void* _source, int size)
	char[0]* dest = _dest
	char[0]* source = _source
	for i in 0:size
		dest[i] = source[i]


int MemHeapAllocated # includes overhead of all headers

class MallocHeader
	int size # header + payload
	int magic
	MallocHeader *next
	MallocHeader *prev
	void *after()
		char[0]* pp = &self
		return &pp[size]
	void *payload()
		char[0]* pp = &self
		return &pp[sizeof(MallocHeader)]
MallocHeader *malloc_first_free
MallocHeader *malloc_end_marker
int cur_break_value

# heap is split into a (hole-free) list of blocks
# blocks are either free or allocated
# free blocks form a doubly-linked list (no loop)
# allocated blocks are not linked

int _align8_(int size)
	if (size & 0x00000007) == 0
		return size
	return (size & 0xfffffff8) + 8


void* lib__@malloc(int _size)
	if _size <= MALLOC_SMALL_SIZE
		void *ppp = small_malloc()
		if ppp
			return ppp

	int size = _align8_(_size)
	if lib_mem_debug
		kprint(" [+")
		kprinti(size)
		kprint("] ")
	
	# account for the allocation header
	size += sizeof(MallocHeader)
	
	# find a free block big enough
	MallocHeader *cur = malloc_first_free
	while cur.next
		if size <= cur.size - sizeof(MallocHeader)
		
			# shrink free block
			cur.size -= size
			
			# create allocated block at (former) end of free block
			MallocHeader *hh = cur.after()
			hh.magic = 0x12345678
			hh.size = size
			hh.next = nil
			hh.prev = nil
			
			MemHeapAllocated += size
			if lib_mem_debug
				kprint(" ")
				kprinti(_p2i(hh.payload()))
			memcheck()
			#if lib_mem_debug
#				kprint(">")
#				kprinti(_p2i(hh.payload()))
			return hh.payload()
		cur = cur.next

	
	MallocHeader *last_before_end_new = _i2p(cur_break_value - sizeof(MallocHeader) - MALLOC_STOPPER)
 	
	# request more memory from kernel
	int new_break_value = cur_break_value + size + sizeof(MallocHeader) + 1024
	if lib_mem_debug
		kprint("  BREAK ")
		kprinti(cur_break_value)
		kprint(" - ")
		kprinti(new_break_value)
		kprint("  ")
	int r = brk(new_break_value)
	if r < 0
		__lib_fatal__("malloc/brk()")
	cur_break_value = r
	
	# get the pointer now... we might overwrite the end marker...
	MallocHeader *last_before_end_old = malloc_end_marker.prev
	last_before_end_old.next = last_before_end_new
	last_before_end_new.prev = last_before_end_old
	last_before_end_new.magic = 0x1234567
	
	
	# add allocated block
	MallocHeader *hh = _i2p(cur_break_value - size - sizeof(MallocHeader) - MALLOC_STOPPER)
	hh.size = size
	hh.next = nil
	hh.prev = nil
	
	# resize last free block
	last_before_end_new.size = _p2i(hh) - _p2i(last_before_end_new)
	
	# create new end marker
	malloc_end_marker = _i2p(cur_break_value - sizeof(MallocHeader))
	malloc_end_marker.size = sizeof(MallocHeader)
	malloc_end_marker.next = nil
	malloc_end_marker.prev = last_before_end_new
	last_before_end_new.next = malloc_end_marker
	
	return hh.payload()

void _cleanup(out MallocHeader *h)
	if h.after() == h.next
		MemHeapAllocated -= sizeof(MallocHeader)
		if lib_mem_debug
			kprint(" merge after ")
		h.size += h.next.size
		h.next = h.next.next
		h.next.prev = h
	if h.prev.after() == h
		MemHeapAllocated -= sizeof(MallocHeader)
		if lib_mem_debug
			kprint(" merge before ")
		h.prev.size += h.size
		h.next.prev = h.prev
		h.prev.next = h.next

void lib__@free(void *p)
	if !p
		return
	int index = small_malloc_no(p)
	if index >= 0
		small_free(index)
		return
	int ip = _p2i(p)
	if lib_mem_debug
		kprint(" free ")
		kprinti(ip)
	
	MallocHeader *hh = _i2p(ip - sizeof(MallocHeader))
	if hh.magic != 0x12345678
		kprint(" free___:  ")
		kprinti(ip)
		__lib_fatal__("evil free(1)")
	
	if lib_mem_debug
		kprint(" ")
		kprinti(hh.size)
	
	# find last free window before p
	MallocHeader *cur = malloc_first_free
	while cur.next
		if (ip >= _p2i(cur)) and (ip < _p2i(cur) + cur.size)
			#prints("\n")
#			printi(_p2i(cur))
#			prints("  ")
#			printi(cur.size)
#			
#			panic("double free")
		#	__lib_free_error__()
			__lib_fatal__("double free()")
		if ip < _p2i(cur.next)
			# turn allocated block into a free one
			hh.magic = 0
			
			if lib_mem_debug
				kprinti(hh.size)
			MemHeapAllocated -= hh.size - sizeof(MallocHeader)
			
			# ..by linking it to its neighbors
			hh.next = cur.next
			cur.next.prev = hh
			hh.prev = cur
			cur.next = hh
			
			_cleanup(hh)
			memcheck()
			if lib_mem_debug
				kprint(">")
			return
		cur = cur.next
	__lib_fatal__( "invalid call to free()")



void memcheck()
	MallocHeader *h = malloc_first_free
	while h.next
		if _p2i(h.next) < _p2i(h) + h.size
			__lib_fatal__("memcheck: h.next<h+size")
		if h != h.next.prev
			__lib_fatal__("memcheck: h!=h.next.prev")
		h = h.next

#void* realloc(void* po, int old_size, int new_size)
#	void *pn = malloc(new_size)
#	int n = old_size
#	if new_size < n
#		n = new_size
#	memcpy(pn, po, n)
#	free(po)
#	return pn
# double-linked list of free fields


void __lib_fatal__(string s)
	lib__print("\n\nkalib: ")
	lib__print(s)
	exit(-1)

void __lib_free_error__()
	__free_error__ = true
	lib__print("\n\nkalib: invalid call to free()")
	exit(-1)


void *lib__@realloc(void *p, int size)
	MallocHeader[0]* hp = p
	MallocHeader *h = &hp[-1]
	int old_size
	int sm_index = small_malloc_no(p)
	if sm_index >= 0
		old_size = MALLOC_SMALL_SIZE
	else
		old_size = h.size - sizeof(MallocHeader)
	void *pp = lib__@malloc(size)
	
	if size < old_size
		old_size = size
	
	memcpy(pp, p, old_size)
	lib__@free(p)
	return pp

class MallocSmallBlock
	int[MALLOC_SMALL_NUM / 32] mask
	char[MALLOC_SMALL_SIZE * MALLOC_SMALL_NUM] buf
	int delta # address translation...
	int full_below # #masks
	
	
	void init()
		for i in 0:(MALLOC_SMALL_NUM/32)
			mask[i] = 0
		delta = _p2i(&buf)
		full_below = 0
	
	void* alloc()
		#kprint " +sm "
		for i in full_below:(MALLOC_SMALL_NUM/32)
			if mask[i] == 0xffffffff
				continue
			for j in 0:32
				int m = 1 << j
				if (mask[i] & m) == 0
					full_below = i
					mask[i] = mask[i] | m
					int n = i * 32 + j
					#kprinti(n)
					#kprint(" : ")
					void *p = &buf[n * MALLOC_SMALL_SIZE]
					#kprinti _p2i(p)
					return p
		#kprint " --[XXX]--"
		return nil
	
	int to_index(void *p)
		int ip = _p2i(p)
		#kprint(" - ")
#		kprinti(ip)
#		kprint(" : ")
#		kprinti((ip - delta) / MALLOC_SMALL_SIZE)
		return (ip - delta) / MALLOC_SMALL_SIZE
	
	void free(int index)
		#kprint " -sm "
		int _mask = 1 << (index & 31)
		int mn = index >> 5
		if (mask[mn] & _mask) != 0
			mask[mn] -= _mask
		if mn < full_below
			full_below = mn

MallocSmallBlock *malloc_small_block

void* small_malloc()
	return malloc_small_block.alloc()

void small_free(int n)
	malloc_small_block.free(n)

int small_malloc_no(void *p)
	int index = malloc_small_block.to_index(p)
	if index < 0 or index >= MALLOC_SMALL_NUM
		return -1
	return index

#--------------------------------------------------------------------------
# arrays

class lib__@DynamicArray
	cstring *data
	int num
	int allocated
	int element_size
	void __mem_init__(int _element_size)
		data = nil
		num = 0
		allocated = 0
		element_size = _element_size
	void __mem_clear__()
		if allocated > 0
			lib__@free(data)
		data = nil
		allocated = 0
		num = 0

	void reserve(int size)
		if allocated == 0
			if size > 0
				allocated = size * element_size
					data = lib__@malloc(allocated)
		else if size * element_size > allocated
			allocated = size * element_size * 2
			void *data0 = data
			data = lib__@realloc(data, allocated)
		else if size == 0
			__mem_clear__()

	void __mem_resize__(int size)
		if size > num
			reserve(size)
			#memset((char*)data + num * element_size, 0, (size - num) * element_size);
		num = size

	void __mem_remove__(int index)
		if index < 0 or index >= num
			return
		for i in index*element_size : (num-1)*element_size
			data[i] = data[i+element_size]
		__mem_resize__(num - 1)
		
	void __assign__(lib__@DynamicArray a)
		__mem_resize__(a.num)
		memcpy(data, a.data, num * element_size)
		num = 0

class lib__string extends lib__@DynamicArray
	override char[0]* data
	void __init__()
		__mem_init__(1)
	void __delete__()
		__mem_clear__()
	void resize(int size)
		__mem_resize__(size)
	void clear()
		__mem_clear__()
	void add(char c)
		__mem_resize__(num + 1)
		data[num - 1] = c
	#void insert(int index, char c)
#		__mem_resize__(num + 1)
#		for i in 1:num-index-1
#			data[num - i] = data[num - i - 1]
#		data[index] = c
	void remove(int index)
		__mem_remove__(index)
	void __assign__(lib__string o)
		__mem_resize__(o.num)
		memcpy(data, o.data, num)
	void __iadd__(lib__string o)
		int n0 = num
		__mem_resize__(num + o.num)
		memcpy(&data[n0], o.data, o.num)
	const lib__string __add__(lib__string o)
		lib__string r
		r = self
		r += o
		return r
			
	const lib__string substr(int _start, int _length)
		lib__string r
		int start = _start
		int length = _length
		if start >= num
			return r
		if start < 0
			# start from the end
			start = num + start
			if start < 0
				return r
		if length < 0
			length = num - start + length + 1
		if start + length > num
			length = num - start
		if length > 0
			r.resize(length)
			memcpy(r.data, &data[start], length)
		return r

	const lib__string head(int size)
		return substr(0, size)

	const lib__string tail(int size)
		return substr(num - size, size)

	const int find(lib__string s, int start)
		for i in start : num - s.num
			bool ok = true
			for j in 0:s.num
				if data[i + j] != s.data[j]
					ok = false
					break
			if ok
				return i
		return -1
		
	const int compare(lib__string s)
		int n = num
		if s.num < num
			n = s.num
		for i in 0:n
			int a = data[i]
			int b = s.data[i]
			if a != b
				return a - b
		return num - s.num
		
	const bool __eq__(lib__string s)
		return compare(s) == 0
	const bool __neq__(lib__string s)
		return compare(s) != 0
	const bool __ne__(lib__string s)
		return compare(s) != 0
	const bool __lt__(lib__string s)
		return compare(s) < 0
	const bool __gt__(lib__string s)
		return compare(s) > 0

#int string::rfind(const string &s, int start) const
#{
#	char *b = (char*)data;
#	char *aa = (char*)s.data;
#	if (start < 0)
#		start = num - 1;
#	for (int i=start;i>=0;i--){
#		bool ok = true;
#		for (int j=0;j<s.num;j++)
#			if (b[i + j] != aa[j]){
#				ok = false;
#				break;
#			}
#		if (ok)
#			return i;
#	}
#	return -1;
#}
#
#int string::compare(const string &s) const
#{
#	char *a = (char*)data;
#	int n = num;
#	if (num > s.num)
#		n = s.num;
#	for (int i=0;i<n;i++){
#		if (s[i] != a[i])
#			return (int)(unsigned char)a[i] - (int)(unsigned char)s[i];
#	}
#	return num - s.num;
#}
#
#inline int ichar(char a)
#{
#	if ((a >= 'A') && (a <= 'Z'))
#		return (int)(unsigned char)a - (int)(unsigned char)'A' + (int)(unsigned char)'a';
#	return (int)(unsigned char)a;
#}
#
#int string::icompare(const string &s) const
#{
#	char *a = (char*)data;
#	int n = num;
#	if (num > s.num)
#		n = s.num;
#	for (int i=0;i<n;i++){
#		if (ichar(s[i]) != ichar(a[i]))
#			return ichar(a[i]) - ichar(s[i]);
#	}
#	return num - s.num;
#}

	const lib__string reverse()
		lib__string r
		r.resize(num)
		for i in 0:num
			r.data[num - i - 1] = data[i]
		return r

	void replace0(int start, int length, lib__string str)
		if start + length > num
			return
		int d = str.num - length
		if d > 0
			resize(num + d)
			#for (int i=num-1;i>=start+length;i--)
			int j = num-1
			while j >= start+length
				data[j] = data[j - d]
				j --
		memcpy(&data[start], str.data, str.num)
		if d < 0
			for i in start + str.num : num + d
				data[i] = data[i - d]
			resize(num + d)

	const lib__string replace(lib__string sub, lib__string by)
		lib__string r = self
		int i = r.find(sub, 0)
		while i >= 0
			r.replace0(i, sub.num, by)
			i = r.find(sub, i + by.num)
		return r

	const lib__string lower()
		lib__string r = self
		for i in 0:num
			if (data[i] >= 'A') and (data[i] <= 'Z')
				r.data[i] += 'a' - 'A'
		return r

	const lib__string upper()
		lib__string r = self
		for i in 0:num
			if (data[i] >= 'a') and (data[i] <= 'z')
				r.data[i] += 'A' - 'a'
		return r
		

	const lib__string@list explode(lib__string s)
		lib__string@list r

		int pos = 0
		while true
			int pos2 = find(s, pos)
			if pos2 < 0
				break

			r.add(substr(pos, pos2 - pos))

			pos = s.num + pos2
		if (r.num > 0) or (pos < num)
			r.add(substr(pos, num - pos))
		return r
		
	const lib__string hex()
		lib__string ttt
		for i in 0:num
			int j = i
			int d = data[j]
			int d1 = (d>>4)
			int d2 = (d&15)
			if d1 < 10
				ttt.add(d1+48)
			else
				ttt.add(d1+87)
			if d2<10
				ttt.add(d2+48)
			else
				ttt.add(d2+87)
			if i == num-1
				ttt.add(' ')
			else
				ttt.add('.')
		return ttt
	
	const int __int__()
		if num == 0
			return 0
		bool sign = (data[0] != '-')
		int r = 0
		int i0 = 0
		if !sign
			i0 = 1
		for i in i0:num
			int c = data[i]
			r = r * 10 + (c - 48)
		if !sign
			return -r
		return r
	
	const float __float__()
		if num == 0
			return 0.0
		bool sign = (data[0] != '-')
		float r = 0.0
		int i0 = 0
		if !sign
			i0 = 1
		for i in i0:num
			int c = data[i]
			if c == '.'
				i0 = i + 1
				break
			r = r * 10.0 + (c - 48)
		float factor = 0.1
		for i in i0:num
			int c = data[i]
			r += (c - 48) * factor
			factor /= 10.0
		if !sign
			return -r
		return r
	const lib__string format(lib__string f)
		int n = int(f)
		return str_fill(self, n, ' ')

lib__string binary(void *p, int num)
	lib__string s
	s.num = num
	s.data = p
	return s

lib__string str_fill(lib__string s, int n, char space)
	lib__string ttt = s
	lib__string filler
	if n < 0
		while len(ttt) < -n
			ttt.add(space)
		return ttt
	else
		while len(ttt) + len(filler) < n
			filler.add(space)
		return filler + ttt



class lib__string@list extends lib__@DynamicArray
	override lib__string[0]* data
	void __init__()
		__mem_init__(sizeof(lib__string))
	void __delete__()
		for i in 0:num
			data[i].__delete__()
		#clear()
	void resize(int size)
		if size < num
			# shrink -> destruct
			for i in size:num
				data[i].__delete__()
		else if size > num
			reserve(size)
			for i in num:size
				data[i].__init__()
		num = size
	void add(lib__string s)
		resize(num + 1)
		data[num - 1] = s
	void __assign__(lib__string@list o)
		resize(o.num)
		for i in 0:num
			data[i] = o.data[i]
	void remove(int index)
		if (index < 0) or (index >= num)
			return
		for i in index : num - 1
			data[i] = data[i+1]
		resize(num - 1)
		#data[index].__clear__()
		#__mem_remove__(index)

	lib__string join(lib__string glue)
		lib__string r
		for i in 0:num
			if i > 0
				r += glue
			r += data[i]
		return r
	lib__string __str__()
		return lib__@sa2s(self)
	void swap(int i, int j)
		let t = data[i]
		data[i] = data[j]
		data[j] = t
	lib__string@list __add__(lib__string@list o)
		lib__string@list r = self
		r += o
		return r
	void __iadd__(lib__string@list o)
		for i in 0:len(o)
			add(o.data[i])

lib__string lib__@sa2s(lib__string@list a)
	lib__string r
	r.add('[')
	for i in 0:a.num
		if i > 0
			r.add(',')
		r.add('"')
		r += a.data[i]
		r.add('"')
	r.add(']')
	return r



class lib__int@list extends lib__@DynamicArray
	override int[0]* data
	void __init__()
		__mem_init__(sizeof(int))
	void __delete__()
		clear()
	void clear()
		__mem_clear__()
	void resize(int size)
		if size > num
			reserve(size)
		num = size
	void add(int i)
		resize(num + 1)
		data[num - 1] = i
	void remove(int index)
		if (index < 0) or (index >= num)
			return
		for i in index : num - 1
			data[i] = data[i+1]
		resize(num - 1)
	void __assign__(lib__int@list o)
		resize(o.num)
		for i in 0:num
			data[i] = o.data[i]
	void sort()
		for i in 0:num
			for j in i:num
				if data[i]>data[j]
					int t = data[i]
					data[i] = data[j]
					data[j] = t
	const int sum()
		int s = 0
		for i in 0:num
			s += data[i]
		return s

class lib__float@list extends lib__@DynamicArray
	override float[0]* data
	void __init__()
		__mem_init__(sizeof(float))
	void __delete__()
		clear()
	void clear()
		__mem_clear__()
	void resize(int size)
		if size > num
			reserve(size)
		num = size
	void add(int i)
		resize(num + 1)
		data[num - 1] = i
	void remove(int index)
		if (index < 0) or (index >= num)
			return
		for i in index : num - 1
			data[i] = data[i+1]
		resize(num - 1)
	void __assign__(lib__float@list o)
		resize(o.num)
		for i in 0:num
			data[i] = o.data[i]
	void sort()
		for i in 0:num
			for j in i:num
				if data[i]>data[j]
					int t = data[i]
					data[i] = data[j]
					data[j] = t

class lib__bool@list extends lib__@DynamicArray
	override bool[0]* data
	void __init__()
		__mem_init__(sizeof(bool))
	void __delete__()
		clear()
	void clear()
		__mem_clear__()
	void resize(int size)
		if size > num
			reserve(size)
		num = size
	void add(bool b)
		resize(num + 1)
		data[num - 1] = b
	void remove(int index)
		if (index < 0) or (index >= num)
			return
		for i in index : num - 1
			data[i] = data[i+1]
		resize(num - 1)
	void __assign__(lib__bool@list o)
		resize(o.num)
		for i in 0:num
			data[i] = o.data[i]


lib__string i2s(int _i)
	int i = _i
	bool sign = i >= 0
	if !sign
		i = -i
	lib__string s
	while true
		s.add((i % 10) + 0x30)
		i /= 10
		if i == 0
			break
	if !sign
		s.add('-')
	return s.reverse()


lib__string f2s(float _f, int n)
	float f = _f
	lib__string s
	
	if f < 0.0
		s.add('-')
		f = -f
	s += i2s(f)
	if n > 0
		s.add('.')
		int e = 1
		float fe = 1.0
		for i in 0:n
			e = e *10
			fe *= 10.0
		int after = int(f*fe) % e
		for i in 0:n
			e /= 10
			s.add(((after / e) % 10) + 0x30)
	return s

lib__string lib__p2s(void *p)
	lib__string r
	r.resize(sizeof(p))
	void *pp = &p
	memcpy(r.data, pp, sizeof(p))
	return r.hex()

lib__string b2s(bool b)
	lib__string r
	if b
		r.add('1')
	else
		r.add('0')
	return r

class lib__bool
	static lib__string __str__(bool b)
		return b2s(b)

lib__string lib__@ia2s(lib__int@list a)
	lib__string r
	r.add('[')
	for i in 0:a.num
		if i > 0
			r.add(',')
			r.add(' ')
		r += i2s(a.data[i])
	r.add(']')
	return r

lib__string lib__@fa2s(lib__float@list a)
	lib__string r
	r.add('[')
	for i in 0:a.num
		if i > 0
			r.add(',')
			r.add(' ')
		r += f2s(a.data[i], 6)
	r.add(']')
	return r