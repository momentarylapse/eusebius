use lib_base
use lib_mem
use lib_syscalls
use kaba



func _s2cs(s: lib__string, out cs: cstring)
	for d in s.data
		for i in 0:s.num
			cs[i] = d[i]
	cs[s.num] = 0

func _cs2s(cs: cstring, out s: lib__string)
	s.clear()
	for i in 0:255
		if cs[i] == 0
			return
		s.add(cs[i])

func cs2s(cs: cstring) -> lib__string
	var s: lib__string
	_cs2s(cs, s)
	return s

# ["aa", "bb"] -> "aa\0bb\0\0"
func sa2cs(a: string[], out cs: cstring)
	var n = 0
	for k in 0:a.num
		for i in 0:a[k].num
			cs[n] = a[k][i]
			n ++
		cs[n] = 0
		n ++
	cs[n] = 0





#--------------------------------------------------------------------------
# arrays

class lib__@DynamicArray
	var data: cstring*
	var num: int
	var allocated: int
	var element_size: int
	var dummy: int
	func mut __mem_init__(_element_size: int)
		data = nil
		num = 0
		allocated = 0
		element_size = _element_size
	func mut __mem_clear__()
		if allocated > 0
			lib__@free(data)
		data = nil
		allocated = 0
		num = 0
	func mut __mem_forget__()
		data = nil
		allocated = 0
		num = 0

	func mut reserve(size: int)
		if allocated == 0
			if size > 0
				allocated = size * element_size
					data = lib__@malloc(allocated)
		else if size * element_size > allocated
			allocated = size * element_size * 2
			for d in data
				data = lib__@realloc(&d, allocated)
		else if size == 0
			__mem_clear__()

	func mut __mem_resize__(size: int)
		if size > num
			reserve(size)
			#memset((char*)data + num * element_size, 0, (size - num) * element_size);
		num = size

	func mut __mem_remove__(index: int)
		if index < 0 or index >= num
			return
		for d in data
			for i in index*element_size : (num-1)*element_size
				d[i] = d[i+element_size]
		__mem_resize__(num - 1)
		
#	func mut __assign__(a: lib__@DynamicArray)
#		__mem_init__(a.element_size)
#		__mem_resize__(a.num)
#		for d in data
#			for ad in a.data
#				memcpy(d, ad, num * element_size)
#		num = 0

class lib__string extends lib__@DynamicArray
	var override data: char[0]*
	func __init__()
		__mem_init__(1)
	func __delete__()
		__mem_clear__()
	func mut resize(size: int)
		__mem_resize__(size)
	func mut clear()
		__mem_clear__()
	func mut add(c: char)
		__mem_resize__(num + 1)
		for d in data
			d[num - 1] = c
	#void mut insert(int index, char c)
#		__mem_resize__(num + 1)
#		for i in 1:num-index-1
#			data[num - i] = data[num - i - 1]
#		data[index] = c
	func mut remove(index: int)
		__mem_remove__(index)
	func mut __assign__(o: lib__string)
		__mem_resize__(o.num)
		for d in data
			for od in o.data
				memcpy(&d, &od, num)
	func mut __iadd__(o: lib__string)
		let n0 = num
		__mem_resize__(num + o.num)
		for d in data
			for od in o.data
				memcpy(&d[n0], &od, o.num)
	func __add__(o: lib__string) -> lib__string
		var r: lib__string
		r = self
		r += o
		return r
			
	func substr(_start: int, _length: int) -> lib__string
		var r: lib__string
		var start = _start
		var length = _length
		if start >= num
			return r
		if start < 0
			# start from the end
			start = num + start
			if start < 0
				return r
		if length < 0
			length = num - start + length + 1
		if start + length > num
			length = num - start
		if length > 0
			r.resize(length)
			for d in data
				for rd in r.data
					memcpy(&rd, &d[start], length)
		return r

	func head(size: int) -> lib__string
		return substr(0, size)

	func tail(size: int) -> lib__string
		return substr(num - size, size)

	func find(s: lib__string, start: int) -> int
		for d in data
			for sd in s.data
				for i in start : num - s.num
					var ok = true
					for j in 0:s.num
						if d[i + j] != sd[j]
							ok = false
							break
					if ok
						return i
		return -1
		
	func compare(s: lib__string) -> int
		var n = num
		if s.num < num
			n = s.num
		for d in data
			for sd in s.data
				for i in 0:n
					let a = d[i]
					let b = sd[i]
					if a != b
						return a - b
		return num - s.num
		
	func __eq__(s: lib__string) -> bool
		return compare(s) == 0
	func __neq__(s: lib__string) -> bool
		return compare(s) != 0
	func __ne__(s: lib__string) -> bool
		return compare(s) != 0
	func __lt__(s: lib__string) -> bool
		return compare(s) < 0
	func __gt__(s: lib__string) -> bool
		return compare(s) > 0

#int string::rfind(const string &s, int start) const
#{
#	char *b = (char*)data;
#	char *aa = (char*)s.data;
#	if (start < 0)
#		start = num - 1;
#	for (int i=start;i>=0;i--){
#		bool ok = true;
#		for (int j=0;j<s.num;j++)
#			if (b[i + j] != aa[j]){
#				ok = false;
#				break;
#			}
#		if (ok)
#			return i;
#	}
#	return -1;
#}
#
#int string::compare(const string &s) const
#{
#	char *a = (char*)data;
#	int n = num;
#	if (num > s.num)
#		n = s.num;
#	for (int i=0;i<n;i++){
#		if (s[i] != a[i])
#			return (int)(unsigned char)a[i] - (int)(unsigned char)s[i];
#	}
#	return num - s.num;
#}
#
#inline int ichar(char a)
#{
#	if ((a >= 'A') && (a <= 'Z'))
#		return (int)(unsigned char)a - (int)(unsigned char)'A' + (int)(unsigned char)'a';
#	return (int)(unsigned char)a;
#}
#
#int string::icompare(const string &s) const
#{
#	char *a = (char*)data;
#	int n = num;
#	if (num > s.num)
#		n = s.num;
#	for (int i=0;i<n;i++){
#		if (ichar(s[i]) != ichar(a[i]))
#			return ichar(a[i]) - ichar(s[i]);
#	}
#	return num - s.num;
#}

	func reverse() -> lib__string
		var r: lib__string
		r.resize(num)
		for d in data
			for rd in r.data
				for i in 0:num
					rd[num - i - 1] = d[i]
		return r

	func mut replace0(start: int, length: int, s: lib__string)
		if start + length > num
			return
		for dd in data
			for sd in s.data
				let d = s.num - length
				if d > 0
					resize(num + d)
					#for (int i=num-1;i>=start+length;i--)
					var j = num-1
					while j >= start + length
						dd[j] = dd[j - d]
						j --
				memcpy(&dd[start], &sd, s.num)
				if d < 0
					for i in start + s.num : num + d
						dd[i] = dd[i - d]
					resize(num + d)

	func replace(sub: lib__string, by: lib__string) -> lib__string
		var r: lib__string = self
		var i = r.find(sub, 0)
		while i >= 0
			r.replace0(i, sub.num, by)
			i = r.find(sub, i + by.num)
		return r

	func lower() -> lib__string
		var r: lib__string = self
		for d in r.data
			for i in 0:num
				if (d[i] >= 'A') and (d[i] <= 'Z')
					d[i] += 'a' - 'A'
		return r

	func upper() -> lib__string
		var r: lib__string = self
		for d in r.data
			for i in 0:num
				if (d[i] >= 'a') and (d[i] <= 'z')
					d[i] += 'A' - 'a'
		return r
		

	func explode(s: lib__string) -> lib__string@list
		var r: lib__string@list

		var pos = 0
		while true
			let pos2 = find(s, pos)
			if pos2 < 0
				break

			r.add(substr(pos, pos2 - pos))

			pos = s.num + pos2
		if (r.num > 0) or (pos < num)
			r.add(substr(pos, num - pos))
		return r
		
	func hex() -> lib__string
		var ttt: lib__string
		for _data in data
			for i in 0:num
				let j = i
				let d = _data[j]
				let d1 = (d>>4)
				let d2 = (d&15)
				if d1 < 10
					ttt.add(d1+48)
				else
					ttt.add(d1+87)
				if d2<10
					ttt.add(d2+48)
				else
					ttt.add(d2+87)
				if i == num-1
					ttt.add(' ')
				else
					ttt.add('.')
		return ttt
	
	func __int__() -> int
		if num == 0
			return 0
		for _data in data
			let sign = (_data[0] != '-')
			var r = 0
			var i0 = 0
			if !sign
				i0 = 1
			for i in i0:num
				let c: int = _data[i]
				if c >= 48 and c < 58
					r = r * 10 + (c - 48)
			if !sign
				return -r
			return r
		return 0
	
	func __float__() -> float
		if num == 0
			return 0.0
		for _data in data
			let sign = (_data[0] != '-')
			var r = 0.0
			var i0 = 0
			if !sign
				i0 = 1
			for i in i0:num
				let c: int = _data[i]
				if c == '.'
					i0 = i + 1
					break
				r = r * 10.0 + (c - 48)
			var factor = 0.1
			for i in i0:num
				let c: int = _data[i]
				r += (c - 48) * factor
				factor /= 10.0
			if !sign
				return -r
			return r
		return 0.0
	func format(f: lib__string) -> lib__string
		let n = int(f)
		return str_fill(self, n, ' ')

func lib__as_binary(p: void&, num: int) -> lib__string
	var s: lib__string
	s.num = num
	s.data = p
	return s

func str_fill(s: lib__string, n: int, space: char) -> lib__string
	var ttt: lib__string = s
	var filler: lib__string
	if n < 0
		while len(ttt) < -n
			ttt.add(space)
		return ttt
	else
		while len(ttt) + len(filler) < n
			filler.add(space)
		return filler + ttt



class lib__string@list extends lib__@DynamicArray
	var override data: lib__string[0]*
	func __init__()
		__mem_init__(sizeof(lib__string))
	func __delete__()
		for d in data
			for i in 0:num
				d[i].__delete__()
		#clear()
	func mut resize(size: int)
		let num0 = num
		if size < num0
			# shrink -> destruct
			for d in data
				for i in size:num0
					d[i].__delete__()
		__mem_resize__(size)
		if size > num0
			reserve(size)
			for d in data
				for i in num0:size
					d[i].__init__()
	func mut add(s: lib__string)
		resize(num + 1)
		for d in data
			d[num - 1] = s
	func mut __assign__(o: lib__string@list)
		resize(o.num)
		for d in data
			for od in o.data
				for i in 0:num
					d[i] = od[i]
	func mut remove(index: int)
		if (index < 0) or (index >= num)
			return
		for d in data
			for i in index : num - 1
				d[i] = d[i+1]
		resize(num - 1)
		#data[index].__clear__()
		#__mem_remove__(index)

	func join(glue: lib__string) -> lib__string
		var r: lib__string
		for d in data
			for i in 0:num
				if i > 0
					r += glue
				r += d[i]
		return r
	func __str__() -> lib__string
		return lib__@sa2s(self)
	func mut swap(i: int, j: int)
		for d in data
			var t = d[i]
			d[i] = d[j]
			d[j] = t
	func mut __add__(o: lib__string@list) -> lib__string@list
		var r: lib__string@list = self
		r += o
		return r
	func mut __iadd__(o: lib__string@list)
		for od in o.data
			for i in 0:len(o)
				add(od[i])

func lib__@sa2s(a: lib__string@list) -> lib__string
	var r: lib__string
	r.add('[')
	for i in 0:a.num
		if i > 0
			r.add(',')
		r.add('"')
		for ad in a.data
			r += ad[i]
		r.add('"')
	r.add(']')
	return r



class lib__int@list extends lib__@DynamicArray
	var override data: int[0]*
	func __init__()
		__mem_init__(sizeof(int))
	func __delete__()
		clear()
	func mut clear()
		__mem_clear__()
	func mut resize(size: int)
		if size > num
			reserve(size)
		num = size
	func mut add(i: int)
		resize(num + 1)
		for d in data
			d[num - 1] = i
	func mut remove(index: int)
		if (index < 0) or (index >= num)
			return
		for d in data
			for i in index : num - 1
				d[i] = d[i+1]
		resize(num - 1)
	func mut __assign__(o: lib__int@list)
		resize(o.num)
		for d in data
			for od in o.data
				for i in 0:num
					d[i] = od[i]
	func mut sort()
		for d in data
			for i in 0:num
				for j in i:num
					if d[i] > d[j]
						let t = d[i]
						d[i] = d[j]
						d[j] = t
	func __str__() -> lib__string
		return lib__@ia2s(self)

func lib__sum(l: lib__int@list) -> int
	var s = 0
	for d in l.data
		for i in 0:l.num
			s += d[i]
	return s

class lib__float@list extends lib__@DynamicArray
	var override data: float[0]*
	func __init__()
		__mem_init__(sizeof(float))
	func __delete__()
		clear()
	func mut clear()
		__mem_clear__()
	func mut resize(size: int)
		if size > num
			reserve(size)
		num = size
	func mut add(i: int)
		resize(num + 1)
		for d in data
			d[num - 1] = i
	func mut remove(index: int)
		if (index < 0) or (index >= num)
			return
		for d in data
			for i in index : num - 1
				d[i] = d[i+1]
		resize(num - 1)
	func mut __assign__(o: lib__float@list)
		resize(o.num)
		for d in data
			for od in o.data
				for i in 0:num
					d[i] = od[i]
	func mut sort()
		for d in data
			for i in 0:num
				for j in i:num
					if d[i] > d[j]
						let t = d[i]
						d[i] = d[j]
						d[j] = t

class lib__bool@list extends lib__@DynamicArray
	var override data: bool[0]*
	func __init__()
		__mem_init__(sizeof(bool))
	func __delete__()
		clear()
	func mut clear()
		__mem_clear__()
	func mut resize(size: int)
		if size > num
			reserve(size)
		num = size
	func mut add(b: bool)
		resize(num + 1)
		for d in data
			d[num - 1] = b
	func mut remove(index: int)
		if (index < 0) or (index >= num)
			return
		for d in data
			for i in index : num - 1
				d[i] = d[i+1]
		resize(num - 1)
	func mut __assign__(o: lib__bool@list)
		resize(o.num)
		for d in data
			for od in o.data
				for i in 0:num
					d[i] = od[i]


func i2s(_i: int) -> lib__string
	var i = _i
	let sign = i >= 0
	if !sign
		i = -i
	var s: lib__string
	while true
		s.add((i % 10) + 0x30)
		i /= 10
		if i == 0
			break
	if !sign
		s.add('-')
	return s.reverse()


func f2s(_f: float, n: int) -> lib__string
	var f = _f
	var s: lib__string
	
	if f < 0.0
		s.add('-')
		f = -f
	s += i2s(f)
	if n > 0
		s.add('.')
		var e = 1
		var fe = 1.0
		for i in 0:n
			e = e *10
			fe *= 10.0
		let after = int(f*fe) % e
		for i in 0:n
			e /= 10
			s.add(((after / e) % 10) + 0x30)
	return s

func b2s(b: bool) -> lib__string
	var r: lib__string
	if b
		r.add('1')
	else
		r.add('0')
	return r

class lib__bool
	func static __str__(b: bool) -> lib__string
		return b2s(b)

func lib__@ia2s(a: lib__int@list) -> lib__string
	var r: lib__string
	r.add('[')
	for i in 0:a.num
		if i > 0
			r.add(',')
			r.add(' ')
		for d in a.data
			r += i2s(d[i])
	r.add(']')
	return r

func lib__@fa2s(a: lib__float@list) -> lib__string
	var r: lib__string
	r.add('[')
	for i in 0:a.num
		if i > 0
			r.add(',')
			r.add(' ')
		for d in a.data
			r += f2s(d[i], 6)
	r.add(']')
	return r

# FIXME OMG \(O_O)/
func lib__@sorted(_a: void*, t: kaba.Class&, x: string) -> lib__int@list # lib__@DynamicArray
	if t == int or true
		var pa = _a as lib__int@list*
		for a in pa
			var o = a
			o.sort()
			return o
#	if t == float
#		kprint("sort float")
#		var pa = _a as lib__float@list*
#		for a in pa
#			var o = a
#			o.sort()
#			return o
	kprint("NOPE, can't sort")
