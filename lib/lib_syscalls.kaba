use lib_base

#--------------------------------------------------------------------------
# system calls

bool exit(int r)
	__temp_i__ = r
	asm{
		mov eax, 0x00000001
		mov ebx, __temp_i__
		int 0x80
		mov lib_error, eax
	}
	return lib_error == 0

int brk(int size)
	__temp_i__ = size
	asm{
		mov eax, 0x0000002d
		mov ebx, __temp_i__
		int 0x80
		mov __temp_i__, eax
	}
	return __temp_i__



bool close(int h)
	__temp_i__ = h
	asm{
		mov eax, 0x00000006
		mov ebx, __temp_i__
		int 0x80
		mov lib_error, eax
	}
	return lib_error == 0

int read(int h, void *buf, int size)
	__temp_i__ = h
	__temp_i2__ = size
	__temp_p__ = buf
	asm{
		mov eax, 0x00000003
		mov ebx, __temp_i__
		mov ecx, __temp_p__
		mov edx, __temp_i2__
		int 0x80
		mov __temp_i3__, eax
	}
	return __temp_i3__
	
int write(int h, void *buf, int size)
	__temp_i__ = h
	__temp_i2__ = size
	__temp_p__ = buf
	asm{
		mov eax, 0x00000004
		mov ebx, __temp_i__
		mov ecx, __temp_p__
		mov edx, __temp_i2__
		int 0x80
		mov __temp_i3__, eax
	}
	return __temp_i3__

int seek(int h, int pos, int mode)
	__temp_i__ = h
	__temp_i2__ = pos
	__temp_i3__ = mode
	asm{
		mov eax, 0x00000013
		mov ebx, __temp_i__
		mov ecx, __temp_i2__
		mov edx, __temp_i3__
		int 0x80
		mov __temp_i3__, eax
	}
	return __temp_i3__



bool getdents(int h, void *buf)#lib__DirEntry)
	__temp_i__ = h
	__temp_i2__ = 1
	__temp_p__ = buf
	asm{
		mov eax, 0x0000008d
		mov ebx, __temp_i__
		mov ecx, __temp_p__
		mov edx, __temp_i2__
		int 0x80
		mov lib_error, eax
	}
	return lib_error > 0

int dup(int h)
	__temp_i__ = h
	asm{
		mov eax, 0x00000029
		mov ebx, __temp_i__
		int 0x80
		mov __temp_i__, eax
	}
	return __temp_i__

bool pipe(int[2] h)
	__temp_p__ = &h
	asm{
		mov eax, 0x0000002a
		mov ebx, __temp_p__
		int 0x80
		mov lib_error, eax
	}
	return lib_error == 0

int fcntl(int h, int op, int param)
	__temp_i__ = h
	__temp_i2__ = op
	__temp_i3__ = param
	asm{
		mov eax, 0x00000033
		mov ebx, __temp_i__
		mov ecx, __temp_i2__
		mov edx, __temp_i3__
		int 0x80
		mov __temp_i__, eax
	}
	return __temp_i__

int getpid()
	asm{
		mov eax, 0x00000014
		int 0x80
		mov __temp_i__, eax
	}
	return __temp_i__

bool sigaction(int sig, void *f)
	__temp_i__ = sig
	__temp_p__ = f
	asm{
		mov eax, 0x00000043
		mov ebx, __temp_i__
		mov ecx, __temp_p__
		int 0x80
		mov lib_error, eax
	}
	return lib_error == 0
	
int waitpid(int pid, void *status, bool block)
	__temp_i__ = pid
	__temp_p__ = status
	__temp_i2__ = 0
	if !block
		__temp_i2__ = 1
	asm{
		mov eax, 0x00000007
		mov ebx, __temp_i__
		mov ecx, __temp_p__
		mov edx, __temp_i2__
		int 0x80
		mov __temp_i3__, eax
	}
	return __temp_i3__
	
bool kill(int pid, int signal)
	__temp_i__ = pid
	__temp_i2__ = signal
	asm{
		mov eax, 0x00000025
		mov ebx, __temp_i__
		mov ecx, __temp_i2__
		int 0x80
		mov lib_error, eax
	}
	return lib_error == 0

int shmget(int key, int size, int flags)
	__temp_i__ = key
	__temp_i2__ = size
	__temp_i3__ = flags
	asm{
		mov eax, 0x00000075 # ipc
		mov ebx, 0x0000000b
		mov ecx, __temp_i__
		mov edx, __temp_i2__
		mov esi, __temp_i3__
		int 0x80
		mov __temp_i3__, eax
	}
	return __temp_i3__

void* shmat(int id, int flags)
	void *p
	__temp_i__ = id
	__temp_p__ = &p
	__temp_i2__ = flags
	asm{
		mov eax, 0x00000075 # ipc
		mov ebx, 0x00000009
		mov ecx, __temp_i__
		mov edx, __temp_p__
		mov esi, __temp_i2__
		int 0x80
		mov lib_error, eax
	}
	if lib_error < 0 and lib_error > - 1024
		return nil
	return p
	
bool shmdt(void* addr)
	__temp_p__ = addr
	asm{
		mov eax, 0x00000075 # ipc
		mov ebx, 0x0000000a
		mov ecx, __temp_p__
		int 0x80
		mov lib_error, eax
	}
	return lib_error == 0
	
bool waitmsg()
	asm{
		mov eax, 0x00000075 # ipc
		mov ebx, 0x000003e9 # 1001 = wait-msg
		int 0x80
		mov lib_error, eax
	}
	return lib_error == 0
	
bool yield(int pid)
	__temp_i__ = pid
	asm{
		mov eax, 0x00000075 # ipc
		mov ebx, 0x000003ea # 1002 = yield
		mov ecx, __temp_i__
		int 0x80
		mov lib_error, eax
	}
	return lib_error == 0

class SysInfo
	int dummy

bool sysinfo(SysInfo buf)
	__temp_p__ = &buf
	asm{
		mov eax, 0x00000074
		mov ebx, __temp_p__
		int 0x80
		mov lib_error, eax
	}
	return lib_error == 0

class TaskInfo
	int dummy

bool taskinfo(int pid, TaskInfo buf)
	__temp_i__ = pid
	__temp_p__ = &buf
	asm{
		mov eax, 0x00002005
		mov ebx, __temp_i__
		mov ecx, __temp_p__
		int 0x80
		mov lib_error, eax
	}
	return lib_error == 0

class MountInfo
	int dummy

bool mountinfo(int pid, MountInfo buf)
	__temp_i__ = pid
	__temp_p__ = &buf
	asm{
		mov eax, 0x00002008
		mov ebx, __temp_i__
		mov ecx, __temp_p__
		int 0x80
		mov lib_error, eax
	}
	return lib_error == 0

class BlockDevice
	int _dummy

bool blockinfo(int major, int minor, BlockDevice buf)
	__temp_i__ = major
	__temp_i2__ = minor
	__temp_p__ = &buf
	asm{
		mov eax, 0x00002009
		mov ebx, __temp_i__
		mov ecx, __temp_i2__
		mov edx, __temp_p__
		int 0x80
		mov lib_error, eax
	}
	return lib_error == 0


bool uname(void *buf)
	__temp_p__ = buf
	asm{
		mov eax, 0x0000007a
		mov ebx, __temp_p__
		int 0x80
		mov lib_error, eax
	}
	return lib_error == 0

class TimeValue
	int sec, nanosec

bool time(TimeValue buf)
	__temp_p__ = &buf
	asm{
		mov eax, 0x00000019
		mov ebx, __temp_p__
		int 0x80
		mov lib_error, eax
	}
	return lib_error == 0

bool nanosleep(TimeValue buf, TimeValue buf2)
	__temp_p__ = &buf
	asm{
		mov eax, 0x000000a2
		mov ebx, __temp_p__
		int 0x80
		mov lib_error, eax
	}
	return lib_error == 0

bool sleep(int sec)
	TimeValue tv, tv0
	tv.sec = sec
	tv.nanosec = 0
	return nanosleep(tv, tv0)

bool usleep(int usec)
	TimeValue tv, tv0
	tv.sec = usec / 1000000
	tv.nanosec = (usec % 1000000) * 1000
	return nanosleep(tv, tv0)

bool sched_yield(int pid)
	__temp_i__ = pid
	asm{
		mov eax, 0x0000009e
		mov ebx, __temp_i__
		int 0x80
		mov lib_error, eax
	}
	return lib_error == 0
	
void kprint(string s)
	__temp_p__ = &s[0]
	__temp_i__ = s.num
	asm{
		mov eax, 0x00002002
		mov ebx, __temp_p__
		mov ecx, __temp_i__
		int 0x80
	}
	
void kprinti(int i)
	__temp_i__ = i
	asm{
		mov eax, 0x00002003
		mov ebx, __temp_i__
		int 0x80
	}
	
bool mapirq(int irq, int signal)
	__temp_i__ = irq
	__temp_i2__ = signal
	asm{
		mov eax, 0x00002007
		mov ebx, __temp_i__
		mov ecx, __temp_i2__
		int 0x80
		mov lib_error, eax
	}
	return lib_error == 0


int sys_socket(int cmd, int p1, int p2)
	__temp_i__ = cmd
	__temp_i2__ = p1
	__temp_i3__ = p2
	asm{
		mov eax, 0x00000066
		mov ebx, __temp_i__
		mov ecx, __temp_i2__
		mov edx, __temp_i3__
		int 0x80
		mov lib_error, eax
	}
	return lib_error


int socket(int type)
	return sys_socket(1, type, 0)

bool bind(int fd, int port)
	return sys_socket(2, fd, port) == 0

bool connect(int fd, int port)
	return sys_socket(3, fd, port) == 0

bool listen(int fd)
	return sys_socket(4, fd, 0) == 0

int accept(int fd)
	return sys_socket(5, fd, 0)




void prints(cstring s)
	__temp_p__ = &s
	asm {
		mov eax, 0x00002002
		mov ebx, __temp_p__
		int 0x80
	}


void lib__print(string s)
	int done = 0
	while done < s.num
		int r = write(stdout, &s[done], s.num - done)
		if r == -EWOULDBLOCK
			continue
		if r > 0
			done += r
	if lib_print_endl
		int r = write(stdout, &0x0000000a, 1)


	
int addr2phys(void *p)
	__temp_p__ = p
	asm {
		mov eax, 0x0000200b
		mov ebx, __temp_p__
		int 0x80
		mov __temp_i__, eax
	}
	return __temp_i__
