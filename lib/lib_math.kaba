use lib_base
use lib_array


func lib__clamp(i: int, min: int, max: int) -> int
	if i > max
		return max
	if i < min
		return min
	return i

func lib__loop(i: int, min: int, max: int) -> int
	int d = max - min + 1
	if i < min
		int n = ( (min-i-1) / d ) + 1
		return i + d * n
	if i > max
		int n = ( (i-max-1) / d ) + 1
		return i - d * n
	return i


var rand_state: int

func rand_next() -> int
	rand_state = rand_state * 1664525 + 1013904223
	return rand_state & 0x00ffffff

func lib__rand_seed(s: int)
	rand_state = s

func lib__rand(m: float) -> float
	return rand_next() * m / float(0x01000000)

func lib__randi(m: int) -> int
	return lib__rand(m)

func hex_nibble(i: int) -> char
	if i >= 10
		return 'a' + i - 10
	return '0' + i

class lib__int
	func static __str__(i: int) -> lib__string
		return i2s(i)
	func static hex(i: int, n: int) -> lib__string
		lib__string r
		r.resize(n)
		for k in 0:n
			r.data[n-k-1] = hex_nibble((i >> (k*4)) & 0xf)
		return r
	func static format(i: int, f: lib__string) -> lib__string
		if f.data[f.num - 1] == 'x'
			return hex(i, f.data[0] - '0')
		int n = int(f)
		char space = ' '
		if f.data[0] == '0'
			space = '0'
		return str_fill(i2s(i), n, space)

class lib__float
	func static __str__(f: float) -> lib__string
		return f2s(f, 6)

func lib__sin(f: float) -> float
	__temp_f__ = f
	asm{
		fld __temp_f__
		fsin
		fst __temp_f__
	}
	return __temp_f__

func lib__cos(f: float) -> float
	__temp_f__ = f
	asm{
		fld __temp_f__
		fcos
		fst __temp_f__
	}
	return __temp_f__

func lib__min(a: float, b: float) -> float
	if a < b
		return a
	return b

func lib__max(a: float, b: float) -> float
	if a > b
		return a
	return b

func lib__abs(x: float) -> float
	if x < 0
		return -x
	return x
	

func lib__clamp(i: int, min: int, max: int) -> int
	if max <= min
		return min
	if i > max
		return max
	if i < min
		return min
	return i

func lib_loop(i: int, min: int, max: int) -> int
	if max <= min
		return min
	int d = max - min + 1
	if i < min
		int n= ( (min-i-1) / d ) + 1
		return i + d * n
	if i > max
		int n= ( (i-max-1) / d ) + 1
		return i - d * n
	return i

func lib__min(a: int, b: int) -> int
	if a < b
		return a
	return b

func lib__max(a: int, b: int) -> int
	if a > b
		return a
	return b


func lib__sqr(f: float) -> float
	return f * f

func lib__sqrt(f: float) -> float
	__temp_f__ = f
	asm{
		sqrtss xmm0, __temp_f__
		movss __temp_f__, xmm0
	}
	return __temp_f__

func lib__clamp(f: float, min: float, max: float) -> float
	if max < min
		return min
	if f > max
		return max
	if f < min
		return min
	return f

func lib__loop(f: float, min: float, max: float) -> float
	float d = max - min
	if f < min
		int n = int( (min-f) / d ) + 1
		return f + d * float(n)
	if f >= max
		int n= int( (f-max) / d ) + 1
		return f - d * float(n)
	return f



class lib__complex
	var x, y: float
	
	func __str__() -> lib__string
		return _complex2s(self)

func _complex2s(c: lib__complex) -> lib__string
	lib__string r
	r.add('(')
	r += f2s(c.x, 6)
	r.add(',')
	r.add(' ')
	r += f2s(c.y, 6)
	r.add(')')
	return r


class lib__complex@list extends lib__@DynamicArray
	var override data: complex[0]*
	func __init__()
		__mem_init__(sizeof(complex))
	func __delete__()
		clear()
	func mut clear()
		__mem_clear__()
	func mut resize(size: int)
		if size > num
			reserve(size)
		num = size
	func mut add(c: complex)
		resize(num + 1)
		data[num - 1] = c
	func mut remove(index: int)
		if (index < 0) or (index >= num)
			return
		for i in index : num - 1
			data[i] = data[i+1]
		resize(num - 1)
	func mut __assign__(o: lib__complex@list)
		resize(o.num)
		for i in 0:num
			data[i] = o.data[i]


func lib__p2s(p: void*) -> lib__string
	lib__string r
	var i: int* = &p
	r.add('0')
	r.add('x')
	return r + lib__int.hex(*i, 8)
	