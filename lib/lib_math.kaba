use lib_base.*
use lib_array.*
use lib_syscalls.*

var rand_state: int

func rand_next() -> int
	rand_state = rand_state * 1664525 + 1013904223
	return rand_state & 0x00ffffff

func lib__math@@rand_seed(s: int)
	rand_state = s

func rand_u(m: float) -> float
	return rand_next() * m / float(0x01000000)

func lib__math@@rand(m: float) -> float
	return rand_u(m)

func lib__math@@rand(m: int) -> int
	return rand_u(m)

func hex_nibble(i: int) -> u8
	if i >= 10
		return 'a' + i - 10
	return '0' + i

class lib__i32
	_i: i32
	# FIXME: @callbyvalue
	
	func __str__() -> lib__string
		let i = _p2i(&self) # (T_T)
		return base@@i2s(i)
	func static hex(i: int, n: int) -> lib__string
		var r: Ret
		r.resize(n)
		for d in r.data
			for k in 0:n
				d[n-k-1] = hex_nibble((i >> (k*4)) & 0xf)
		return r
	func format(f: lib__string) -> lib__string
		let i = _p2i(&self) # (T_T)
		for fd in f.data
			if fd[f.num - 1] == 'x'
				return hex(i, fd[0] - '0')
		let n = int(f)
		var space = ' '
		for fd in f.data
			if fd[0] == '0'
				space = '0'
		return str_fill(base@@i2s(i), n, space)

class lib__i64
	_i: i64
	# FIXME: @callbyvalue
	
	func __str__() -> lib__string
		let i = _p2i(&self) # (T_T)
		return base@@i2s(i)

class lib__f32
	_f: f32 # FIXME @callbyvalue
	func static __str__() -> lib__string
		asm {
			movss __temp_f__, xmm0
		}
		var f = __temp_f__
		return base@@f2s(f, 6)


func lib__math@@sin(f: float) -> float
	if f < 0.0
		return - lib__math@@sin(-f)
	__temp_f__ = f * (2.0 / pi)
	asm {
		movss xmm0, __temp_f__
		cvttss2si eax, xmm0
		mov __temp_i__, eax
		cvtsi2ss xmm1, eax
		subss xmm0, xmm1
		movss __temp_f__, xmm0
	}
	var x = __temp_f__ * (pi / 2.0)
	if (__temp_i__ & 1) > 0
		x = pi/2 - x
	x = x - (x*x*x) / 6 + (x*x*x*x*x) / 120 - (x*x*x*x*x*x*x) / 5040
	if (__temp_i__ & 2) > 0
		return - x
	return x

func lib__math@@cos(f: float) -> float
	return lib__math@@sin(f + pi/2)
#	if f < 0.0
#		return lib__cos(-f)
#	__temp_f__ = f * (2.0 / pi)
#	asm {
#		movss xmm0, __temp_f__
#		cvttss2si eax, xmm0
#		mov __temp_i__, eax
#		cvtsi2ss xmm1, eax
#		subss xmm0, xmm1
#		movss __temp_f__, xmm0
#	}
#	let x = __temp_f__ * (pi / 2.0)
#	if (__temp_i__ & 1) > 0
#		x = pi/2 - x
#	...
#	return x

func lib__math@@min(a: float, b: float) -> float
	if a < b
		return a
	return b

func lib__math@@max(a: float, b: float) -> float
	if a > b
		return a
	return b

func lib__math@@abs(x: float) -> float
	if x < 0
		return -x
	return x
	

func lib__math@@clamp(i: int, min: int, max: int) -> int
	if max <= min
		return min
	if i > max
		return max
	if i < min
		return min
	return i

func lib_math@@loop(i: int, min: int, max: int) -> int
	if max <= min
		return min
	let d = max - min + 1
	if i < min
		let n = ( (min-i-1) / d ) + 1
		return i + d * n
	if i > max
		let n = ( (i-max-1) / d ) + 1
		return i - d * n
	return i

func lib__math@@min(a: int, b: int) -> int
	if a < b
		return a
	return b

func lib__math@@max(a: int, b: int) -> int
	if a > b
		return a
	return b


func lib__math@@sqr(f: float) -> float
	return f * f

func lib__math@@sqrt(f: float) -> float
	__temp_f__ = f
	asm{
		sqrtss xmm0, __temp_f__
		movss __temp_f__, xmm0
	}
	return __temp_f__

func lib__math@@clamp(f: float, min: float, max: float) -> float
	if max < min
		return min
	if f > max
		return max
	if f < min
		return min
	return f

func lib__math@@loop(f: float, min: float, max: float) -> float
	let d = max - min
	if f < min
		let n = int( (min-f) / d ) + 1
		return f + d * float(n)
	if f >= max
		let n = int( (f-max) / d ) + 1
		return f - d * float(n)
	return f



class lib__math@@complex
	var x, y: float
	
	func __str__() -> lib__string
		return _complex2s(self)

func _complex2s(c: lib__math@@complex) -> lib__string
	var r: Ret
	r.add('(')
	r += base@@f2s(c.x, 6)
	r.add(',')
	r.add(' ')
	r += base@@f2s(c.y, 6)
	r.add(')')
	return r


#class lib__complex@list extends lib__@DynamicArray
#	var override data: complex[0]*
#	func __init__()
#		__mem_init__(sizeof(complex))
#	func __delete__()
#		clear()
#	func mut clear()
#		__mem_clear__()
#	func mut resize(size: int)
#		if size > num
#			reserve(size)
#		num = size
#	func mut add(c: complex)
#		resize(num + 1)
#		data[num - 1] = c
#	func mut remove(index: int)
#		if (index < 0) or (index >= num)
#			return
#		for i in index : num - 1
#			data[i] = data[i+1]
#		resize(num - 1)
#	func mut __assign__(o: lib__complex@list)
#		resize(o.num)
#		for i in 0:num
#			data[i] = o.data[i]
#
#
func lib__p2s(p: void*) -> lib__string
	var r: Ret
	#var i = &p as int64*
	r.add('0')
	r.add('x')
	return r + lib__as_binary(&p, 8).hex()#lib__int.hex(*i, 8)
	