use lib_base.*
use lib_array.*
use lib_mem.*
use lib_syscalls.*
use lib_file.*
use image.*

class lib__math@@Color
	var a, r, g, b: f32
	func __str__() -> lib__string
		var s: lib__string
		return s

class lib__image@@Image
	var width, height: i32
	var mode, __align__: i32
	var data: lib__i32@list
	var alpha_used: bool
	var error: bool
	func __init__(w: i32, h: i32, c: Color)
		width = w
		height = h
		error = true
		if w > 0
			error = false
			data.resize(w * h)
			var ic = 0xff000000 + int(255.0 * c.b) + (int(255.0 * c.g) << 8) + (int(255.0 * c.r) << 16)
			for d in data.data
				for i in 0:len(data)
					d[i] = ic
	
	func static _create_dummy() -> xfer[Self]
		for im in lib__@malloc(sizeof(Self)) as Self*
			im.__init__(0, 0, Color(0,0,0,0))
			return &im as xfer[Self]

	# TODO this should return xfer?[]
	func static load(filename: lib__os@@Path) -> xfer[Self]
		var temp: lib__string
		var h = open(filename, O_RDONLY)
		if h < 0
			return _create_dummy()
		temp.resize(32)
		for t in temp.data
			var r = read(h, &t[0], 18)
			if r < 0
				close(h)
				return _create_dummy()
			for im in lib__@malloc(sizeof(Self)) as Self*
				var offset = t[0] as i32
				var ww = t[13] as i32
				var width = t[12] as i32
				width += (ww*256)
				var hh = t[15] as i32
				var height = t[14] as i32
				height += (hh*256)
	
				var c: Color
				c.r = 1
				c.g = 0
				c.b = 0
				im.__init__(width, height, c)#color.RED)
	
				for i in 0:offset
					let _ = read(h, &t[0], 1)
	
				for id in im.data.data
					for y in 0:height
						let _ = read(h, &id[y * width], 4*width)
				
				#for y in 0:height
#					for x in 0:width
#						int c
#						if read(h, &c, 4) == 4
#							im.data.data[x + y * width] = c
#						else
#							im.data.data[x + y * width] = 0xffff0000
				
				close(h)
				return &im as xfer[Self]
		close(h)
		return _create_dummy()

