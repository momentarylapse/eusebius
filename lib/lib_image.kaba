use lib_base
use lib_array
use lib_syscalls
use lib_file
use image

class lib__color
	var a, r, g, b: float
	func __str__() -> lib__string
		lib__string s
		return s

class lib__Image
	var width, height: int
	var mode, __align__: int
	var data: lib__int@list
	var alpha_used: bool
	var error: bool
	func __init__(w: int, h: int, c: color)
		width = w
		height = h
		error = false
		data.resize(w * h)
		int ic = 0xff000000 + int(255.0 * c.b) + (int(255.0 * c.g) << 8) + (int(255.0 * c.r) << 16)
		for i in 0:len(data)
			data.data[i] = ic

	func static load(filename: lib__Path) -> lib__Image*
		lib__string temp
		int h = open(filename, O_RDONLY)
		if h < 0
			return nil
		temp.resize(32)
		int r = read(h, &temp.data[0], 18)
		if r < 0
			close(h)
			return nil
		lib__Image* im = lib__@malloc(sizeof(Image))
		int offset = temp.data[0]
		int ww = temp.data[13]
		int width = temp.data[12]
		width += (ww*256)
		int hh = temp.data[15]
		int height = temp.data[14]
		height += (hh*256)
	
		color c
		c.r = 1
		c.g = 0
		c.b = 0
		im.__init__(width, height, c)#color.RED)
	
		for i in 0:offset
			read(h, &temp.data[0], 1)
	
		for y in 0:height
			read(h, &im.data.data[y * width], 4*width)
				
		#for y in 0:height
#			for x in 0:width
#				int c
#				if read(h, &c, 4) == 4
#					im.data.data[x + y * width] = c
#				else
#					im.data.data[x + y * width] = 0xffff0000
			
		close(h)
		return im

