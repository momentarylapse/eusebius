use os

const int ClusterSize = 2048

func main(arg: string[])
	if len(arg) < 2
		print("usage: kaba makemfs.kaba <out-file> <in-dir>")
		return
	var dir = Path(arg[1])
	var list = Filesystem.search(dir, "*", "f")
	print(str(list))
	var f = Filesystem.create(arg[0])
	f.seek(ClusterSize)

	# root directory
	int cluster = 2
	f << list.num
	int offset = 4
	for e in list
		f << str(e)
		if Filesystem.is_directory(dir << e)
			f << 1 # flags
		else
			f << 0
		int size = Filesystem.size(dir << e)
		f << size
		f << 1 # number of file parts
		f << cluster
		int num_clusters = (size - 1) / ClusterSize + 1
		f << num_clusters
		cluster += num_clusters
		offset += len(str(e)) + 22
	f.seek(ClusterSize * cluster)
	del f

	# files
	cluster = 2
	for e in list
		string s = "dd if='{{dir << e}}' of='{{arg[0]}}' bs=2048 seek={{cluster}}"
		shell_execute(s)
		int size = Filesystem.size(dir << e)
		int num_clusters = (size - 1) / ClusterSize + 1
		cluster += num_clusters
		#string t = FileRead(arg[1] + e.name)
#		t += "        "
#		int ti[0]* = &t[0]
#		for int n, 0, e.size / 4 + 1
#			f.WriteInt(ti[n])
#		#f.WriteBuffer(t)
#		for int n, e.size/4 + 1, (((e.size - 1) / ClusterSize + 1) * ClusterSize) / 4
#			f.WriteInt(0)
	
	#FileClose(f)
