#os

void main()
{
	asm("org 0x7c00");
	asm("bits_16");


	asm("_reset_drive:");
	asm("mov dl, 0x00");
	asm("mov ah, 0x00");
	 	asm("int 0x13");
		asm("or ah, ah");
		asm("jnz _reset_drive");
	asm("mov ax, 0x00");
	asm("mov es, ax");
	asm("mov dword ebx, 0x7e00"); // hier ist der Kernel
	asm("mov ah, 0x02");
	asm("mov al, 0x0D"); // "16 sectors of loading. [don't try more than this]"
	asm("mov ch, 0x00");
	asm("mov cl, 0x02");
	asm("mov dh, 0x00");
	asm("mov dl, 0x00");
	asm("int 0x13");
	asm("or ah,ah");
	asm("jnz _reset_drive");



	asm("mov ax, 0x2401");
	asm("int 0x15");

	asm("xor ax, ax");
	asm("mov ds, ax");

	asm("lgdt [_gdtr]");
	asm("cli");
	asm("mov eax, cr0");
	asm("or al, 0x01");
	asm("mov cr0, eax");

	asm("mov ax, 0x10");
	asm("mov ds, ax");
	asm("mov es, ax");
	asm("mov fs, ax");
	asm("mov gs, ax");
	asm("mov ss, ax");

	asm("mov dword esp, 0x200000");

	asm("jmp dword 0x08:0x7e00"); // den Kernel starten



	asm("_gdt:");
	asm("dd 0x00000000"); // null descriptor
	asm("dd 0x00000000");
	asm("dd 0x0000ffff"); // code descriptor
	asm("dd 0x00cf9a00");
	asm("dd 0x0000ffff"); // data descriptor
	asm("dd 0x00cf9200");

	asm("_gdtr:");
	asm("dw 0x17");
	asm("dd _gdt");
}
