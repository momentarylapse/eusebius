use "../base.kaba"
use "../fs/fs.kaba"
use "../io/text.kaba"
use "../mem/heap.kaba"
use "../mem/paging.kaba"



const int MAX_SOCKETS = 64
const int SOCKET_BUFFER_SIZE = 1024


enum
	SOCK_STATE_NONE
	SOCK_STATE_LISTENING
	SOCK_STATE_CONNECTING
	SOCK_STATE_WAIT_ACCEPT
	SOCK_STATE_RECV


class KSocket
	int _index
	bool used
	FileEntry *e
	int type # ...
	int port
	int peer_port
	int state
	bool blocking
	int ref_count
	char[0]* buffer
	int buffer_used
	
	int _accept_wait_port
	
	int write(PageDirectory page_dir, int addr, int size)
		if peer_port < 0
			return -ENOTCONN
		KSocket *s = SocketManager.get_by_port(peer_port)
		if !s
			return -ENOTCONN
		if s.buffer_used + size > SOCKET_BUFFER_SIZE
			return -EWOULDBLOCK
		page_dir.memcpy2kernel(&s.buffer[s.buffer_used], addr, size)
		s.buffer_used += size
		return size
	
	int read(PageDirectory page_dir, int addr, int _size)
		int size = _size
		if buffer_used == 0
			if peer_port < 0
				return -ENOTCONN
			# no data... block
			return -EWOULDBLOCK
		if size > buffer_used
			size = buffer_used
		page_dir.memcpy2task(addr, buffer, size)
		buffer_used -= size
		for i in 0:buffer_used
			buffer[i] = buffer[i + size]
		return size
	
	void set_state(int _state)
		state = _state
		
	int bind(int _port)
		if SocketManager.get_by_port(_port)
			return -EADDRINUSE
		port = _port
		return 0
		
	void link(out KSocket *s)
		s.peer_port = port
		peer_port = s.port
		
	int listen()
		if port < 0
			return -EINVAL
		set_state(SOCK_STATE_LISTENING)
		return 0
		
	int accept()
		if state == SOCK_STATE_WAIT_ACCEPT
			# "remote socket"
			KSocket *rs = SocketManager.get_by_port(_accept_wait_port)
			if !rs
				return -1
			# "return socket"
			FileEntry *e = create_file_entry(":sock:", FILE_TYPE_SOCKET, nil)
			if !e
				self.set_state(SOCK_STATE_LISTENING)
				return -ENFILE
			KSocket* s = SocketManager.create(e, type)
			s.assign_available_port()
			s.link(rs)
			self.set_state(SOCK_STATE_LISTENING)
			rs.set_state(SOCK_STATE_NONE)
			return s.port
		if state != SOCK_STATE_LISTENING
			return -ECONNREFUSED
		return -EWOULDBLOCK
		
	int connect(int _port)
		KSocket *rs = SocketManager.get_by_port(_port)
		if !rs
			return -ECONNREFUSED
		if rs.state != SOCK_STATE_LISTENING
			return -ECONNREFUSED
		
		self.assign_available_port()
		rs.set_state(SOCK_STATE_WAIT_ACCEPT)
		rs._accept_wait_port = port
		self.set_state(SOCK_STATE_CONNECTING)
		
		return -EWOULDBLOCK
		
	void assign_available_port()
		for p in 10000:20000
			if !SocketManager.get_by_port(p)
				bind(p)
				return
		
	void unref()
		ref_count --
			
		if ref_count < 0
			panic("Socket.ref_count < 0")
			
		if ref_count == 0
			clean_up()
	
	void clean_up()
		if peer_port >= 0
			# "unconnect"
			KSocket *s = SocketManager.get_by_port(peer_port)
			if s
				s.peer_port = -1
		FileSystem.delete(e)
		free(buffer)
		used = false


class SocketManager
	static KSocket[MAX_SOCKETS] sockets



	static KSocket* create(FileEntry e, int type)
		for s in sockets
			if !s.used
				s.used = true
				s.e = &e
				s.type = type
				s.state = SOCK_STATE_NONE
				s.blocking = true
				s.port = -1
				s.peer_port = -1
				s.ref_count = 0
				s.buffer_used = 0
				s.buffer = malloc(SOCKET_BUFFER_SIZE)
				return &s
		return nil


	static KSocket* get_by_port(int port)
		for s in sockets
			if s.used and s.port == port
				return &s
		return nil
	
	static KSocket* get(FileEntry e)
		for s in sockets
			if s.used and s.e == &e
				return &s
		return nil


	static void init()
		for s,i in sockets
			s._index = i
			s.used = false
