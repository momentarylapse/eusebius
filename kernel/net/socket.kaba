use common
use fs.fs
use io.text
use mem.heap
use mem.paging



const MAX_SOCKETS = 64
const SOCKET_BUFFER_SIZE = 1024


enum SocketState as @noauto
	NONE
	LISTENING
	CONNECTING
	WAIT_ACCEPT
	RECV


class KSocket as @noauto
	var _index: int
	var used: bool
	var e: FileEntry&
	var type: int
	var port: int
	var peer_port: int
	var state: SocketState
	var blocking: bool
	var ref_count: int
	var buffer: char[0]&
	var buffer_used: int
	
	var _accept_wait_port: int
	
	func mut write(data: void&, size: int) -> int
		if peer_port < 0
			return -ENOTCONN
		for s in SocketManager.get_by_port(peer_port)
			if s.buffer_used + size > SOCKET_BUFFER_SIZE
				return -EWOULDBLOCK
			memcpy(&s.buffer[s.buffer_used], data, size)
			s.buffer_used += size
			return size
		else
			return -ENOTCONN
	
	func mut read(data: void&, _size: int) -> int
		var size = _size
		if buffer_used == 0
			if peer_port < 0
				return -ENOTCONN
			# no data... block
			return -EWOULDBLOCK
		if size > buffer_used
			size = buffer_used
		memcpy(data, buffer, size)
		buffer_used -= size
		for i in 0:buffer_used
			buffer[i] = buffer[i + size]
		return size
	
	func mut set_state(_state: SocketState)
		state = _state
		
	func mut bind(_port: int) -> int
		if SocketManager.get_by_port(_port)
			return -EADDRINUSE
		port = _port
		return 0
		
	func mut link(out s: KSocket&)
		s.peer_port = port
		peer_port = s.port
		
	func mut listen() -> int
		if port < 0
			return -EINVAL
		set_state(SocketState.LISTENING)
		return 0
		
	func mut accept() -> int
		if state == SocketState.WAIT_ACCEPT
			# "remote socket"
			for rs in SocketManager.get_by_port(_accept_wait_port)
				# "return socket"
				var e = create_file_entry(":sock:", FileType.SOCKET, &FileSystem.dummy_mount)
				for s in SocketManager.create(e, type)
					s.assign_available_port()
					s.link(rs)
					self.set_state(SocketState.LISTENING)
					rs.set_state(SocketState.NONE)
					return s.port
				#self.set_state(SocketState.LISTENING)
				#return -ENFILE
			else
				return -1
		if state != SocketState.LISTENING
			return -ECONNREFUSED
		return -EWOULDBLOCK
		
	func mut connect(_port: int) -> int
		for rs in SocketManager.get_by_port(_port)
			if rs.state != SocketState.LISTENING
				return -ECONNREFUSED
		
			self.assign_available_port()
			rs.set_state(SocketState.WAIT_ACCEPT)
			rs._accept_wait_port = port
			self.set_state(SocketState.CONNECTING)
		
			return -EWOULDBLOCK
		else
			return -ECONNREFUSED
		
	func mut assign_available_port()
		for p in 10000:20000
			if !SocketManager.get_by_port(p)
				bind(p)
				return
		
	func mut unref()
		ref_count --
			
		if ref_count < 0
			panic("Socket.ref_count < 0")
			
		if ref_count == 0
			clean_up()
	
	func mut clean_up()
		if peer_port >= 0
			# "unconnect"
			for s in SocketManager.get_by_port(peer_port)
				s.peer_port = -1
		FileSystem.delete(e)
		Heap.free(buffer)
		used = false


class SocketManager as @noauto
	var static sockets: KSocket[MAX_SOCKETS]


	func static create(e: FileEntry, type: int) -> KSocket*
		for s in sockets
			if !s.used
				s.used = true
				s.e := &e
				s.type = type
				s.state = SocketState.NONE
				s.blocking = true
				s.port = -1
				s.peer_port = -1
				s.ref_count = 0
				s.buffer_used = 0
				s.buffer := Heap.malloc(SOCKET_BUFFER_SIZE)
				return &s
		return nil


	func static get_by_port(port: int) -> KSocket*
		for s in sockets
			if s.used and s.port == port
				return &s
		return nil
	
	func static get(e: FileEntry) -> KSocket*
		for s in sockets
			if s.used and s.e == &e
				return &s
		return nil


	func static init()
		for i=>s in sockets
			s._index = i
			s.used = false
