use common
use fs.fs
use io.text
use mem.heap
use mem.paging



const MAX_SOCKETS = 64
const SOCKET_BUFFER_SIZE = 1024


enum
	SOCK_STATE_NONE
	SOCK_STATE_LISTENING
	SOCK_STATE_CONNECTING
	SOCK_STATE_WAIT_ACCEPT
	SOCK_STATE_RECV


class KSocket
	var _index: int
	var used: bool
	var e: FileEntry*
	var type: int
	var port: int
	var peer_port: int
	var state: int
	var blocking: bool
	var ref_count: int
	var buffer: char[0]*
	var buffer_used: int
	
	var _accept_wait_port: int
	
	func write(page_dir: PageDirectory, addr: int, size: int) -> int
		if peer_port < 0
			return -ENOTCONN
		KSocket *s = SocketManager.get_by_port(peer_port)
		if !s
			return -ENOTCONN
		if s.buffer_used + size > SOCKET_BUFFER_SIZE
			return -EWOULDBLOCK
		page_dir.memcpy2kernel(&s.buffer[s.buffer_used], addr, size)
		s.buffer_used += size
		return size
	
	func read(page_dir: PageDirectory, addr: int, _size: int) -> int
		int size = _size
		if buffer_used == 0
			if peer_port < 0
				return -ENOTCONN
			# no data... block
			return -EWOULDBLOCK
		if size > buffer_used
			size = buffer_used
		page_dir.memcpy2task(addr, buffer, size)
		buffer_used -= size
		for i in 0:buffer_used
			buffer[i] = buffer[i + size]
		return size
	
	func set_state(_state: int)
		state = _state
		
	func bind(_port: int) -> int
		if SocketManager.get_by_port(_port)
			return -EADDRINUSE
		port = _port
		return 0
		
	func link(out s: KSocket*)
		s.peer_port = port
		peer_port = s.port
		
	func listen() -> int
		if port < 0
			return -EINVAL
		set_state(SOCK_STATE_LISTENING)
		return 0
		
	func accept() -> int
		if state == SOCK_STATE_WAIT_ACCEPT
			# "remote socket"
			KSocket *rs = SocketManager.get_by_port(_accept_wait_port)
			if !rs
				return -1
			# "return socket"
			FileEntry *e = create_file_entry(":sock:", FILE_TYPE_SOCKET, nil)
			if !e
				self.set_state(SOCK_STATE_LISTENING)
				return -ENFILE
			KSocket* s = SocketManager.create(e, type)
			s.assign_available_port()
			s.link(rs)
			self.set_state(SOCK_STATE_LISTENING)
			rs.set_state(SOCK_STATE_NONE)
			return s.port
		if state != SOCK_STATE_LISTENING
			return -ECONNREFUSED
		return -EWOULDBLOCK
		
	func connect(_port: int) -> int
		KSocket *rs = SocketManager.get_by_port(_port)
		if !rs
			return -ECONNREFUSED
		if rs.state != SOCK_STATE_LISTENING
			return -ECONNREFUSED
		
		self.assign_available_port()
		rs.set_state(SOCK_STATE_WAIT_ACCEPT)
		rs._accept_wait_port = port
		self.set_state(SOCK_STATE_CONNECTING)
		
		return -EWOULDBLOCK
		
	func assign_available_port()
		for p in 10000:20000
			if !SocketManager.get_by_port(p)
				bind(p)
				return
		
	func unref()
		ref_count --
			
		if ref_count < 0
			panic("Socket.ref_count < 0")
			
		if ref_count == 0
			clean_up()
	
	func clean_up()
		if peer_port >= 0
			# "unconnect"
			KSocket *s = SocketManager.get_by_port(peer_port)
			if s
				s.peer_port = -1
		FileSystem.delete(e)
		Heap.free(buffer)
		used = false


class SocketManager
	var static sockets: KSocket[MAX_SOCKETS]



	func static create(e: FileEntry, type: int) -> KSocket*
		for s in sockets
			if !s.used
				s.used = true
				s.e = &e
				s.type = type
				s.state = SOCK_STATE_NONE
				s.blocking = true
				s.port = -1
				s.peer_port = -1
				s.ref_count = 0
				s.buffer_used = 0
				s.buffer = Heap.malloc(SOCKET_BUFFER_SIZE)
				return &s
		return nil


	func static get_by_port(port: int) -> KSocket*
		for s in sockets
			if s.used and s.port == port
				return &s
		return nil
	
	func static get(e: FileEntry) -> KSocket*
		for s in sockets
			if s.used and s.e == &e
				return &s
		return nil


	func static init()
		for s,i in sockets
			s._index = i
			s.used = false
