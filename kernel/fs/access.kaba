use common
use io.text
use fs.fs
use fs.pipe
use net.socket
use mem.heap
use mem.paging


const MAX_OPEN_FILES = 128



class OpenFileData
	var used: bool
	var reading: bool
	var writing: bool
	var blocking: bool
	var entry: FileEntry*
	var offset: int
	#int block_size
	var buffer: char[0]*
	var pipe: Pipe*
	var socket: KSocket*
	var ref_count: int
	
	var buffer_dirty, inode_dirty: bool
	
	func get_flags() -> int
		var flags = 0
		if reading
			flags += O_RDONLY
		if writing
			flags += O_WRONLY
		if !blocking
			flags += O_NONBLOCK
		return flags
	func mut set_flags(flags: int)
		reading = (flags & O_RDONLY) > 0
		writing = (flags & O_WRONLY) > 0
		blocking = (flags & O_NONBLOCK) == 0
		if socket
			socket.blocking = blocking

	func mut read(page_dir: PageRootTable, _addr: int, _size: int) -> int
		var r = 0
		var size = _size
		var addr = _addr
		
		if !reading
			return -3
		
		if entry.type == FILE_TYPE_CHAR
			return entry.op.read(entry, &page_dir, addr, size)
		else if entry.type == FILE_TYPE_PIPE
			return pipe.read(page_dir, addr, size)
		else if entry.type == FILE_TYPE_SOCKET
			return socket.read(page_dir, addr, size)
		
		let block_size = entry.mount.block_size
		var pos_in_block = offset % block_size
		var block_no = offset / block_size
		
		let size_max = entry.size - offset
		if size > size_max
			size = size_max
		
		while size > 0
	
			# wieviel kann aus dem Puffer gelesen werden?
			var cur_size = size
			if cur_size > block_size - pos_in_block
				cur_size = block_size - pos_in_block

			# direkt lesen (aus dem Lese-Puffer kopieren)
			page_dir.memcpy2task(addr, &buffer[pos_in_block], cur_size)
			pos_in_block += cur_size
			offset += cur_size
			r += cur_size
			size -= cur_size
			addr += cur_size
		
			if pos_in_block >= block_size
				# read next block
				pos_in_block = 0
				block_no ++
				var cl = entry.blocks[block_no]
				entry.mount.read_block(cl, buffer)
		
		return r

	func mut truncate()
		entry.size = offset
		entry.shrink_block_list(ceil_quot(entry.size, entry.mount.block_size))
		inode_dirty = true

	func mut write(page_dir: PageRootTable, _addr: int, _size: int) -> int
		var r=0
		var addr = _addr
		var size = _size

		if !used
			return -1
		
		if !writing
			return -2
		
		if entry.type == FILE_TYPE_CHAR
			return entry.op.write(entry, &page_dir, addr, size)
		else if entry.type == FILE_TYPE_PIPE
			return pipe.write(page_dir, addr, size)
		else if entry.type == FILE_TYPE_SOCKET
			return socket.write(page_dir, addr, size)
		
		let block_size = entry.mount.block_size
		var pos_in_block = offset % block_size
		var block_no = offset / block_size
		
		while size > 0
	
			# wieviel kann in den Puffer geschrieben werden?
			var cur_size = size
			if cur_size > block_size - pos_in_block
				cur_size = block_size - pos_in_block

			# direkt schreiben (in den Puffer kopieren)
			page_dir.memcpy2kernel(&buffer[pos_in_block], addr, cur_size)
			pos_in_block += cur_size
			offset += cur_size
			r += cur_size
			size -= cur_size
			addr += cur_size
			entry.size += cur_size
			buffer_dirty = true
			inode_dirty = true
			
			# make sure, the current block exists
			if block_no >= entry.num_blocks
				entry.add_block(entry.mount.alloc_block())
			
			# buffer full? -> write cur block
			if pos_in_block >= block_size
				let cl = entry.blocks[block_no]
				entry.mount.write_block(cl, buffer)
				buffer_dirty = false
				
				# next block
				pos_in_block = 0
				block_no ++
		
		return r

	func getdents(page_dir: PageRootTable, addr: int, num: int) -> int
		if !used
			return -EBADF

		if entry.type != FILE_TYPE_DIR
			return -ENOTDIR
		
		if !reading
			return -3
	
		var e = entry.first_sub
		for i in 0:offset
			e = e.next
			if !e
				return 0
		if !e
			return 0
		var r: dirent_struct
		r.struct_size = strlen(e.name) + 13
		r.size = e.size
		r.type = e.type
		strcpy(r.name, e.name)
		page_dir.memcpy2task(addr, &r, r.struct_size)
		offset ++
		return 1

	func mut seek(_offset: int, mode: int) -> int
		let block_size = entry.mount.block_size
		let old_block_no = offset / block_size
		var new_offset: int
		if mode == SEEK_SET
			new_offset = _offset
		else if mode == SEEK_CUR
			new_offset = offset + _offset
		else if mode == SEEK_END
			new_offset = entry.size - _offset
		else
			return -EINVAL
			
		if new_offset < 0 or new_offset >= entry.size
			return -EINVAL
		
		offset = new_offset
		let block_no = offset / block_size
		if block_no != old_block_no
			let cl = entry.blocks[block_no]
			entry.mount.read_block(cl, buffer)
		return offset


	func mut unref()
		if !used
			return
		ref_count --
		if ref_count < 0
			panic("OpenFileData.ref_count < 0")
		if ref_count == 0
			clean_up()
			
	func mut clean_up()
			
		if inode_dirty
			if entry.mount.write_inode(entry) == 0
				inode_dirty = false
		if buffer_dirty
			let cl = entry.blocks[offset / entry.mount.block_size]
			entry.mount.write_block(cl, buffer)
			buffer_dirty = false
		FileSystem.sync()
			
		if buffer
			Heap.free(buffer)
		if entry.type == FILE_TYPE_CHAR
			entry.op.close(entry)
		if entry.type == FILE_TYPE_PIPE
			pipe.unref(writing)
		else if entry.type == FILE_TYPE_SOCKET
			socket.unref()
		
		used = false
		entry = nil


var OpenFiles: OpenFileData[MAX_OPEN_FILES]

func create_handle(flags: int) -> OpenFileData*
	for o in OpenFiles
		if !o.used
			o.used = true
			o.set_flags(flags)
			o.buffer = nil
			o.ref_count = 0
			o.buffer_dirty = false
			o.inode_dirty = false
			return &o
	return nil



func kernel_open_entry(e: FileEntry, flags: int) -> OpenFileData*
	let truncating = (flags & O_TRUNC) > 0
	var of = create_handle(flags)
	if !of
		return nil
	of.entry = &e
	of.offset = 0
	if of.entry.type == FILE_TYPE_FILE
		of.buffer = Heap.malloc(of.entry.mount.block_size)
		if of.entry.num_blocks > 0
			of.entry.mount.read_block(of.entry.blocks[0], of.buffer)
		if of.writing
			if truncating
				of.truncate()
			else
				of.offset = e.size
				of.entry.mount.read_block(of.entry.blocks[of.entry.num_blocks - 1], of.buffer)
	else if of.entry.type == FILE_TYPE_PIPE
		if of.reading == of.writing
			of.used = false
			return nil
		of.pipe = PipeManager.get(of.entry)
		if !of.pipe
			of.used = false
			return nil
		if of.reading
			of.pipe.read_ref_count ++
		else
			of.pipe.write_ref_count ++
	else if of.entry.type == FILE_TYPE_SOCKET
		of.socket = SocketManager.get(of.entry)
		if !of.socket
			of.used = false
			return nil
		of.socket.ref_count ++
	else if of.entry.type == FILE_TYPE_CHAR
		of.entry.op.open(of.entry)
	return of

func kernel_open(filename: cstring, flags: int, out cur_dir: FileEntry) -> OpenFileData*
	let creating = (flags & O_CREATE) > 0
	var e = FileSystem.get(filename, cur_dir)
	if !e and creating
		#prints("kernel Warnung: neue Datei...\n")
		e = cur_dir.create_child(filename, FILE_TYPE_FILE, cur_dir.mount)
		e.add_block(cur_dir.mount.alloc_block())
		e.mp_inode = cur_dir.mount.alloc_inode()
		cur_dir.mount.write_inode(cur_dir)
	if !e
		return nil
	return kernel_open_entry(e, flags)

func kernel_mkdir(filename: cstring, out cur_dir: FileEntry) -> int
	if FileSystem.get(filename, cur_dir)
		return -EEXIST
	var e = cur_dir.create_child(filename, FILE_TYPE_DIR, cur_dir.mount)
	if !e
		return -2
	e.mp_inode = cur_dir.mount.alloc_inode()
	cur_dir.mount.write_inode(e)
	cur_dir.mount.write_inode(cur_dir)
	cur_dir.mount.sync()
	return 0

func kernel_mknod(filename: cstring, flags: int, out cur_dir: FileEntry) -> int
	if FileSystem.get(filename, cur_dir)
		return -EEXIST
	var e = cur_dir.create_child(filename, FILE_TYPE_PIPE, cur_dir.mount)
	if !e
		return -2
	if !PipeManager.create(e)
		return -3
	return 0

func kernel_unlink(filename: cstring, cur_dir: FileEntry) -> int
	var e = FileSystem.get(filename, cur_dir)
	if !e
		return -ENOENT
	if e.type == FILE_TYPE_DIR
		return -EISDIR
	return FileSystem.delete(e)
	

func kernel_rmdir(filename: cstring, cur_dir: FileEntry) -> int
	var e = FileSystem.get(filename, cur_dir)
	if !e
		return -ENOENT
	if e.type != FILE_TYPE_DIR
		return -ENOTDIR
	if e.first_sub
		return -ENOTEMPTY
	return FileSystem.delete(e)


class dirent_struct
	var struct_size: int
	var size: int
	var type: int
	var name: cstring
	func __assign__(o: dirent_struct)
		pass

func InitFileAccessData()
	for o in OpenFiles
		o.used = false
	for p in PipeManager.pipes
		p.used = false
