use common
use io.text
use fs.fs
use fs.pipe
use net.socket
use mem.heap
use mem.paging


const MAX_OPEN_FILES = 128



class OpenFileData as @noauto
	var used: bool
	var reading: bool
	var writing: bool
	var blocking: bool
	var entry: FileEntry&
	var offset: int
	#int block_size
	var buffer: char[0]&
	var pipe: Pipe*
	var socket: KSocket*
	var ref_count: int
	
	var buffer_dirty, inode_dirty: bool
	
	func get_flags() -> int
		var flags = 0
		if reading
			flags += O_RDONLY
		if writing
			flags += O_WRONLY
		if !blocking
			flags += O_NONBLOCK
		return flags
	func mut set_flags(flags: int)
		reading = (flags & O_RDONLY) > 0
		writing = (flags & O_WRONLY) > 0
		blocking = (flags & O_NONBLOCK) == 0
		for s in socket
			s.blocking = blocking

	func mut read(_addr: int, _size: int64) -> int
		var r = 0
		var size = _size
		var addr = _addr
		
		if !reading
			return -3
		
		if entry.type == FileType.CHAR
			for op in entry.op
				return op.read(entry, addr, size)
		else if entry.type == FileType.PIPE
			for p in pipe
				return p.read(_i2p(addr), size)
		else if entry.type == FileType.SOCKET
			for s in socket
				return s.read(_i2p(addr), size)
		
		let block_size = entry.mount.block_size
		var pos_in_block = offset % block_size
		var block_no = offset / block_size
		
		let size_max = entry.size - offset
		if size > size_max
			size = size_max
		
		while size > 0
	
			# wieviel kann aus dem Puffer gelesen werden?
			var cur_size = size
			if cur_size > block_size - pos_in_block
				cur_size = block_size - pos_in_block

			# direkt lesen (aus dem Lese-Puffer kopieren)
			#page_dir.memcpy2task(addr, &buffer[pos_in_block], cur_size)
			memcpy(_i2p(addr), &buffer[pos_in_block], cur_size)
			pos_in_block += cur_size
			offset += cur_size
			r += cur_size
			size -= cur_size
			addr += cur_size
		
			if pos_in_block >= block_size
				# read next block
				pos_in_block = 0
				block_no ++
				for b in entry.blocks
					var cl = b[block_no]
					entry.mount.read_block(cl, buffer)
		
		return r

	func mut truncate()
		entry.size = offset
		entry.shrink_block_list(ceil_quot(entry.size, entry.mount.block_size))
		inode_dirty = true

	func mut write(_addr: int64, _size: int) -> int
		var r=0
		var addr = _addr
		var size = _size

		if !used
			return -1
		
		if !writing
			return -2
		
		if entry.type == FileType.CHAR
			for op in entry.op
				return op.write(entry, addr, size)
		else if entry.type == FileType.PIPE
			for p in pipe
				return p.write(_i2p(addr), size)
		else if entry.type == FileType.SOCKET
			for s in socket
				return s.write(_i2p(addr), size)
		
		let block_size = entry.mount.block_size
		var pos_in_block = offset % block_size
		var block_no = offset / block_size
		
		while size > 0
	
			# wieviel kann in den Puffer geschrieben werden?
			var cur_size = size
			if cur_size > block_size - pos_in_block
				cur_size = block_size - pos_in_block

			# direkt schreiben (in den Puffer kopieren)
			memcpy(&buffer[pos_in_block], _i2p(addr), cur_size)
			pos_in_block += cur_size
			offset += cur_size
			r += cur_size
			size -= cur_size
			addr += cur_size
			entry.size += cur_size
			buffer_dirty = true
			inode_dirty = true
			
			# make sure, the current block exists
			if block_no >= entry.num_blocks
				entry.add_block(entry.mount.alloc_block())
			
			# buffer full? -> write cur block
			if pos_in_block >= block_size
				for b in entry.blocks
					let cl = b[block_no]
					entry.mount.write_block(cl, buffer)
					buffer_dirty = false
				
					# next block
					pos_in_block = 0
					block_no ++
		
		return r

	func getdents(r: dirent_struct&, num: int) -> int
		if !used
			return -EBADF

		if entry.type != FileType.DIR
			return -ENOTDIR
		
		if !reading
			return -3
	
		for e in entry.first_sub
			var ee = &e
			for i in 0:offset
				for n in e.next
					ee := &n
				else
					return 0
			var _r: dirent_struct
			_r.struct_size = strlen(ee.name) + 13
			_r.size = ee.size
			_r.type = ee.type
			strcpy(_r.name, ee.name)
			memcpy(r, &_r, sizeof(_r))
			offset ++
			return 1
		else
			return 0

	func mut seek(_offset: int, mode: int) -> int
		let block_size = entry.mount.block_size
		let old_block_no = offset / block_size
		var new_offset: int
		if mode == SEEK_SET
			new_offset = _offset
		else if mode == SEEK_CUR
			new_offset = offset + _offset
		else if mode == SEEK_END
			new_offset = entry.size - _offset
		else
			return -EINVAL
			
		if new_offset < 0 or new_offset >= entry.size
			return -EINVAL
		
		offset = new_offset
		let block_no = offset / block_size
		if block_no != old_block_no
			for b in entry.blocks
				let cl = b[block_no]
				entry.mount.read_block(cl, buffer)
		return offset


	func mut unref()
		if !used
			return
#		prints(" <H.unref ")
#		var p = &self
#		printh(&p, 2)
		ref_count --
		if ref_count < 0
			panic("OpenFileData.ref_count < 0")
		if ref_count == 0
			clean_up()
#		prints("> ")
			
	func mut clean_up()
#		prints(" XXX ")
#		var pp = &self
#		printh(&pp, 2)
		if inode_dirty
			if entry.mount.write_inode(entry) == 0
				inode_dirty = false
		if buffer_dirty
			for b in entry.blocks
				let cl = b[offset / entry.mount.block_size]
				entry.mount.write_block(cl, buffer)
				buffer_dirty = false
		FileSystem.sync()

		if buffer != &_dummy_buffer
			Heap.free(buffer)
			buffer := &_dummy_buffer
		if entry.type == FileType.CHAR
			for op in entry.op
				op.close(entry)
		if entry.type == FileType.PIPE
			for p in pipe
				p.unref(writing)
		else if entry.type == FileType.SOCKET
			for s in socket
				s.unref()
		
		used = false
		#entry = nil


var OpenFiles: OpenFileData[MAX_OPEN_FILES]
var _dummy_buffer: char[8]

func create_handle(flags: int) -> OpenFileData*
	for o in OpenFiles
		if !o.used
#			prints(" <+HANDLE ")
#			#var p = &o
#			printh(&o, 2)
#			prints("> ")
			o.used = true
			o.set_flags(flags)
			o.buffer := &_dummy_buffer
			o.ref_count = 0
			o.buffer_dirty = false
			o.inode_dirty = false
			return &o
	return nil



func kernel_open_entry(e: FileEntry, flags: int) -> OpenFileData*
	let truncating = (flags & O_TRUNC) > 0
	for of in create_handle(flags)
		of.entry := &e
		of.offset = 0
		if of.entry.type == FileType.FILE or of.entry.type == FileType.DIR
			#prints("OPEN ")
			#printh(&of.entry.mount, 4)
			#printi(of.entry.mount.block_size)
			#prints(" ")
			of.buffer := Heap.malloc(of.entry.mount.block_size)
			for b in of.entry.blocks
				of.entry.mount.read_block(b[0], of.buffer)
			if of.writing
				if truncating
					of.truncate()
				else
					of.offset = e.size
					for b in of.entry.blocks
						of.entry.mount.read_block(b[of.entry.num_blocks - 1], of.buffer)
		else if of.entry.type == FileType.PIPE
			if of.reading == of.writing
				of.used = false
				return nil
			of.pipe = PipeManager.get(of.entry)
			for p in of.pipe
#				prints(" PIPE+ ")
				if of.reading
					p.read_ref_count ++
				else
					p.write_ref_count ++
			else
				of.used = false
				return nil
		else if of.entry.type == FileType.SOCKET
			of.socket = SocketManager.get(of.entry)
			for s in of.socket
				s.ref_count ++
			else
				of.used = false
				return nil
		else if of.entry.type == FileType.CHAR
			for op in of.entry.op
				op.open(of.entry)
		return &of
	else
		return nil

func kernel_open(filename: cstring, flags: int, out cur_dir: FileEntry) -> OpenFileData*
	let creating = (flags & O_CREATE) > 0
	for e in FileSystem.get(filename, cur_dir)
		return kernel_open_entry(e, flags)
	else
		if creating
			#prints("kernel Warnung: neue Datei...\n")
			var ee = cur_dir.create_child(filename, FileType.FILE, cur_dir.mount)
			ee.add_block(cur_dir.mount.alloc_block())
			ee.mp_inode = cur_dir.mount.alloc_inode()
			cur_dir.mount.write_inode(cur_dir)
			return kernel_open_entry(ee, flags)
		else
			return nil

func kernel_mkdir(filename: cstring, out cur_dir: FileEntry) -> int
	if FileSystem.get(filename, cur_dir)
		return -EEXIST
	var e = cur_dir.create_child(filename, FileType.DIR, cur_dir.mount)
	if !e
		return -2
	e.mp_inode = cur_dir.mount.alloc_inode()
	cur_dir.mount.write_inode(e)
	cur_dir.mount.write_inode(cur_dir)
	cur_dir.mount.sync()
	return 0

func kernel_mknod(filename: cstring, flags: int, out cur_dir: FileEntry) -> int
	if FileSystem.get(filename, cur_dir)
		return -EEXIST
	var e = cur_dir.create_child(filename, FileType.PIPE, cur_dir.mount)
	if !e
		return -2
	if !PipeManager.create(e)
		return -3
	return 0

func kernel_unlink(filename: cstring, cur_dir: FileEntry) -> int
	for e in FileSystem.get(filename, cur_dir)
		if e.type == FileType.DIR
			return -EISDIR
		return FileSystem.delete(&e)
	else
		return -ENOENT
	

func kernel_rmdir(filename: cstring, cur_dir: FileEntry) -> int
	for e in FileSystem.get(filename, cur_dir)
		if e.type != FileType.DIR
			return -ENOTDIR
		if e.first_sub
			return -ENOTEMPTY
		return FileSystem.delete(&e)
	else
		return -ENOENT


class dirent_struct as @noauto
	var struct_size: int
	var size: int
	var type: FileType
	var name: cstring

func InitFileAccessData()
	for o in OpenFiles
		o.used = false
	for p in PipeManager.pipes
		p.used = false
