use common
use mem.heap
use dev.ata
use dev.block
use io.text
use kaba

const FILE_TYPE_FILE = 0
const FILE_TYPE_DIR = 1
const FILE_TYPE_PIPE = 2
const FILE_TYPE_SOCKET = 4
const FILE_TYPE_CHAR = 8
const FILE_TYPE_BLOCK = 16

const MAX_MOUNT_POINTS = 32



class FileOperations
	func virtual open(e: FileEntry) -> int
		return 0
	func virtual close(e: FileEntry) -> int
		return 0
	func virtual read(e: FileEntry, page_dir: void*, addr: int, size: int) -> int
		return 0
	func virtual write(e: FileEntry, page_dir: void*, addr: int, size: int) -> int
		return 0

class FileEntry
	var name: cstring
	var type: int
	var size: int
	var num_blocks: int
	var blocks: int[0]*
	var inode: int
	var mp_inode: int
	var mount: MountPoint*
	var parent: FileEntry*
	var next: FileEntry*
	var first_sub: FileEntry*
	var op: FileOperations*
	
	func __assign__(o: FileEntry)
		pass
	
	
	func create_child(_name: cstring, _type: int, _mount: MountPoint*) -> FileEntry*
		FileEntry *e = create_file_entry(_name, _type, _mount)
		add_child(e)
		return e
	
	func add_child(out e: FileEntry)
		e.parent = &self
		if first_sub
			FileEntry *i = first_sub
			while i.next
				i = i.next
			i.next = &e
		else
			first_sub = &e
	
	func get_sub(sname: cstring) -> FileEntry*
		if strcmp(sname, "..") == 0
			return parent
		if strcmp(sname, ".") == 0
			return &self
		FileEntry *e = first_sub
		while e
			if strcmp(sname, e.name) == 0
				return e
			e = e.next
		return nil
		
	
	func const get_path(out path: cstring)
		if parent
			parent.get_path(path)
			if parent.parent
				strcat(path, "/")
			strcat(path, name)
		else
			strcpy(path, "/")
	
	# allocate list int blocks of int[16]
	func add_block(b: int)
		if (num_blocks & 0x0f) == 0
			blocks = Heap.realloc(blocks, num_blocks * 4, (num_blocks + 16) * 4)
		blocks[num_blocks] = b
		num_blocks ++
	
	func shrink_block_list(n: int)
		while num_blocks > n
			mount.free_block(blocks[num_blocks - 1])
			num_blocks --


	
func create_file_entry(name: cstring, type: int, mount: MountPoint*) -> FileEntry*
	FileEntry *e = Heap.malloc(sizeof(FileEntry))
	e.inode = 0
	e.mp_inode = 0
	e.num_blocks = 0
	e.blocks = nil
	strcpy(e.name, name)
	e.parent = nil
	e.type = type
	e.mount = mount
	e.next = nil
	e.first_sub = nil
	e.op = nil
	return e


class Ext2Inode
	var rights: Word
	var user: Word
	var size: int
	var atime, ctime, mtime, dtime: int
	var group: Word
	var hard_links: Word
	var blocks: int
	var flags: int
	var version: int
	var iblock: int[15]
	var file_version: int
	var acl: int
	var size_high: int
	var dummy: int
	var xx_high: int[3]
	func const isDir() -> bool
		return (rights._int() & 0xf000) == 0x4000
	func const isFile() -> bool
		return (rights._int() & 0xf000) == 0x8000

class Ext2SuperBlock
	var inodes_count: int
	var blocks_count: int
	var reserved_blocks_count: int
	var free_blocks_count: int
	var free_inodes_count: int
	var first_data_block: int
	var log_block_size: int
	var log_cluster_size: int
	var blocks_per_group: int
	var obso_frags_per_group: int
	var inodes_per_group: int
	var mtime, wtime: int
	var mnt_count, max_mnt_count: Word
	var magic: Word
	var state: Word
	var errors: Word
	var minor_rev_level: Word
	var lastcheck, checkinterval: int
	var creator_os: int
	var rev_level: int
	var def_resuid, def_resgid: Word
	var first_ino: int
	var inode_size: Word
	var block_group_nr: Word
	var feature_compat, feature_incompat, feature_ro_compat: int
	var uuid: char[16]
	var volume_name: char[16]
	var last_mounted: char[64]
	var _filler_: char[1024-200]

class Ext2BlockGroupDescriptor
	var block_bitmap: int
	var inode_bitmap: int
	var inode_table: int
	var free_blocks_count, free_inodes_count: Word
	var used_dirs_count: Word
	var flags: Word
	var exclude_bitmap: int
	var block_bitmap_csum, inode_bitmap_csum: Word
	var itable_unused: Word
	var checksum: Word

class Ext2DirEntryHeader
	var inode: int
	var rec_len: Word
	var name_len: char
	var file_type: char


class MountPoint
	var type: cstring
	var dev: BlockDevice*
	var dest: FileEntry*
	var block_offset: int
	var block_size: int
	var inode_size: int
	
	var dev_blocks_per_block: int
	var dev_block_offset: int
	
	var buf: char[0]*
	var buf_used: int
	
	var inodes_per_block: int
	var sb: Ext2SuperBlock
	var bg: Ext2BlockGroupDescriptor
	var readable, writable: bool
	
	var dirty: bool
	
	var inode_bitmap: int[0]*
	var block_bitmap: int[0]*
	
	func __init__()
		pass
	func __assign__(o: MountPoint)
		pass
		
	func virtual mount() -> int
		return -1
	
	func update_sizes(_bs: int, _bo: int)
		block_size = _bs
		dev_blocks_per_block = _bs / dev.block_size
		block_offset = _bo
		dev_block_offset = _bo / dev.block_size
	
	func read_block(block_no: int, _buf: void*)
		cstring *buf = _buf
		for i in 0:dev_blocks_per_block
			AtaController.read_sector(dev.disk_no, dev.offset + block_no * dev_blocks_per_block + dev_block_offset + i    , 1, &buf[dev.block_size * i])

	func write_block(block_no: int, _buf: void*)
		cstring *buf = _buf
		for i in 0:dev_blocks_per_block
			AtaController.write_sector(dev.disk_no, dev.offset + block_no * dev_blocks_per_block + dev_block_offset + i    , 1, &buf[dev.block_size * i])
	
	func virtual alloc_block() -> int
		return -1
	
	func virtual free_block(index: int) -> int
		return -1
	
	func virtual free_inode(index: int) -> int
		return -1
	
	func virtual alloc_inode() -> int
		return -1
	
	func virtual write_inode(e: FileEntry) -> int
		return -1
	
	func virtual sync() -> int
		return -1



class FileSystem
	var static mounts: MountPoint[MAX_MOUNT_POINTS]
	var static root: FileEntry*
	
	func static init()
		for m in mounts
			m.dev = nil
		root = create_file_entry("-root-", FILE_TYPE_DIR, nil)
	
	func static delete(out e: FileEntry*) -> int
		#prints("[del]")
		#prints e.name
		if e.first_sub
			return -1
		if !e.parent
			clean_up(e)
			return 0
		
		FileEntry *p = e.parent
		if p.first_sub == e
			# first in dir...
			p.first_sub = e.next
		else
			# find previous in dir
			FileEntry *c = p.first_sub
			while c
				if c.next == e
					c.next = e.next
					break
				c = c.next
		clean_up(e)
		return 0
	
	func static clean_up(out e: FileEntry*)
		FileEntry *p = e.parent
		e.shrink_block_list(0)
		if e.mount
			e.mount.free_inode(e.mp_inode)
		Heap.free(e)
		if p
			p.mount.write_inode(p)
			p.mount.sync()
	
	func static get(path: cstring, cur_dir: FileEntry) -> FileEntry*
		int ppos = 0
		FileEntry *e = &cur_dir
		if path[0] == '/'
			ppos = 1
			e = root
			if path[1] == 0
				return root
		else if !e
			return nil
		cstring sub
		bool has_more = true
		while has_more
			cstring* pp = &path[ppos]
			strcpy(sub, pp)
			cstring name
			for i in 0:256
				if (sub[i] == '/') or (sub[i] == 0)
					has_more = (sub[i] == '/')
					ppos += i + 1
					name[i] = 0
					break
				name[i] = sub[i]
			e = e.get_sub(name)
			if !e
				return nil
		return e
		
	func static mount(dev: BlockDevice, out dir: FileEntry, fs_name: cstring) -> int
		if !&dev
			return -1
		if !&dir
			return -1
		prints("mounting ")
		prints(fs_name)
		prints(" ")
		prints(dev.name)
		prints(" ")
		cstring dirname
		dir.get_path(dirname)
		prints(dirname)
		var mp = add_mount_point()
		if !mp
			return -1

		# hahaha, we are evil :D
		if strcmp(fs_name, "michifs") == 0
			MountPointMichiFS *mp_michi = mp
			mp_michi.__init__()
		else if strcmp(fs_name, "ext2") == 0
			MountPointExt2 *mp_ext2 = mp
			mp_ext2.__init__()
		# better to register a list of (stateless) fs drivers?
			
		mp.dest = &dir
		mp.dev = &dev
		mp.dirty = false
		strcpy(mp.type, fs_name)
		mp.mount()
		dir.mount = mp
		prints(" ok\n")
		return 0
	func static add_mount_point() -> MountPoint*
		for m in mounts
			if !m.dev
				return &m
		return nil
	
	func static sync()
		for m in mounts
			if m.dev
				m.sync()


class MountPointMichiFS extends MountPoint
	
	func read_int() -> int
		int *p = &buf[buf_used]
		buf_used += 4
		return *p
	func read_str(out s: cstring)
		int l = buf[buf_used] + buf[buf_used+1]*256
		buf_used += 2
		for i in 0:l
			s[i] = buf[buf_used + i]
		buf_used += l
		s[l] = 0
	func override mount() -> int
		buf = Heap.malloc(2048)
		update_sizes(2048, 0)
		read_block(1, buf)
		buf_used = 0
		int NumFiles = read_int()
		for n in 0:NumFiles
			cstring name
			read_str(name)
			FileEntry *e = dest.create_child(name, FILE_TYPE_FILE, &self)
			#e.type =
			read_int()
			e.size = read_int()
			read_int() # NumParts = 1
			int first_block = read_int()
			int num_blocks = read_int()
			for i in 0:num_blocks
				e.add_block(first_block + i)
		return 0


class MountPointExt2 extends MountPoint
	
	func override mount() -> int
		prints("EXT2.mount\n")
		buf = Heap.malloc(4096)
		
		# super block (always at 1024)
		update_sizes(1024, 0) # temp
		read_block(1, buf)
		memcpy(&sb, buf, sizeof(Ext2SuperBlock))
		
		inode_size = sb.inode_size._int()
		block_size = 1 << (sb.log_block_size + 10)
		inodes_per_block = block_size / inode_size
		block_offset = 0
		
		inode_bitmap = Heap.malloc(block_size)
		block_bitmap = Heap.malloc(block_size)
	
		if block_size == 1024
			read_block(2, buf)
		else
			read_block(1, buf)
		memcpy(&bg, buf, sizeof(Ext2BlockGroupDescriptor))
		
		update_sizes(block_size, block_offset)
		
		read_block(bg.block_bitmap, block_bitmap)
		read_block(bg.inode_bitmap, inode_bitmap)
		
		dirty = false
		
		#showMetaData()
		test_compatibility()
		if readable
			prints("READABLE\n")
			read_inode_recursive(2, dest)
		return 0
	
	func write_meta_data()
		AtaController.write_sector(dev.disk_no, dev.offset + 2    , 1, &sb)
		write_block(1 + block_size / 1024, &bg)
			
	
	func test_compatibility()
		readable = false
		writable = false
		if (sb.feature_incompat & 0xfffffffd) > 0
			return
		readable = true
		if (sb.feature_ro_compat & 0xfffffffe) > 0
			return
		writable = true
	
	func write_inode_simple(e: FileEntry) -> int
		int index = e.mp_inode
		int group_no = (index - 1) / sb.inodes_per_group # 0...
		int offset = ((index - 1) % sb.inodes_per_group) * inode_size
		
		read_block(group_no * sb.blocks_per_group + bg.inode_table + offset/block_size, buf)
		Ext2Inode *inode = &buf[offset % block_size]
		
		if e.type == FILE_TYPE_DIR
			inode.rights.set(0x4000)
		else if e.type == FILE_TYPE_FILE
			inode.rights.set(0x8000)
		else
			inode.rights.set(0)
		
		inode.size = e.size
		inode.blocks = e.num_blocks
		int num_direct = e.num_blocks
		if num_direct > 12
			num_direct = 12
		for i in 1:num_direct
			inode.iblock[i] = e.blocks[i]
		
		if e.num_blocks > 12
			if inode.iblock[12] == 0
				inode.iblock[12] = alloc_block()
			write_block(inode.iblock[12], buf)
		
		write_block(group_no * sb.blocks_per_group + bg.inode_table + offset/block_size, buf)
		
		return 0
	
	func read_inode(index: int, inode: Ext2Inode, out e: FileEntry)
		int group_no = (index - 1) / sb.inodes_per_group # 0...
		int offset = ((index - 1) % sb.inodes_per_group) * inode_size
		# group_no!!!!!!!!!!!!!!
		
		read_block(group_no * sb.blocks_per_group + bg.inode_table + offset/block_size, buf)
		memcpy(&inode, &buf[offset % block_size], sizeof(Ext2Inode))
		
		e.type = FILE_TYPE_FILE
		if inode.isDir()
			e.type = FILE_TYPE_DIR
		
		e.size = inode.size
		int f_num_blocks = (inode.size-1) / block_size + 1
		int f_num_direct = f_num_blocks
		if f_num_direct > 12
			f_num_direct = 12
	
		for i in 0:f_num_direct
			e.add_block(inode.iblock[i])
		if f_num_blocks > 12
			read_block(inode.iblock[12], buf)
			int[0]* p = buf
			for i in 12:f_num_blocks
				e.add_block(p[i - 12])
	
	
	func read_inode_contents(e: FileEntry) -> cstring*
		cstring *buf = Heap.malloc(e.num_blocks * block_size)
		for i in 0:e.num_blocks
			read_block(e.blocks[i], &buf[i * block_size])
		
		return buf
		
	#void write_inode_contents(FileEntry *e, cstring *buf, int size)
#		cstring *buf = malloc(e.num_blocks * block_size)
#		for i in 0:e.num_blocks
#			write_block(e.blocks[i], &buf[i * block_size])
	
	func read_inode_recursive(index: int, out dir: FileEntry)
		#prints("R")
		Ext2Inode inode
		read_inode(index, inode, dir)
		if !inode.isDir()
			return
		#prints("D")
		cstring *cont = read_inode_contents(dir)
		int p = 0
		while p < dir.size
			Ext2DirEntryHeader *d = &cont[p]
			if d.rec_len._int() == 0
				break
			cstring name
			int len = d.name_len
			memcpy(&name, &cont[p + 8], len)
			name[len] = 0
			p += d.rec_len._int()
			if d.name_len == 0 or d.inode == 0
				continue
				
		
			if strcmp(name, ".") != 0 and strcmp(name, "..") != 0
				int type = FILE_TYPE_FILE
				if d.file_type == 2
					type = FILE_TYPE_DIR
				FileEntry *e = dir.create_child(name, type, &self)
				e.mp_inode = d.inode
				read_inode_recursive(d.inode, e)
		Heap.free(cont)
		
	func override write_inode(out e: FileEntry) -> int
		if e.type == FILE_TYPE_DIR
			return write_inode_dir(e)
		return write_inode_simple(e)
	
	func write_inode_dir(out dir: FileEntry) -> int
		cstring fn
		dir.get_path(fn)
		cstring *b = Heap.malloc(4096*8)
		int pos = 0
	
		dir.size = 0
		dir.shrink_block_list(0)
		
		# iterate over files and fill buffer
		FileEntry *e = dir.first_sub
		int n = 0
		while e
			Ext2DirEntryHeader *d = &b[pos]
			for i in 0:8
				b[pos + i] = 0
			d.inode = e.mp_inode
			d.file_type = 0
			if e.type == FILE_TYPE_DIR
				d.file_type = 2
			int len = strlen(e.name)
			d.name_len = len
			d.rec_len.set(8 + len)
			memcpy(&b[pos + 8], &e.name, len)
			pos += 8 + len
		
			e = e.next
			n ++
		if pos == 0
			pos = block_size
		
		# create blocks for buffer
		int num_blocks = ceil_quot(pos, block_size)
		dir.size = num_blocks * block_size
		for i in pos:dir.size
			b[i] = 0
		for i in 0:num_blocks
			dir.add_block(alloc_block())
		
		for i in 0:num_blocks
			write_block(dir.blocks[i], &b[i * block_size])
			
		write_inode_simple(dir)
		Heap.free(b)
		return 0
	
	func override alloc_inode() -> int
		int n = sb.inodes_per_group / 32
		for i in 0:n
			int b = inode_bitmap[i]
			if b == 0xffffffff
				continue
			for j in 0:32
				int m = 1 << j
				if (b & m) == 0
					inode_bitmap[i] += m
					sb.free_inodes_count --
					bg.free_inodes_count += -1
					dirty = true
					return i * 32 + j
		return -1
	
	func override alloc_block() -> int
		#prints(" AB ")
		int n = sb.blocks_per_group / 32
		for i in 0:n
			int b = block_bitmap[i]
			if b == 0xffffffff
				continue
			for j in 0:32
				int m = 1 << j
				if (b & m) == 0
					block_bitmap[i] += m
					sb.free_blocks_count --
					bg.free_blocks_count += -1
					dirty = true
					#printi(i * 32 + j)
					return i * 32 + j
		return -1
	
	func override free_block(index: int) -> int
		#prints(" FB ")
		#printi(index)
		int bmi = index >> 5 # index/32
		int bit = index & 0x1f # index%32
		int mask = 1 << bit
		if (block_bitmap[bmi] & mask) == 0
			prints("  ---EFB--- ")
			return -1
		
		mask = 0xffffffff - mask
		block_bitmap[bmi] = block_bitmap[bmi] & mask
		sb.free_blocks_count ++
		bg.free_blocks_count += 1
		dirty = true
		return 0
	
	func override free_inode(index: int) -> int
		int bmi = index >> 5 # index/32
		int bit = index & 0x1f # index%32
		int mask = 1 << bit
		if (inode_bitmap[bmi] & mask) == 0
			prints("  ---EFI--- ")
			return -1
		
		mask = 0xffffffff - mask
		inode_bitmap[bmi] = inode_bitmap[bmi] & mask
		sb.free_inodes_count ++
		bg.free_inodes_count += 1
		dirty = true
		return 0
	
	func override sync() -> int
		if !dirty
			return 0
		write_meta_data()
		write_block(bg.inode_bitmap, inode_bitmap)
		write_block(bg.block_bitmap, block_bitmap)
		dirty = false
		return 0

