use common
use mem.heap
use mem.paging
use dev.ata
use dev.block
use io.text
use kaba

enum FileType as @noauto
	FILE = 0
	DIR = 1
	PIPE = 2
	SOCKET = 4
	CHAR = 8
	BLOCK = 16

let MAX_MOUNT_POINTS = 32



class FileOperations as @noauto
	func virtual mut open(e: FileEntry) -> int
		return 0
	func virtual mut close(e: FileEntry) -> int
		return 0
	func virtual mut read(e: FileEntry, addr: int64, size: int) -> int
		return 0
	func virtual mut write(e: FileEntry, addr: int64, size: int) -> int
		return 0

class FileEntry as @noauto
	var name: cstring
	var type: FileType
	var size: int
	var num_blocks: int
	var blocks: int[0]*
	var inode: int
	var mp_inode: int
	var mount: MountPoint&
	var parent: FileEntry*
	var next: FileEntry*
	var first_sub: FileEntry*
	var op: FileOperations*
	
	func mut create_child(_name: cstring, _type: FileType, _mount: MountPoint&) -> FileEntry&
		var e = create_file_entry(_name, _type, _mount)
		add_child(e)
		return e
	
	func mut add_child(out e: FileEntry)
		e.parent = &self
		for f in first_sub
			var i = f
			while i.next
				for n in i.next
					i := n
			i.next = &e
		else
			first_sub = &e
	
	func get_sub(sname: cstring) -> FileEntry*
		if strcmp(sname, "..") == 0
			return parent
		if strcmp(sname, ".") == 0
			return &self
		var e = first_sub
		while e
			for _e in e
				if strcmp(sname, _e.name) == 0
					return e
				e = _e.next
		return nil
		
	
	func get_path(out path: cstring)
		for p in parent
			p.get_path(path)
			if p.parent
				strcat(path, "/")
			strcat(path, name)
		else
			strcpy(path, "/")
	
	# allocate list int blocks of int[16]
	func mut add_block(b: int)
		if (num_blocks & 0x0f) == 0
			for _b in blocks
				blocks = Heap.realloc(_b, num_blocks * 4, (num_blocks + 16) * 4)
			else
				blocks = Heap.malloc(16 * 4) as int[0]*
		for _b in blocks
			_b[num_blocks] = b
		num_blocks ++
	
	func mut shrink_block_list(n: int)
		while num_blocks > n
			for b in blocks
				mount.free_block(b[num_blocks - 1])
			num_blocks --


	
func create_file_entry(name: cstring, type: FileType, mount: MountPoint&) -> FileEntry&
	var e = Heap.malloc(sizeof(FileEntry)) as FileEntry&
	e.inode = 0
	e.mp_inode = 0
	e.num_blocks = 0
	e.blocks = nil
	strcpy(e.name, name)
	e.parent = nil
	e.type = type
	e.mount := mount
	e.next = nil
	e.first_sub = nil
	e.op = nil
	return e


class Ext2Inode as @noauto
	var rights: Word
	var user: Word
	var size: int
	var atime, ctime, mtime, dtime: int
	var group: Word
	var hard_links: Word
	var blocks: int
	var flags: int
	var version: int
	var iblock: int[15]
	var file_version: int
	var acl: int
	var size_high: int
	var dummy: int
	var xx_high: int[3]
	func is_dir() -> bool
		return (int(rights) & 0xf000) == 0x4000
	func is_file() -> bool
		return (int(rights) & 0xf000) == 0x8000

class Ext2SuperBlock as @noauto
	var inodes_count: int
	var blocks_count: int
	var reserved_blocks_count: int
	var free_blocks_count: int
	var free_inodes_count: int
	var first_data_block: int
	var log_block_size: int
	var log_cluster_size: int
	var blocks_per_group: int
	var obso_frags_per_group: int
	var inodes_per_group: int
	var mtime, wtime: int
	var mnt_count, max_mnt_count: Word
	var magic: Word
	var state: Word
	var errors: Word
	var minor_rev_level: Word
	var lastcheck, checkinterval: int
	var creator_os: int
	var rev_level: int
	var def_resuid, def_resgid: Word
	var first_ino: int
	var inode_size: Word
	var block_group_nr: Word
	var feature_compat, feature_incompat, feature_ro_compat: int
	var uuid: char[16]
	var volume_name: char[16]
	var last_mounted: char[64]
	var _filler_: char[1024-200]

class Ext2BlockGroupDescriptor as @noauto
	var block_bitmap: int
	var inode_bitmap: int
	var inode_table: int
	var free_blocks_count, free_inodes_count: Word
	var used_dirs_count: Word
	var flags: Word
	var exclude_bitmap: int
	var block_bitmap_csum, inode_bitmap_csum: Word
	var itable_unused: Word
	var checksum: Word

class Ext2DirEntryHeader as @noauto
	var inode: int
	var rec_len: Word
	var name_len: char
	var file_type: char


class MountPoint as @noauto
	var type: cstring
	var dev: BlockDevice*
	var dest: FileEntry*
	var block_offset: int
	var block_size: int
	var inode_size: int
	
	var dev_blocks_per_block: int
	var dev_block_offset: int
	
	var inodes_per_block: int
	var sb: Ext2SuperBlock
	var bg: Ext2BlockGroupDescriptor
	var readable, writable: bool
	
	var dirty: bool
	
	func __init__()
		pass

	func virtual mut mount() -> int
		return -1
	
	func mut update_sizes(_bs: int, _bo: int)
		for d in dev
			block_size = _bs
			dev_blocks_per_block = _bs / d.block_size
			block_offset = _bo
			dev_block_offset = _bo / d.block_size
	
	func mut read_block(block_no: int, _buf: void&)
		#prints("RB")
		#printh(&block_no, 4)
		var buf = _buf as cstring&
		for d in dev
			for i in 0:dev_blocks_per_block
				AtaController.read_sector(d.disk_no, d.offset + block_no * dev_blocks_per_block + dev_block_offset + i, 1, &buf[d.block_size * i])
		
#		if block_no <= 1
#			prints("\n")
#			return
		#prints(" >>  ")
		#printh(&buf[0], 100)
		#prints("\n")
		#while true
		#	pass

	func mut mut write_block(block_no: int, _buf: void&)
		var but = _buf as cstring&
		for d in dev
			for i in 0:dev_blocks_per_block
				AtaController.write_sector(d.disk_no, d.offset + block_no * dev_blocks_per_block + dev_block_offset + i    , 1, &but[d.block_size * i])
	
	func virtual mut alloc_block() -> int
		return -1
	
	func virtual mut free_block(index: int) -> int
		return -1
	
	func virtual mut free_inode(index: int) -> int
		return -1
	
	func virtual mut alloc_inode() -> int
		return -1
	
	func virtual mut write_inode(e: FileEntry) -> int
		return -1
	
	func virtual mut sync() -> int
		return -1



class FileSystem as @noauto
	var static mounts: MountPoint[MAX_MOUNT_POINTS]
	var static dummy_mount: MountPoint
	var static root: FileEntry&
	
	func static init()
		for m in mounts
			m.dev = nil
		dummy_mount.block_size = 1024
		dummy_mount.dev_blocks_per_block = 1
		strcpy(dummy_mount.type, "dummy")
		let p = &dummy_mount
		printh(&p, 4)
		root := create_file_entry("-root-", FileType.DIR, &dummy_mount)
	
	func static delete(out e: FileEntry&) -> int
		#prints("[del]")
		#prints e.name
		if e.first_sub
			return -1
		for p in e.parent
		
			if p.first_sub == e
				# first in dir...
				p.first_sub = e.next
			else
				# find previous in dir
				var c = p.first_sub
				while c
					for _c in c
						if _c.next == e
							_c.next = e.next
							break
						c = _c.next
			clean_up(e)
			return 0
		else
			clean_up(e)
			return 0
	
	func static clean_up(out e: FileEntry&)
		var p = e.parent
		e.shrink_block_list(0)
		if e.mount
			e.mount.free_inode(e.mp_inode)
		Heap.free(e)
		for _p in p
			_p.mount.write_inode(_p)
			_p.mount.sync()
	
	func static get(path: cstring, cur_dir: FileEntry) -> FileEntry*
		var ppos = 0
		var e = &cur_dir
		if path[0] == '/'
			ppos = 1
			e := root
			if path[1] == 0
				return root
		else if !e
			return nil
		var sub: cstring
		var has_more = true
		while has_more
			var pp = &path[ppos] as cstring&
			strcpy(sub, pp)
			var name: cstring
			for i in 0:256
				if (sub[i] == '/') or (sub[i] == 0)
					has_more = (sub[i] == '/')
					ppos += i + 1
					name[i] = 0
					break
				name[i] = sub[i]
			for x in e.get_sub(name)
				e := x
			else
				return nil
		return e
		
	func static mount(dev: BlockDevice, out dir: FileEntry, fs_name: cstring) -> int
		if !&dev
			return -1
		if !&dir
			return -1
		prints("mounting ")
		prints(fs_name)
		prints(" ")
		prints(dev.name)
		prints(" ")
		var dirname: cstring
		dir.get_path(dirname)
		prints(dirname)
		for mp in add_mount_point()

			# hahaha, we are evil :D
			if strcmp(fs_name, "michifs") == 0
				var mp_michi = mp as MountPointMichiFS&
				mp_michi.__init__()
			else if strcmp(fs_name, "ext2") == 0
				var mp_ext2 = mp as MountPointExt2&
				mp_ext2.__init__()
			# better to register a list of (stateless) fs drivers?
			
			mp.dest = &dir
			mp.dev = &dev
			mp.dirty = false
			strcpy(mp.type, fs_name)
			mp.mount()
			dir.mount := mp
			prints(" ok\n")
			return 0
		else
			return -1
	func static add_mount_point() -> MountPoint*
		for m in mounts
			if !m.dev
				return &m
		return nil
	
	func static sync()
		for m in mounts
			if m.dev
				m.sync()


class MountPointMichiFS extends MountPoint
	
	var buf: char[0]&
	var buf_used: int
	
	func mut read_int() -> int
		var p = &buf[buf_used] as int&
		buf_used += 4
		return p
	func mut read_str(out s: cstring)
		let l = buf[buf_used] + buf[buf_used+1]*256
		buf_used += 2
		for i in 0:l
			s[i] = buf[buf_used + i]
		buf_used += l
		s[l] = 0
	func override mount() -> int
		buf := Heap.malloc(2048)
		update_sizes(2048, 0)
		read_block(1, buf)
		buf_used = 0
		let num_files = read_int()
		for n in 0:num_files
			var name: cstring
			read_str(name)
			for d in dest
				var e = d.create_child(name, FileType.FILE, &self)
				#e.type =
				read_int()
				e.size = read_int()
				read_int() # NumParts = 1
				let first_block = read_int()
				let num_blocks = read_int()
				for i in 0:num_blocks
					e.add_block(first_block + i)
		return 0


class MountPointExt2 extends MountPoint
	var buf: char[0]&
	var inode_bitmap: int[0]&
	var block_bitmap: int[0]&

	func override mount() -> int
		#prints("EXT2.mount\n")
		buf := Heap.malloc(4096)
		
		# super block (always at 1024)
		update_sizes(1024, 0) # temp
		read_block(1, buf)
		memcpy(&sb, buf, sizeof(Ext2SuperBlock))
		
		inode_size = int(sb.inode_size)
		block_size = 1 << (sb.log_block_size + 10)
		inodes_per_block = block_size / inode_size
		block_offset = 0
		
		inode_bitmap := Heap.malloc(block_size)
		block_bitmap := Heap.malloc(block_size)
	
		if block_size == 1024
			read_block(2, buf)
		else
			read_block(1, buf)
		memcpy(&bg, buf, sizeof(Ext2BlockGroupDescriptor))
		
		update_sizes(block_size, block_offset)
		
		read_block(bg.block_bitmap, block_bitmap)
		read_block(bg.inode_bitmap, inode_bitmap)
		
		dirty = false
		
		#showMetaData()
		test_compatibility()
		if readable
			#prints("READABLE\n")
			for d in dest
				read_inode_recursive(2, d)
		return 0
	
	func mut write_meta_data()
		for d in dev
			AtaController.write_sector(d.disk_no, d.offset + 2    , 1, &sb)
			write_block(1 + block_size / 1024, &bg)
			
	
	func mut test_compatibility()
		readable = false
		writable = false
		if (sb.feature_incompat & 0xfffffffd) > 0
			return
		readable = true
		if (sb.feature_ro_compat & 0xfffffffe) > 0
			return
		writable = true
	
	func mut write_inode_simple(e: FileEntry) -> int
		let index = e.mp_inode
		let group_no = (index - 1) / sb.inodes_per_group # 0...
		let offset = ((index - 1) % sb.inodes_per_group) * inode_size
		
		read_block(group_no * sb.blocks_per_group + bg.inode_table + offset/block_size, buf)
		var inode = &buf[offset % block_size] as Ext2Inode&
		
		if e.type == FileType.DIR
			inode.rights.set(0x4000)
		else if e.type == FileType.FILE
			inode.rights.set(0x8000)
		else
			inode.rights.set(0)
		
		inode.size = e.size
		inode.blocks = e.num_blocks
		var num_direct = e.num_blocks
		if num_direct > 12
			num_direct = 12
		for b in e.blocks
			for i in 1:num_direct
				inode.iblock[i] = b[i]
		
		if e.num_blocks > 12
			if inode.iblock[12] == 0
				inode.iblock[12] = alloc_block()
			write_block(inode.iblock[12], buf)
		
		write_block(group_no * sb.blocks_per_group + bg.inode_table + offset/block_size, buf)
		
		return 0
	
	func mut read_inode(index: int, inode: Ext2Inode, out e: FileEntry)
		let group_no = (index - 1) / sb.inodes_per_group # 0...
		let offset = ((index - 1) % sb.inodes_per_group) * inode_size
		# group_no!!!!!!!!!!!!!!
		
		#prints("I")
		#printi(index)
		#prints(" block=")
		let block_no = group_no * sb.blocks_per_group + bg.inode_table + offset/block_size
		#printi(block_no)
		#prints(" bs=")
		#printi(block_size)
		#prints(" off=")
		#printi(offset % block_size)
		#prints(" ")
		read_block(block_no, buf)
		memcpy(&inode, &buf[offset % block_size], sizeof(Ext2Inode))
		#raise(new Exception("x"))
		
		e.type = FileType.FILE
		if inode.is_dir()
			e.type = FileType.DIR
		
		e.size = inode.size
		let f_num_blocks = (inode.size-1) / block_size + 1
		var f_num_direct = f_num_blocks
		if f_num_direct > 12
			f_num_direct = 12
	
		for i in 0:f_num_direct
			e.add_block(inode.iblock[i])
		if f_num_blocks > 12
			read_block(inode.iblock[12], buf)
			var p = buf as int[0]&
			for i in 12:f_num_blocks
				e.add_block(p[i - 12])
	
	
	func mut read_inode_contents(e: FileEntry) -> cstring&
		var buf = Heap.malloc(e.num_blocks * block_size) as cstring&
		#prints("IC cs=")
		#printi(e.num_blocks)
		#prints(" ")
		for b in e.blocks
			for i in 0:e.num_blocks
				read_block(b[i], &buf[i * block_size])
		#prints("\n")
		#printh(buf, 24)
		#prints("\n")
		
		return buf
		
	#void write_inode_contents(FileEntry *e, cstring *buf, int size)
#		cstring *buf = malloc(e.num_blocks * block_size)
#		for i in 0:e.num_blocks
#			write_block(e.blocks[i], &buf[i * block_size])
	
	func mut read_inode_recursive(index: int, out dir: FileEntry)
		var inode: Ext2Inode
		read_inode(index, inode, dir)
		if !inode.is_dir()
			return
		var cont = read_inode_contents(dir) as cstring&
		var p = 0
		while p < dir.size
			var d = &cont[p] as Ext2DirEntryHeader&
			if int(d.rec_len) == 0
				break
			var name: cstring
			let _len = int(d.name_len)
			memcpy(&name, &cont[p + 8], _len)
			name[_len] = 0
			p += int(d.rec_len)
			if d.name_len == 0 or d.inode == 0
				continue
				
		
			if strcmp(name, ".") != 0 and strcmp(name, "..") != 0
				var type = FileType.FILE
				if d.file_type == 2
					type = FileType.DIR
				var e = dir.create_child(name, type, &self)
				e.mp_inode = d.inode
				read_inode_recursive(d.inode, e)
		Heap.free(cont)
		
	func override write_inode(out e: FileEntry) -> int
		if e.type == FileType.DIR
			return write_inode_dir(e)
		return write_inode_simple(e)
	
	func mut write_inode_dir(out dir: FileEntry) -> int
		var fn: cstring
		dir.get_path(fn)
		var b = Heap.malloc(4096*8) as cstring&
		var pos = 0
	
		dir.size = 0
		dir.shrink_block_list(0)
		
		# iterate over files and fill buffer
		var e = dir.first_sub
		var n = 0
		while e
			for _e in e
				var d = &b[pos] as Ext2DirEntryHeader&
				for i in 0:8
					b[pos + i] = 0
				d.inode = _e.mp_inode
				d.file_type = 0
				if _e.type == FileType.DIR
					d.file_type = 2
				let _len = strlen(_e.name)
				d.name_len = _len
				d.rec_len.set(8 + _len)
				memcpy(&b[pos + 8], &_e.name, _len)
				pos += 8 + _len
		
				e = _e.next
				n ++
		if pos == 0
			pos = block_size
		
		# create blocks for buffer
		let num_blocks = ceil_quot(pos, block_size)
		dir.size = num_blocks * block_size
		for i in pos:dir.size
			b[i] = 0
		for i in 0:num_blocks
			dir.add_block(alloc_block())
		
		for db in dir.blocks
			for i in 0:num_blocks
				write_block(db[i], &b[i * block_size])
			
		write_inode_simple(dir)
		Heap.free(b)
		return 0
	
	func override alloc_inode() -> int
		let n = sb.inodes_per_group / 32
		for i in 0:n
			let b = inode_bitmap[i]
			if b == 0xffffffff
				continue
			for j in 0:32
				let m = 1 << j
				if (b & m) == 0
					inode_bitmap[i] += m
					sb.free_inodes_count --
					bg.free_inodes_count += -1
					dirty = true
					return i * 32 + j
		return -1
	
	func override alloc_block() -> int
		#prints(" AB ")
		let n = sb.blocks_per_group / 32
		for i in 0:n
			let b = block_bitmap[i]
			if b == 0xffffffff
				continue
			for j in 0:32
				let m = 1 << j
				if (b & m) == 0
					block_bitmap[i] += m
					sb.free_blocks_count --
					bg.free_blocks_count += -1
					dirty = true
					#printi(i * 32 + j)
					return i * 32 + j
		return -1
	
	func override free_block(index: int) -> int
		#prints(" FB ")
		#printi(index)
		let bmi = index >> 5 # index/32
		let bit = index & 0x1f # index%32
		var mask = 1 << bit
		if (block_bitmap[bmi] & mask) == 0
			prints("  ---EFB--- ")
			return -1
		
		mask = 0xffffffff - mask
		block_bitmap[bmi] = block_bitmap[bmi] & mask
		sb.free_blocks_count ++
		bg.free_blocks_count += 1
		dirty = true
		return 0
	
	func override free_inode(index: int) -> int
		let bmi = index >> 5 # index/32
		let bit = index & 0x1f # index%32
		var mask = 1 << bit
		if (inode_bitmap[bmi] & mask) == 0
			prints("  ---EFI--- ")
			return -1
		
		mask = 0xffffffff - mask
		inode_bitmap[bmi] = inode_bitmap[bmi] & mask
		sb.free_inodes_count ++
		bg.free_inodes_count += 1
		dirty = true
		return 0
	
	func override sync() -> int
		if !dirty
			return 0
		write_meta_data()
		write_block(bg.inode_bitmap, inode_bitmap)
		write_block(bg.block_bitmap, block_bitmap)
		dirty = false
		return 0

