use common
use mem.heap
use dev.ata
use dev.block
use io.text
use kaba

const int FILE_TYPE_FILE = 0
const int FILE_TYPE_DIR = 1
const int FILE_TYPE_PIPE = 2
const int FILE_TYPE_SOCKET = 4
const int FILE_TYPE_CHAR = 8
const int FILE_TYPE_BLOCK = 16

const int MAX_MOUNT_POINTS = 32



class FileOperations
	virtual int open(FileEntry e)
		return 0
	virtual int close(FileEntry e)
		return 0
	virtual int read(FileEntry e, void* page_dir, int addr, int size) # PageDirectory
		return 0
	virtual int write(FileEntry e, void* page_dir, int addr, int size) # PageDirectory
		return 0

class FileEntry
	cstring name
	int type
	int size
	int num_blocks
	int[0]* blocks
	int inode
	int mp_inode
	MountPoint *mount
	FileEntry *parent
	FileEntry *next
	FileEntry *first_sub
	FileOperations *op
	
	void __assign__(FileEntry o)
		pass
	
	
	FileEntry *create_child(cstring _name, int _type, MountPoint *_mount)
		FileEntry *e = create_file_entry(_name, _type, _mount)
		add_child(e)
		return e
	
	void add_child(out FileEntry e)
		e.parent = &self
		if first_sub
			FileEntry *i = first_sub
			while i.next
				i = i.next
			i.next = &e
		else
			first_sub = &e
	
	FileEntry *get_sub(cstring sname)
		if strcmp(sname, "..") == 0
			return parent
		if strcmp(sname, ".") == 0
			return &self
		FileEntry *e = first_sub
		while e
			if strcmp(sname, e.name) == 0
				return e
			e = e.next
		return nil
		
	
	const void get_path(out cstring path)
		if parent
			parent.get_path(path)
			if parent.parent
				strcat(path, "/")
			strcat(path, name)
		else
			strcpy(path, "/")
	
	# allocate list int blocks of int[16]
	void add_block(int b)
		if (num_blocks & 0x0f) == 0
			blocks = Heap.realloc(blocks, num_blocks * 4, (num_blocks + 16) * 4)
		blocks[num_blocks] = b
		num_blocks ++
	
	void shrink_block_list(int n)
		while num_blocks > n
			mount.free_block(blocks[num_blocks - 1])
			num_blocks --


	
FileEntry *create_file_entry(cstring name, int type, MountPoint *mount)
	FileEntry *e = Heap.malloc(sizeof(FileEntry))
	e.inode = 0
	e.mp_inode = 0
	e.num_blocks = 0
	e.blocks = nil
	strcpy(e.name, name)
	e.parent = nil
	e.type = type
	e.mount = mount
	e.next = nil
	e.first_sub = nil
	e.op = nil
	return e


class Ext2Inode
	Word rights
	Word user
	int size
	int atime, ctime, mtime, dtime
	Word group
	Word hard_links
	int blocks
	int flags
	int version
	int[15] iblock
	int file_version
	int acl
	int size_high
	int dummy
	int[3] xx_high
	const bool isDir()
		return (rights._int() & 0xf000) == 0x4000
	const bool isFile()
		return (rights._int() & 0xf000) == 0x8000

class Ext2SuperBlock
	int inodes_count
	int blocks_count
	int reserved_blocks_count
	int free_blocks_count
	int free_inodes_count
	int first_data_block
	int log_block_size
	int log_cluster_size
	int blocks_per_group
	int obso_frags_per_group
	int inodes_per_group
	int mtime, wtime
	Word mnt_count, max_mnt_count
	Word magic
	Word state
	Word errors
	Word minor_rev_level
	int lastcheck, checkinterval
	int creator_os
	int rev_level
	Word def_resuid, def_resgid
	int first_ino
	Word inode_size
	Word block_group_nr
	int feature_compat, feature_incompat, feature_ro_compat
	char[16] uuid
	char[16] volume_name
	char[64] last_mounted
	char[1024-200] _filler_

class Ext2BlockGroupDescriptor
	int block_bitmap
	int inode_bitmap
	int inode_table
	Word free_blocks_count, free_inodes_count
	Word used_dirs_count
	Word flags
	int exclude_bitmap
	Word block_bitmap_csum, inode_bitmap_csum
	Word itable_unused
	Word checksum

class Ext2DirEntryHeader
	int inode
	Word rec_len
	char name_len
	char file_type


class MountPoint
	cstring type
	BlockDevice *dev # nil => unused
	FileEntry *dest
	int block_offset
	int block_size
	
	int dev_blocks_per_block
	int dev_block_offset
	
	char[0] *buf
	int buf_used
	
	int inodes_per_block
	Ext2SuperBlock sb
	Ext2BlockGroupDescriptor bg
	bool readable, writable
	
	bool dirty
	
	int[0]* inode_bitmap
	int[0]* block_bitmap
	
	void __init__()
		pass
	void __assign__(MountPoint o)
		pass
		
	virtual int mount()
		return -1
	
	void update_sizes(int _bs, int _bo)
		block_size = _bs
		dev_blocks_per_block = _bs / dev.block_size
		block_offset = _bo
		dev_block_offset = _bo / dev.block_size
	
	void read_block(int block_no, void *_buf)
		cstring *buf = _buf
		for i in 0:dev_blocks_per_block
			AtaController.read_sector(dev.disk_no, dev.offset + block_no * dev_blocks_per_block + dev_block_offset + i    , 1, &buf[dev.block_size * i])

	void write_block(int block_no, void *_buf)
		cstring *buf = _buf
		for i in 0:dev_blocks_per_block
			AtaController.write_sector(dev.disk_no, dev.offset + block_no * dev_blocks_per_block + dev_block_offset + i    , 1, &buf[dev.block_size * i])
	
	virtual int alloc_block()
		return -1
	
	virtual int free_block(int index)
		return -1
	
	virtual int free_inode(int index)
		return -1
	
	virtual int alloc_inode()
		return -1
	
	virtual int write_inode(FileEntry e)
		return -1
	
	virtual int sync()
		return -1



class FileSystem
	static MountPoint[MAX_MOUNT_POINTS] mounts
	static FileEntry *root
	
	static void init()
		for m in mounts
			m.dev = nil
		root = create_file_entry("-root-", FILE_TYPE_DIR, nil)
	
	static int delete(out FileEntry *e)
		#prints("[del]")
		#prints e.name
		if e.first_sub
			return -1
		if !e.parent
			clean_up(e)
			return 0
		
		FileEntry *p = e.parent
		if p.first_sub == e
			# first in dir...
			p.first_sub = e.next
		else
			# find previous in dir
			FileEntry *c = p.first_sub
			while c
				if c.next == e
					c.next = e.next
					break
				c = c.next
		clean_up(e)
		return 0
	
	static void clean_up(out FileEntry *e)
		FileEntry *p = e.parent
		e.shrink_block_list(0)
		if e.mount
			e.mount.free_inode(e.mp_inode)
		Heap.free(e)
		if p
			p.mount.write_inode(p)
			p.mount.sync()
	
	static FileEntry *get(cstring path, FileEntry cur_dir)
		int ppos = 0
		FileEntry *e = &cur_dir
		if path[0] == '/'
			ppos = 1
			e = root
			if path[1] == 0
				return root
		else if !e
			return nil
		cstring sub
		bool has_more = true
		while has_more
			cstring* pp = &path[ppos]
			strcpy(sub, pp)
			cstring name
			for i in 0:256
				if (sub[i] == '/') or (sub[i] == 0)
					has_more = (sub[i] == '/')
					ppos += i + 1
					name[i] = 0
					break
				name[i] = sub[i]
			e = e.get_sub(name)
			if !e
				return nil
		return e
		
	static int mount(BlockDevice dev, out FileEntry dir, cstring fs_name)
		if !&dev
			return -1
		if !&dir
			return -1
		prints("mounting ")
		prints(fs_name)
		prints(" ")
		prints(dev.name)
		prints(" ")
		cstring dirname
		dir.get_path(dirname)
		prints(dirname)
		let mp = add_mount_point()
		if !mp
			return -1

		# hahaha, we are evil :D
		if strcmp(fs_name, "michifs") == 0
			MountPointMichiFS *mp_michi = mp
			mp_michi.__init__()
		else if strcmp(fs_name, "ext2") == 0
			MountPointExt2 *mp_ext2 = mp
			mp_ext2.__init__()
		# better to register a list of (stateless) fs drivers?
			
		mp.dest = &dir
		mp.dev = &dev
		mp.dirty = false
		strcpy(mp.type, fs_name)
		mp.mount()
		dir.mount = mp
		prints(" ok\n")
		return 0
	static MountPoint* add_mount_point()
		for m in mounts
			if !m.dev
				return &m
		return nil
	
	static void sync()
		for m in mounts
			if m.dev
				m.sync()


class MountPointMichiFS extends MountPoint
	
	int read_int()
		int *p = &buf[buf_used]
		buf_used += 4
		return *p
	void read_str(out cstring s)
		int l = buf[buf_used] + buf[buf_used+1]*256
		buf_used += 2
		for i in 0:l
			s[i] = buf[buf_used + i]
		buf_used += l
		s[l] = 0
	override int mount()
		buf = Heap.malloc(2048)
		update_sizes(2048, 0)
		read_block(1, buf)
		buf_used = 0
		int NumFiles = read_int()
		for n in 0:NumFiles
			cstring name
			read_str(name)
			FileEntry *e = dest.create_child(name, FILE_TYPE_FILE, &self)
			#e.type =
			read_int()
			e.size = read_int()
			read_int() # NumParts = 1
			int first_block = read_int()
			int num_blocks = read_int()
			for i in 0:num_blocks
				e.add_block(first_block + i)
		return 0


class MountPointExt2 extends MountPoint
	
	override int mount()
		#prints("EXT2.mount")
		buf = Heap.malloc(4096)
		update_sizes(1024, 0) # temp
		
		read_block(1, buf)
		memcpy(&sb, buf, sizeof(Ext2SuperBlock))
		
		block_size = 1 << (sb.log_block_size + 10)
		inodes_per_block = block_size / sizeof(Ext2Inode) #128
		block_offset = 1024
		if block_size == 1024
			block_offset = 0
		
		inode_bitmap = Heap.malloc(block_size)
		block_bitmap = Heap.malloc(block_size)
	
		#f.seek(1024 + block_size, true)
		#f.xread(&bg, sizeof(BlockGroupDescriptor))
		read_block(1 + block_size / 1024, buf)
		memcpy(&bg, buf, sizeof(Ext2BlockGroupDescriptor))
		
		update_sizes(block_size, block_offset)
		
		read_block(bg.block_bitmap, block_bitmap)
		read_block(bg.inode_bitmap, inode_bitmap)
		
		dirty = false
		
		#showMetaData()
		test_compatibility()
		if readable
			read_inode_recursive(2, dest)
		return 0
	
	void write_meta_data()
		AtaController.write_sector(dev.disk_no, dev.offset + 2    , 1, &sb)
		write_block(1 + block_size / 1024, &bg)
			
	
	void test_compatibility()
		readable = false
		writable = false
		if (sb.feature_incompat & 0xfffffffd) > 0
			return
		readable = true
		if (sb.feature_ro_compat & 0xfffffffe) > 0
			return
		writable = true
	
	int write_inode_simple(FileEntry e)
		int index = e.mp_inode
		int group_no = (index - 1) / sb.inodes_per_group # 0...
		int offset = ((index - 1) % sb.inodes_per_group) * sizeof(Ext2Inode)
		
		read_block(group_no * sb.blocks_per_group + bg.inode_table + offset/block_size, buf)
		Ext2Inode *inode = &buf[offset % block_size]
		
		if e.type == FILE_TYPE_DIR
			inode.rights.set(0x4000)
		else if e.type == FILE_TYPE_FILE
			inode.rights.set(0x8000)
		else
			inode.rights.set(0)
		
		inode.size = e.size
		inode.blocks = e.num_blocks
		int num_direct = e.num_blocks
		if num_direct > 12
			num_direct = 12
		for i in 1:num_direct
			inode.iblock[i] = e.blocks[i]
		
		if e.num_blocks > 12
			if inode.iblock[12] == 0
				inode.iblock[12] = alloc_block()
			write_block(inode.iblock[12], buf)
		
		write_block(group_no * sb.blocks_per_group + bg.inode_table + offset/block_size, buf)
		
		return 0
	
	void read_inode(int index, Ext2Inode inode, out FileEntry e)
		int group_no = (index - 1) / sb.inodes_per_group # 0...
		int offset = ((index - 1) % sb.inodes_per_group) * sizeof(Ext2Inode)
		# group_no!!!!!!!!!!!!!!
		read_block(group_no * sb.blocks_per_group + bg.inode_table + offset/block_size, buf)
		memcpy(&inode, &buf[offset % block_size], sizeof(Ext2Inode))
		
		e.type = FILE_TYPE_FILE
		if inode.isDir()
			e.type = FILE_TYPE_DIR
		
		e.size = inode.size
		int f_num_blocks = (inode.size-1) / block_size + 1
		int f_num_direct = f_num_blocks
		if f_num_direct > 12
			f_num_direct = 12
	
		for i in 0:f_num_direct
			e.add_block(inode.iblock[i])
		if f_num_blocks > 12
			read_block(inode.iblock[12], buf)
			int[0]* p = buf
			for i in 12:f_num_blocks
				e.add_block(p[i - 12])
	
	
	cstring *read_inode_contents(FileEntry e)
		cstring *buf = Heap.malloc(e.num_blocks * block_size)
		for i in 0:e.num_blocks
			read_block(e.blocks[i], &buf[i * block_size])
		
		return buf
		
	#void write_inode_contents(FileEntry *e, cstring *buf, int size)
#		cstring *buf = malloc(e.num_blocks * block_size)
#		for i in 0:e.num_blocks
#			write_block(e.blocks[i], &buf[i * block_size])
	
	void read_inode_recursive(int index, out FileEntry dir)
		Ext2Inode inode
		read_inode(index, inode, dir)
		if !inode.isDir()
			return
		cstring *cont = read_inode_contents(dir)
		int p = 0
		while p < dir.size
			Ext2DirEntryHeader *d = &cont[p]
			if d.rec_len._int() == 0
				break
			cstring name
			int len = d.name_len
			memcpy(&name, &cont[p + 8], len)
			name[len] = 0
			p += d.rec_len._int()
			if d.name_len == 0 or d.inode == 0
				continue
				
		
			if strcmp(name, ".") != 0 and strcmp(name, "..") != 0
				int type = FILE_TYPE_FILE
				if d.file_type == 2
					type = FILE_TYPE_DIR
				FileEntry *e = dir.create_child(name, type, &self)
				e.mp_inode = d.inode
				read_inode_recursive(d.inode, e)
		Heap.free(cont)
		
	override int write_inode(out FileEntry e)
		if e.type == FILE_TYPE_DIR
			return write_inode_dir(e)
		return write_inode_simple(e)
	
	int write_inode_dir(out FileEntry dir)
		cstring fn
		dir.get_path(fn)
		cstring *b = Heap.malloc(4096*8)
		int pos = 0
	
		dir.size = 0
		dir.shrink_block_list(0)
		
		# iterate over files and fill buffer
		FileEntry *e = dir.first_sub
		int n = 0
		while e
			Ext2DirEntryHeader *d = &b[pos]
			for i in 0:8
				b[pos + i] = 0
			d.inode = e.mp_inode
			d.file_type = 0
			if e.type == FILE_TYPE_DIR
				d.file_type = 2
			int len = strlen(e.name)
			d.name_len = len
			d.rec_len.set(8 + len)
			memcpy(&b[pos + 8], &e.name, len)
			pos += 8 + len
		
			e = e.next
			n ++
		if pos == 0
			pos = block_size
		
		# create blocks for buffer
		int num_blocks = ceil_quot(pos, block_size)
		dir.size = num_blocks * block_size
		for i in pos:dir.size
			b[i] = 0
		for i in 0:num_blocks
			dir.add_block(alloc_block())
		
		for i in 0:num_blocks
			write_block(dir.blocks[i], &b[i * block_size])
			
		write_inode_simple(dir)
		Heap.free(b)
		return 0
	
	override int alloc_inode()
		int n = sb.inodes_per_group / 32
		for i in 0:n
			int b = inode_bitmap[i]
			if b == 0xffffffff
				continue
			for j in 0:32
				int m = 1 << j
				if (b & m) == 0
					inode_bitmap[i] += m
					sb.free_inodes_count --
					bg.free_inodes_count += -1
					dirty = true
					return i * 32 + j
		return -1
	
	override int alloc_block()
		#prints(" AB ")
		int n = sb.blocks_per_group / 32
		for i in 0:n
			int b = block_bitmap[i]
			if b == 0xffffffff
				continue
			for j in 0:32
				int m = 1 << j
				if (b & m) == 0
					block_bitmap[i] += m
					sb.free_blocks_count --
					bg.free_blocks_count += -1
					dirty = true
					#printi(i * 32 + j)
					return i * 32 + j
		return -1
	
	override int free_block(int index)
		#prints(" FB ")
		#printi(index)
		int bmi = index >> 5 # index/32
		int bit = index & 0x1f # index%32
		int mask = 1 << bit
		if (block_bitmap[bmi] & mask) == 0
			prints("  ---EFB--- ")
			return -1
		
		mask = 0xffffffff - mask
		block_bitmap[bmi] = block_bitmap[bmi] & mask
		sb.free_blocks_count ++
		bg.free_blocks_count += 1
		dirty = true
		return 0
	
	override int free_inode(int index)
		int bmi = index >> 5 # index/32
		int bit = index & 0x1f # index%32
		int mask = 1 << bit
		if (inode_bitmap[bmi] & mask) == 0
			prints("  ---EFI--- ")
			return -1
		
		mask = 0xffffffff - mask
		inode_bitmap[bmi] = inode_bitmap[bmi] & mask
		sb.free_inodes_count ++
		bg.free_inodes_count += 1
		dirty = true
		return 0
	
	override int sync()
		if !dirty
			return 0
		write_meta_data()
		write_block(bg.inode_bitmap, inode_bitmap)
		write_block(bg.block_bitmap, block_bitmap)
		dirty = false
		return 0

