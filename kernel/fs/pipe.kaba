use common
use io.text
use fs.fs
use mem.heap
use mem.paging



const MAX_PIPES = 64
const PIPE_BUFFER_SIZE = 1024



class Pipe
	var used: bool
	var e: FileEntry*
	var read_ref_count: int
	var write_ref_count: int
	var buffer: char[0]*
	var buffer_used: int
	func mut write(page_root: PageRootTable, addr: int, size: int) -> int
		if buffer_used + size > PIPE_BUFFER_SIZE
			return -EWOULDBLOCK
		page_root.memcpy2kernel(&buffer[buffer_used], addr, size)
		buffer_used += size
		return size
	func mut read(page_root: PageRootTable, addr: int, _size: int) -> int
		var size = _size
		if buffer_used == 0
			# no data... block if we have a writer
			if write_ref_count > 0
				return -EWOULDBLOCK
			# else "empty"
			return 0
		if size > buffer_used
			size = buffer_used
		page_root.memcpy2task(addr, buffer, size)
		buffer_used -= size
		for i in 0:buffer_used
			buffer[i] = buffer[i + size]
		return size
	#void show()
#		prints("  ")
#		printi(_p2i(&self))
#		prints("  ")
#		printi read_ref_count
#		prints(":")
#		printi write_ref_count
#		prints("  ")
	func mut unref(writing: bool)
		if writing
			write_ref_count --
		else
			read_ref_count --
			
		if read_ref_count < 0
			panic("Pipe.read_ref_count < 0")
		if write_ref_count < 0
			panic("Pipe.write_ref_count < 0")
			
		if read_ref_count == 0 and write_ref_count == 0 and !e.parent
			# only auto-delete if anonymous
			clean_up()
	
	func mut clean_up()
		if !e.parent
			# anonymous pipe
			FileSystem.delete(e)

		Heap.free(buffer)
		used = false


class PipeManager
	var static pipes: Pipe[MAX_PIPES]



	func static create(e: FileEntry) -> Pipe*
		for p in pipes
			if !p.used
				p.used = true
				p.e = &e
				p.read_ref_count = 0
				p.write_ref_count = 0
				p.buffer_used = 0
				p.buffer = Heap.malloc(PIPE_BUFFER_SIZE)
				return &p
		return nil

	func static get(e: FileEntry) -> Pipe*
		for p in pipes
			if p.used and p.e == &e
				return &p
		return nil


	func static init()
		for p in pipes
			p.used = false
