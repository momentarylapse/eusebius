use common
use io.io
use time.timevalue
use task.task
use irq.irq

class KernelTimer
	#int[2] state
	var static tv: TimeValue
	var static dt_nanosec: int
	
	#void update_state()
#		asm{
#			db 0x0f
#			db 0x31
#			mov __temp_i__, eax
#			mov __temp_i2__, edx
#		}
#		state[0] = __temp_i2__
#		state[1] = __temp_i__
	
	func static update()
		#update_state()
		# TODO   :P
		#tv.sec = (state[0] << 8) + (state[1] >> 24)
		#tv.nanosec = 0
		#tv.nanosec = (state[1] << 6) & 0x3fffffff
	func static tick()
		tv.inc_nanosec(dt_nanosec)

	func static init_interrupt(out t: Task, dt_ms: int)
		# read year from CMOS
		#outportb(0x70, 0x40 | 0x09)
		#int rr = inportb(0x71)
		# year=0x09 month=0x08 day=0x07 hours=0x04 min=0x02 sec=0x00

		tv.clear()
		dt_nanosec = dt_ms * 1000000
	
		irq.set_task(irq.hw2soft(0), &t) # IRQ 0
	
		# ticks/s: 1193180
		# 100Hz:   11932 = 0x2e9c
		int ticks_per_sec = 1193180
		int ticks_till_irq = (ticks_per_sec >> 10) * dt_ms
		if ticks_till_irq > 0xffff
			ticks_till_irq = 0xffff

		outportb(0x43, 0x34) # channel 0, rate generator
		outportb(0x40, ticks_till_irq)
		outportb(0x40, ticks_till_irq >> 8)


