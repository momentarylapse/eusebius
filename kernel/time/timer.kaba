use common
use io.io
use io.text
use time.timevalue
use irq.irq

let TIMER_IRQ = 0

class KernelTimer as @noauto
	var static state: int64
	var static tv: TimeValue
	
	func static update_state()
		asm{
			db 0x0f # RDTSC eax:edx
			db 0x31
			mov __temp_i64__, rax
			mov __temp_i2__, edx
		}
		# (O__O)  int64 arithmetic...
		# also bug in constant system 0x00000000ffffffff = -1
		__temp_i64__ = (__temp_i64__ << 32) >> 32
		state = int64(__temp_i2__)<<32
		state += __temp_i64__
	
	# seems non-monotonic
	func static update()
		update_state()
		# TODO: precise formula   :P
		tv.sec = (state >> 31)
		tv.nanosec = (state >> 1) & 0x3fffffff
#		prints("\n")
#		printh(&tv, 8)
#		printi(tv.sec)
#		prints(" ")
#		printi(tv.nanosec)
#		prints(" ")
#		printh(&state, 8)
#		prints("  ")

	func static init(F: void*, dt_ms: int)
		# read year from CMOS
		#outportb(0x70, 0x40 | 0x09)
		#int rr = inportb(0x71)
		# year=0x09 month=0x08 day=0x07 hours=0x04 min=0x02 sec=0x00

		tv.clear()

		IrqManager.set_func(TIMER_IRQ + 32, F)
	
		# ticks/s: 1193180
		# 100Hz:   11932 = 0x2e9c
		let ticks_per_sec = 1193180
		var ticks_till_irq = (ticks_per_sec >> 10) * dt_ms
		if ticks_till_irq > 0xffff
			ticks_till_irq = 0xffff

		outportb(0x43, 0x34) # channel 0, rate generator
		outportb(0x40, ticks_till_irq)
		outportb(0x40, ticks_till_irq >> 8)
	
	func static start()
		IrqManager.unmask(TIMER_IRQ)

	
	
