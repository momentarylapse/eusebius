use common.*
use io.text.*
use mem.heap.*
use mem.paging.*

let MAX_SHARED_MEMORY_BLOCKS = 256


class SharedMemory

	class Block as @noauto
		var id: i32
		var key: i32
		var pid: i32
		var size: i32
		var physical_addr: i64
		var refcount: i32
		var flags: i32
	
		func mut unref()
			refcount --
		
			if refcount == 0 and (flags & SHM_DEST) > 0
				clean_up()
			if refcount < 0
				panic("SharedMem.refcount < 0")
	
		func mut clean_up()
			Paging.free_chunk(physical_addr, size)
			key = -1
	var static blocks: Block[MAX_SHARED_MEMORY_BLOCKS]
	
	func static init()
		for mut i=>b in blocks
			b.id = i
			b.key = -1
	
	func static get_used() -> i32
		var size = 0
		for b in blocks
			if b.key >= 0
				size += b.size
		return size
	
	func static create(key: i32, size: i32, flags: i32, pid: i32) -> i32
		let absolute = (flags & SHM_ABSOLUTE) != 0
		let evil = (flags & SHM_ULTRA_EVIL) != 0
		if key < 0 and not absolute
			return -EINVAL
		for mut i=>b in blocks
			if b.key != -1
				continue
			if absolute
				let paddr = i64(key) & 0x00000000ffffffff
				if not Paging.reserve_physical_chunk(paddr, size, true)
					if not evil and key != 0x00700000
						return -ENOMEM
				b.physical_addr = paddr
			else
				b.physical_addr = Paging.find_and_reserve_physical_chunk(size)
				if b.physical_addr == -1
					return -ENOMEM
			b.size = ceil_quot(size, PAGE_SIZE) * PAGE_SIZE
			b.key = key
			b.pid = pid
			b.refcount = 0
			b.flags = flags
			return i
		return -ENOSPC
		
	func static get_by_key(key: i32) -> Block*
		if key == -1
			return nil
		for i=>b in blocks
			if b.key == key
				# test access rights
				return &b
		return nil
		
	func static get(id: i32) -> Block*
		if id < 0 or id >= MAX_SHARED_MEMORY_BLOCKS
			return nil
		if blocks[id].key == -1
			return nil
		return &blocks[id]
		
	func static shm_get(key: i32, size: i32, flags: i32, pid: i32) -> i64
		for s in get_by_key(key)
			if (flags & IPC_CREAT) > 0 and (flags & IPC_EXCL) > 0
				return -EEXIST
			return s.id
		else
			if (flags & IPC_CREAT) == 0
				return -ENOENT
			return create(key, size, flags, pid)

