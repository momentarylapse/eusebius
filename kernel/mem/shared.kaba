#define __OS__
use "../base.kaba"
use "../text_mode.kaba"
use "heap.kaba"
use "paging.kaba"
#define __STRING_CONST_AS_CSTRING__

const int MAX_SHARED_MEMORY_BLOCKS = 64

class SharedMemory
	int id
	int key // -1 = unused
	int pid
	int size
	int p
	int refcount
	int flags
	
	void unref()
		refcount --
		
		if refcount == 0 and (flags & SHM_DEST) > 0
			clean_up()
		if refcount < 0
			panic("SharedMem.refcount < 0")
	
	void clean_up()
		paging.free_chunk(p, size)
		key = -1

class SharedMemoryController
	SharedMemory[MAX_SHARED_MEMORY_BLOCKS] blocks
	
	void init()
		for b,i in blocks
			b.id = i
			b.key = -1
	
	int get_used()
		int size = 0
		for b in blocks
			if b.key >= 0
				size += b.size
		return size
	
	int create(int key, int size, int flags, int pid)
		bool absolute = (flags & SHM_ABSOLUTE) != 0
		if key < 0 and !absolute
			return -EINVAL
		for b,i in blocks
			if b.key == -1
				if absolute
					if !paging.alloc_chunk(key, size)
						return -ENOMEM
					b.p = key
				else
					b.p = paging.find_and_alloc_chunk(size)
					if b.p == -1
						return -ENOMEM
				b.size = ceil_quot(size, PAGE_SIZE) * PAGE_SIZE
				b.key = key
				b.pid = pid
				b.refcount = 0
				b.flags = flags
				return i
		return -ENOSPC
		
	SharedMemory* get_by_key(int key)
		if key == -1
			return nil
		for b,i in blocks
			if b.key == key
				// test access rights
				return &b
		return nil
		
	SharedMemory* get(int id)
		if id < 0 or id >= MAX_SHARED_MEMORY_BLOCKS
			return nil
		if blocks[id].key == -1
			return nil
		return &blocks[id]
		
	int shm_get(int key, int size, int flags, int pid)
		SharedMemory* s = get_by_key(key)
		if s
			if (flags & IPC_CREAT) > 0 and (flags & IPC_EXCL) > 0
				return -EEXIST
			return s.id
		if (flags & IPC_CREAT) == 0
			return -ENOENT
		return create(key, size, flags, pid)
	
SharedMemoryController SharedMem
