use common
use io.text
use mem.heap

const PAGE_SIZE = 4096
const PAGE_TABLE_ENTRIES = PAGE_SIZE / 8 #512
const MAX_PAGE_MASKS = 32768 # 2^32 / PAGE_SIZE / 32
# 1 mask = 32 pages = 128k

# pointer: 48bit = 9bit in L4 + 9bit in PDPT + 9bit in PDT + 9bit in PT + 12bit offset in page
# 1 L4 => ...
# 1 page directory pointer table => 512G
# 1 page directory table => 1G
# 1 page table => 2M
# 1 page => 4K

# 1 PDT (=1G) seems enough for now

# PageRoot(L4) -> PageDirectoryPointerTable -> PageDirectoryTable -> PageTable -> Page

class Page as @noauto
	var e: int64[PAGE_TABLE_ENTRIES]
	
	func mut clear()
		for i in 0:PAGE_TABLE_ENTRIES
			e[i] = 0

class PageTable extends Page
	func count_entries() -> int
		var num_entries = 0
		for ee in e
			if ee != 0
				num_entries ++
		return num_entries
		
	func get_sub(index: int) -> PageTable*
		return _i2p(e[index] & 0xfffff000) as PageTable*
	
	func mut get_or_create_sub(index: int, flags: int) -> PageTable&
		if e[index] == 0
			let pos = Paging.alloc_page()
			var sub = _i2p(pos) as PageTable&
			sub.clear()
			e[index] = pos + flags
			return sub
		else
			return _i2p(e[index] & 0xfffff000) as PageTable&

func page_params(addr: int64) -> (int,int,int,int)
	let dirp_no = int(addr >> 30)
	let dir_no = int(addr >> 21) & 0x000001ff # 512 dirs
	let page_no = int (addr >> 12) & 0x000001ff
	let offset = int(addr) & 0x00000fff
	return (dirp_no, dir_no, page_no, offset)

class PageRootTable extends PageTable

	# source = task-space
	# dest = kernel-space
	# (does not allocate pages, but page tables)
	func mut map_lin(_source: int64, _dest: int64, size: int, writable: bool)
		let source = _source & 0xfffffffffffff000
		var dest = _dest & 0xfffffffffffff000
		var (dirp_no, dir_no, page_no, offset) = page_params(source)
		var npages = ceil_quot(size, PAGE_SIZE)
		var flags = 5
		if writable
			flags = 7

		var pdpt = get_or_create_sub(0, flags)
		var pdt = pdpt.get_or_create_sub(0, flags)
			
		while npages > 0
			var pt = pdt.get_or_create_sub(dir_no, flags)
			
			# pages
			var i0 = page_no
			var i1 = page_no + npages
			if i1 > PAGE_TABLE_ENTRIES
				i1 = PAGE_TABLE_ENTRIES
			for i in i0:i1
				if pt.e[i] != 0
					panic("double map")
				pt.e[i] = dest + flags
				dest += PAGE_SIZE
			npages -= i1-i0
			dir_no ++
			page_no = 0

	# start = task-space
	func mut map_by_alloc(_start: int, size: int, writable: bool) -> bool
		var start = _start & 0xfffff000
		var (dirp_no, dir_no, page_no, offset) = page_params(start)
		var npages = ceil_quot(size, PAGE_SIZE)
		var flags = 5
		if writable
			flags = 7

		var pdpt = get_or_create_sub(0, flags)
		var pdt = pdpt.get_or_create_sub(0, flags)
		
		while npages > 0
			var pt = pdt.get_or_create_sub(dir_no, flags)
			
			# pages
			var i0 = page_no
			var i1 = page_no + npages
			if i1 > PAGE_TABLE_ENTRIES
				i1 = PAGE_TABLE_ENTRIES
			for i in i0:i1
				let dest = Paging.alloc_page()
				if dest == -1
					unmap(start, size, true)
					return false
				pt.e[i] = dest + flags
			npages -= i1-i0
			dir_no ++
			page_no = 0
		return true
	
	func mut unmap(_start: int, size: int, dealloc: bool)
		panic("TODO: Paging.unmap()")
		var start = _start & 0xfffff000
		var (dirp_no, dir_no, page_no, offset) = page_params(start)
		var npages = ceil_quot(size, PAGE_SIZE)

		for pdpt in get_sub(0)
			for pdt in pdpt.get_sub(0)
		
				while npages > 0
					#var pt = pdt.get_sub(dir_no)
					#if not pt
					#	return
			
					let pt_pos = e[dir_no] & 0xfffff000
					var pt = _i2p(pt_pos) as PageTable&
					let i0 = page_no
					var i1 = page_no + npages
					if i1 > PAGE_TABLE_ENTRIES
						i1 = PAGE_TABLE_ENTRIES
					for i in i0:i1
						if pt.e[i] != 0
							if dealloc
								Paging.free_page(pt.e[i] & 0xfffff000)
							pt.e[i] = 0
					if pt.count_entries() == 0
						Paging.free_page(pt_pos)
					npages -= i1-i0
					dir_no ++
					page_no = 0
	
	func find_free_space(_start: int, size: int) -> int
		panic("TODO: Paging.find_free_space()")
		var start = (_start & 0xfffff000)
		var (dirp_no, dir_no, page_no, offset) = page_params(start)
		let npages = ceil_quot(size, PAGE_SIZE)
		var still_need = npages
		var pos = start
		while page_no < PAGE_TABLE_ENTRIES
			let pt_pos = e[dir_no] & 0xfffff000
			var pt = _i2p(pt_pos) as PageTable&
			let i0 = page_no
			if pt
				for i in i0:PAGE_TABLE_ENTRIES
					if pt.e[i] == 0
						still_need --
						if still_need == 0
							return start
					else
						# restart search
						still_need = npages
						start = pos + PAGE_SIZE
					pos += PAGE_SIZE
			else
				let n = PAGE_TABLE_ENTRIES - i0
				still_need -= n
				pos += n * PAGE_SIZE
				if still_need <= 0
					return start
			dir_no ++
			page_no = 0
		return -1

	func addr2kernel(addr: int) -> int
		var (dirp_no, dir_no, page_no, offset) = page_params(addr)
		for pdpt in get_sub(0)
			for pdt in pdpt.get_sub(0)
				for pt in pdt.get_sub(dir_no)
					let n = pt.e[page_no] & 0xfffff000
					if n == 0
						return 0
					return n + offset
		return 0

	func memcpy2kernel(_o: void&, _addr: int, _size: int) -> bool
		panic("TODO: memcpy2kernel()")
		var o = _o as cstring&
		var addr = _addr
		var size = _size
		while size > 0
			let kaddr = addr2kernel(addr)
			if kaddr == 0
				return false
			var pp = _i2p(kaddr) as cstring&
			var offset = addr & 0xfffff000
			var num = PAGE_SIZE - offset
			if num > size
				num = size
			for i in 0:num
				o[i] = pp[i]
			addr += num
			size -= num
			o := &o[num]
		return true

	func memcpy2task(_addr: int, _p: void*, _size: int) -> bool
		panic("TODO: memcpy2task()")
		var addr = _addr
		var size = _size
		var p = _p as cstring&
		while size > 0
			let kaddr = addr2kernel(addr)
			if kaddr == 0
				return false
			var pp = _i2p(kaddr) as cstring&
			var offset = addr & 0xfffff000
			var num = PAGE_SIZE - offset
			if num > size
				num = size
			for i in 0:num
				pp[i] = p[i]
			addr += num
			size -= num
			p := &p[num]
		return true
	
	func copy_pages_to(out dest: PageRootTable&, start1: int, start2: int, size: int)
		panic("TODO: copy_pages_to()")
		var (dirp_no1, dir_no1, page_no1, offset1) = page_params(start1)
		var (dirp_no2, dir_no2, page_no2, offset2) = page_params(start2)
		var npages = ceil_quot(size, PAGE_SIZE)
		var pt1 = _i2p(e[dir_no1] & 0xfffff000) as PageTable&
		#int n = pt.e[page_no] & 0xfffff000
		var pt2 = _i2p(dest.e[dir_no2] & 0xfffff000) as PageTable&
		#int n = pt.e[page_no] & 0xfffff000
		while npages > 0
			var pout = _i2p(pt2.e[page_no2] & 0xfffff000)
			memcpy(pout, _i2p(pt1.e[page_no1] & 0xfffff000), PAGE_SIZE)
			page_no1 ++
			if page_no1 >= PAGE_SIZE
				page_no1 = 0
				dir_no1 ++
				pt1 := _i2p(e[dir_no1] & 0xfffff000)
			page_no2 ++
			if page_no2 >= PAGE_SIZE
				page_no2 = 0
				dir_no2 ++
				pt2 := _i2p(dest.e[dir_no2] & 0xfffff000)
			npages --
	
#	func show()
#		printh(&self, 64)
#		prints("...\n")
#		for i in 0:4
#			var pt: PageTable* = _i2p(e[i] & 0xfffff000)
#			printh(pt, 64)
#			prints("...\n")

class Paging as @noauto
	var static mask: int[MAX_PAGE_MASKS]
	var static num_masks: int
	var static pages_allocated: int
	var static pages_usable: int
	var static kernel_root_table: PageRootTable&
	func static init()
		prints("enable paging...")
		num_masks = MemorySize / PAGE_SIZE / 32
		MemorySize = num_masks * PAGE_SIZE * 32 # easier memory management...
		for i in 0:num_masks
			mask[i] = 0
		
		# reserve 8mb for kernel
		for i in 0:64
			mask[i] = 0xffffffff
		
		mark_by_bios()
		
		pages_allocated = 0
		pages_usable = 0
			
		# kernel: flat paging
		#let nmax = MemorySize / PAGE_SIZE / 1024
		kernel_root_table := create_root_table()
		kernel_root_table.map_lin(0, 0, MemorySize, true)
	
		asm{
			#mov eax, cr3
			mov rax, Paging.kernel_root_table
			mov cr3, eax
			# enable paging
			mov eax, cr0
			or eax, 0x80000000
			mov cr0, eax
		
			# flush cpu prefetch
			jmp _flush
			_flush:
		}
		prints("  ok\n")
		
	
	func static mark_by_bios()
		for i=>m in bios_mem_map
			if m.type < 0
				break
			if m.type == 1
				continue
			
			let p0 = m.offset / PAGE_SIZE
			let p1 = ceil_quot(m.offset + m.size, PAGE_SIZE)
			alloc_chunk(p0 * PAGE_SIZE, (p1 - p0) * PAGE_SIZE, false)
	
	# does not clear
	func static alloc_page() -> int
		var ok = true
		for i in 0:num_masks
			if mask[i] == 0xffffffff
				continue
			for j in 0:32
				let m = 1 << j
				if (mask[i] & m) == 0
					mask[i] = mask[i] | m
					pages_allocated ++
					let pos = (i * 32 + j) * PAGE_SIZE
					return pos
		return -1
	
	func static free_page(pos: int)
		let page_no = pos / PAGE_SIZE
		let mask_no = page_no / 32
		if mask_no > num_masks or mask_no < 0
			return
		let offset = page_no & 0x0000001f # % 32
		let m = 1 << offset
		if (mask[mask_no] & m) != 0
			pages_allocated ++
			mask[mask_no] -= m
		else
			prints("  -e-  ")
			printh(&mask[mask_no], 4)
			prints("  ")
			printh(&m, 4)
			prints("  ")
			printi(pos)
			prints(" ")
			printi(mask_no)
			prints(" ")
			printi(offset)
			panic("invalid free page")
			
	func static find_and_alloc_chunk(size: int) -> int
		let num_pages_req = ceil_quot(size, PAGE_SIZE)
		let num_masks_req = ceil_quot(num_pages_req, 32)
		for i in 0:num_masks-num_masks_req
			var ok = true
			for j in 0:num_masks_req
				if mask[i+j] != 0
					ok = false
					break
			if ok
				for j in 0:num_masks_req
					mask[i+j] = 0xffffffff
				return i * PAGE_SIZE * 32
		return 0
	
	func static alloc_chunk(pos: int, size: int, test_free: bool) -> bool
		if (pos & 0x00000fff) != 0
			return false
		if size == 0
			return true
		let npages = ceil_quot(size, PAGE_SIZE)
		
		# which pages/masks?
		var p0 = pos >> 12
		var p1 = p0 + npages - 1 # inclusive
		
		let m0 = p0 >> 5
		let m1 = p1 >> 5
		p0 = p0 & 0x0000001f
		p1 = p1 & 0x0000001f
		
		# boundary masks
		var mask0 = 0xffffffff << p0
		let mask1 = 0xffffffff >> (32 - p1 - 1)
		
		# special case
		if m0 == m1
			mask0 = mask0 & mask1
			if test_free
				if (mask[m0] & mask0) != 0
					return false
				pages_allocated += npages
			mask[m0] = mask[m0] | mask0
			return true
		
		if test_free
			# free?
			if (mask[m0] & mask0) != 0
				return false
			if (mask[m1] & mask1) != 0
				return false
			for m in m0+1:m1
				if mask[m] != 0
					return false
		
		# allocate
		mask[m0] = mask[m0] | mask0
		mask[m1] = mask[m1] | mask1
		for m in m0+1:m1
			mask[m] = 0xffffffff
		if test_free
			pages_allocated += npages
		return true

	func static free_chunk(pos: int, size: int) -> bool
		if (pos & 0x00000fff) != 0
			return false
		if size == 0
			return true
		let npages = ceil_quot(size, PAGE_SIZE)
		
		# which pages/masks?
		var p0 = pos >> 12
		var p1 = p0 + npages
		let m0 = p0 >> 5
		let m1 = p1 >> 5
		p0 = p0 & 0x0000001f
		p1 = p1 & 0x0000001f
		
		# boundary masks
		let mask0 = 0xffffffff >> (32 - p0)
		let mask1 = 0xffffffff << p1
		
		# special case
		if m0 == m1
			mask[m0] = mask[m0] & mask0
			pages_allocated -= npages
			return true
		
		# free
		mask[m0] = mask[m0] & mask0
		mask[m1] = mask[m1] & mask1
		for m in m0+1:m1
			mask[m] = 0
		pages_allocated -= npages
		return true

	func static get_used() -> int
		var n = 0
		for i in 0:num_masks
			if mask[i] == 0
				continue
			if mask[i] == 0xffffffff
				n += 32
			else
				for j in 0:32
					let m = 1 << j
					if (mask[i] & m) > 0
						n ++
		return n * PAGE_SIZE
	
	func static create_root_table() -> PageRootTable&
		let pos = alloc_page()
		if pos == -1
			panic("can not create page root table")
		var pd = _i2p(pos) as PageRootTable&
		pd.clear()
		return pd



func show_mem_map()
	for i=>m in bios_mem_map
		if m.type < 0
			break
		printh(&m.offset, 4)
		prints("    ")
		printh(&m.size, 4)
		prints("    ")
		if m.type == 1
			prints("free")
		else if m.type == 2
			prints("used-2")
		else if m.type == 3
			prints("used-3")
		else if m.type == 4
			prints("used-4")
		else if m.type == 5
			prints("BAD")
		else
			printh(&m.type, 1)
		prints("\n")

