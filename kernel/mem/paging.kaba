use common
use io.text
use mem.memory
use mem.heap

let PAGE_SIZE = 4096
let PAGE_TABLE_ENTRIES = PAGE_SIZE / 8 #512
let PAGE_TABLES_OFFSET = 0x00700000
#let LINEAR_AREA = 0x01000000 # 16mb linearly mapped
let MAX_PAGE_MASKS = 32768 # 2^32 / PAGE_SIZE / 32
# 1 mask = 32 pages = 128k

# pointer: 48bit = 9bit in L4 + 9bit in PDPT + 9bit in PDT + 9bit in PT + 12bit offset in page
# 1 L4 => ...
# 1 page directory pointer table => 512G
# 1 page directory table => 1G
# 1 page table => 2M
# 1 page => 4K

# 1 PDT (=1G) seems enough for now

# PageRoot(L4) -> PageDirectoryPointerTable -> PageDirectoryTable -> PageTable -> Page

class Page as @noauto
	var e: int64[PAGE_TABLE_ENTRIES]
	
	func mut clear()
		for i in 0:PAGE_TABLE_ENTRIES
			e[i] = 0

enum PageFlags as @noauto
	PRESENT = 0x100
	GLOBAL = 0x01
	WRITABLE = 0x02
	USER = 0x04


class PageTable extends Page
	func count_entries() -> int
		var num_entries = 0
		for ee in e
			if ee != 0
				num_entries ++
		return num_entries
		
	func get_sub(index: int) -> PageTable*
		return _i642p(e[index] & 0xfffffffffffff000) as PageTable*
	
	func mut get_or_create_sub(index: int, flags: PageFlags) -> PageTable&
		if e[index] == 0
			let pos = Paging.reserve_physical_page()
			var sub = _i642p(pos) as PageTable&
			sub.clear()
			e[index] = pos + int(flags)
			return sub
		else
			return _i642p(e[index] & 0xfffffffffffff000) as PageTable&


# split virtual address -> page indices
func page_params(vaddr: int64) -> (int,int,int,int)
	let dirp_no = int(vaddr >> 30)
	let dir_no = int(vaddr >> 21) & 0x000001ff # 512 dirs
	let page_no = int (vaddr >> 12) & 0x000001ff
	let offset = int(vaddr) & 0x00000fff
	return (dirp_no, dir_no, page_no, offset)

class PageRootTable extends PageTable

	# (does not reserve pages, but page tables)
	func mut map_linear(_vaddr: int64, _paddr: int64, size: int, _flags: PageFlags)
		let vaddr = _vaddr & 0xfffffffffffff000
		var paddr = _paddr & 0xfffffffffffff000
		var (dirp_no, dir_no, page_no, offset) = page_params(vaddr)
		var npages = ceil_quot(size, PAGE_SIZE)
		var table_flags = PageFlags.PRESENT | PageFlags.WRITABLE | PageFlags.GLOBAL | PageFlags.USER
		let flags = _flags | PageFlags.PRESENT | PageFlags.GLOBAL | PageFlags.USER
		
		var pdpt = get_or_create_sub(0, table_flags)
		var pdt = pdpt.get_or_create_sub(dirp_no, table_flags)
		
		while npages > 0
			var pt = pdt.get_or_create_sub(dir_no, table_flags)
			
			# pages
			var i0 = page_no
			var i1 = page_no + npages
			if i1 > PAGE_TABLE_ENTRIES
				i1 = PAGE_TABLE_ENTRIES
			for i in i0:i1
				if pt.e[i] != 0
					panic("double map")
				pt.e[i] = paddr + int(flags)
				paddr += PAGE_SIZE
			npages -= i1-i0
			dir_no ++
			page_no = 0

	func mut map_by_alloc(_vaddr: int, size: int, _flags: PageFlags) -> bool
		var vaddr = _vaddr & 0xfffff000
		var (dirp_no, dir_no, page_no, offset) = page_params(vaddr)
		var npages = ceil_quot(size, PAGE_SIZE)
		let table_flags = PageFlags.PRESENT + PageFlags.WRITABLE + PageFlags.GLOBAL | PageFlags.USER
		let flags = _flags | PageFlags.PRESENT | PageFlags.GLOBAL | PageFlags.USER

		var pdpt = get_or_create_sub(0, table_flags)
		var pdt = pdpt.get_or_create_sub(dirp_no, table_flags)
		
		while npages > 0
			var pt = pdt.get_or_create_sub(dir_no, table_flags)
			
			# pages
			var i0 = page_no
			var i1 = page_no + npages
			if i1 > PAGE_TABLE_ENTRIES
				i1 = PAGE_TABLE_ENTRIES
			for i in i0:i1
				let paddr = Paging.reserve_physical_page()
				if paddr == -1
					unmap(vaddr, size, true)
					return false
				pt.e[i] = paddr + int(flags)
			npages -= i1-i0
			dir_no ++
			page_no = 0
		return true
	
	func mut unmap(_vaddr: int, size: int, dealloc: bool)
		panic("TODO: Paging.unmap()")
		var vaddr = _vaddr & 0xfffff000
		var (dirp_no, dir_no, page_no, offset) = page_params(vaddr)
		var npages = ceil_quot(size, PAGE_SIZE)

		for pdpt in get_sub(0)
			for pdt in pdpt.get_sub(dirp_no)
		
				while npages > 0
					#var pt = pdt.get_sub(dir_no)
					#if not pt
					#	return
			
					let pt_pos = e[dir_no] & 0xfffff000
					var pt = _i2p(pt_pos) as PageTable&
					let i0 = page_no
					var i1 = page_no + npages
					if i1 > PAGE_TABLE_ENTRIES
						i1 = PAGE_TABLE_ENTRIES
					for i in i0:i1
						if pt.e[i] != 0
							if dealloc
								Paging.free_physical_page(pt.e[i] & 0xfffff000)
							pt.e[i] = 0
					if pt.count_entries() == 0
						Paging.free_physical_page(pt_pos)
					npages -= i1-i0
					dir_no ++
					page_no = 0
	
	# ???
	func find_free_space(_start: int, size: int) -> int
		panic("TODO: Paging.find_free_space()")
		var start = (_start & 0xfffff000)
		var (dirp_no, dir_no, page_no, offset) = page_params(start)
		let npages = ceil_quot(size, PAGE_SIZE)
		var still_need = npages
		var pos = start
		while page_no < PAGE_TABLE_ENTRIES
			let pt_pos = e[dir_no] & 0xfffff000
			var pt = _i2p(pt_pos) as PageTable&
			let i0 = page_no
			if pt
				for i in i0:PAGE_TABLE_ENTRIES
					if pt.e[i] == 0
						still_need --
						if still_need == 0
							return start
					else
						# restart search
						still_need = npages
						start = pos + PAGE_SIZE
					pos += PAGE_SIZE
			else
				let n = PAGE_TABLE_ENTRIES - i0
				still_need -= n
				pos += n * PAGE_SIZE
				if still_need <= 0
					return start
			dir_no ++
			page_no = 0
		return -1

	func virtual_to_physical(addr: int64) -> int64
		var (dirp_no, dir_no, page_no, offset) = page_params(addr)
		for pdpt in get_sub(0)
			for pdt in pdpt.get_sub(dirp_no)
				for pt in pdt.get_sub(dir_no)
					let n = pt.e[page_no] & 0xfffffffffffff000
					if n == 0
						return 0
					return n + offset
		return 0
	
	# TODO rethink
	func addr2kernel(addr: int) -> int
		return addr

	# TODO rethink
	func memcpy2kernel(_o: void&, _addr: int, _size: int) -> bool
		panic("TODO: memcpy2kernel()")
#		var o = _o as cstring&
#		var addr = _addr
#		var size = _size
#		while size > 0
#			let kaddr = addr2kernel(addr)
#			if kaddr == 0
#				return false
#			var pp = _i2p(kaddr) as cstring&
#			var offset = addr & 0xfffff000
#			var num = PAGE_SIZE - offset
#			if num > size
#				num = size
#			for i in 0:num
#				o[i] = pp[i]
#			addr += num
#			size -= num
#			o := &o[num]
#		return true

	# TODO rethink
	func memcpy2task(_addr: int, _p: void*, _size: int) -> bool
		panic("TODO: memcpy2task()")
#		var addr = _addr
#		var size = _size
#		var p = _p as cstring&
#		while size > 0
#			let kaddr = addr2kernel(addr)
#			if kaddr == 0
#				return false
#			var pp = _i2p(kaddr) as cstring&
#			var offset = addr & 0xfffff000
#			var num = PAGE_SIZE - offset
#			if num > size
#				num = size
#			for i in 0:num
#				pp[i] = p[i]
#			addr += num
#			size -= num
#			p := &p[num]
#		return true
	
	func copy_pages_to(out dest: PageRootTable&, start1: int, start2: int, size: int)
		panic("TODO: copy_pages_to()")
#		var (dirp_no1, dir_no1, page_no1, offset1) = page_params(start1)
#		var (dirp_no2, dir_no2, page_no2, offset2) = page_params(start2)
#		var npages = ceil_quot(size, PAGE_SIZE)
#		var pt1 = _i2p(e[dir_no1] & 0xfffff000) as PageTable&
#		#int n = pt.e[page_no] & 0xfffff000
#		var pt2 = _i2p(dest.e[dir_no2] & 0xfffff000) as PageTable&
#		#int n = pt.e[page_no] & 0xfffff000
#		while npages > 0
#			var pout = _i2p(pt2.e[page_no2] & 0xfffff000)
#			memcpy(pout, _i2p(pt1.e[page_no1] & 0xfffff000), PAGE_SIZE)
#			page_no1 ++
#			if page_no1 >= PAGE_SIZE
#				page_no1 = 0
#				dir_no1 ++
#				pt1 := _i2p(e[dir_no1] & 0xfffff000)
#			page_no2 ++
#			if page_no2 >= PAGE_SIZE
#				page_no2 = 0
#				dir_no2 ++
#				pt2 := _i2p(dest.e[dir_no2] & 0xfffff000)
#			npages --
	
#	func show()
#		printh(&self, 64)
#		prints("...\n")
#		for i in 0:4
#			var pt: PageTable* = _i2p(e[i] & 0xfffff000)
#			printh(pt, 64)
#			prints("...\n")

class Paging as @noauto
	var static physical_mask: int[MAX_PAGE_MASKS]
	var static num_physical_masks: int
	var static pages_allocated: int
	var static pages_usable: int
	var static kernel_root_table: PageRootTable&

	func static init()
		prints("enable paging...")
		
		# test read 24m ID-mapped by init
#		for i in 0:0x01800000:4
#			var p = _i2p(i) as int&
#			var x: int = p

		
		num_physical_masks = memory_size / PAGE_SIZE / 32
		memory_size = num_physical_masks * PAGE_SIZE * 32 # easier memory management...
		for i in 0:num_physical_masks
			physical_mask[i] = 0
		
		# reserve 8mb for kernel
		for i in 0:(KERNEL_MEMORY_SIZE / PAGE_SIZE / 32)
			physical_mask[i] = 0xffffffff
		
		mark_reserved_by_bios()
		
		pages_allocated = 0
		pages_usable = 0
			
		# kernel: flat paging
		#let nmax = MemorySize / PAGE_SIZE / 1024
		kernel_root_table := create_root_table()
		kernel_root_table.map_linear(0, 0, memory_size, PageFlags.WRITABLE)
	
		asm{
			#mov eax, cr3
			mov rax, Paging.kernel_root_table
			mov cr3, eax
			# enable paging
			mov eax, cr0
			or eax, 0x80000000
			mov cr0, eax
		
			# flush cpu prefetch
			jmp _flush
			_flush:
		}
		
		# test read all memory
#		for i in 0:memory_size:4
#			var p = _i2p(i) as int&
#			var x: int = p

		prints("  ok\n")
		
	
	func static mark_reserved_by_bios()
		for i=>m in bios_mem_map
			#printi(m.type)
			#prints("  ")
			#continue
			if m.type < 0
				break
			if m.type == 1
				continue
			
			let p0 = m.offset / PAGE_SIZE
			let p1 = ceil_quot(m.offset + m.size, int64(PAGE_SIZE))
			#printh(&m.offset, 8)
			#prints("  ")
			#printh(&p0, 8)
			#prints("  ")
			#printh(&p1, 8)
			#prints("  ")
			#printi(m.size)
			#prints("\n")
			reserve_physical_chunk(p0 * PAGE_SIZE, (p1 - p0) * PAGE_SIZE, false)
	
	# does not clear
	func static reserve_physical_page() -> int
		#prints(" RP ")
		for i in 0:num_physical_masks
			if physical_mask[i] == 0xffffffff
				continue
			for j in 0:32
				let m = 1 << j
				if (physical_mask[i] & m) == 0
					physical_mask[i] = physical_mask[i] | m
					pages_allocated ++
					let pos = (i * 32 + j) * PAGE_SIZE
					return pos
		return -1
	
	func static free_physical_page(paddr: int)
		let page_no = paddr / PAGE_SIZE
		let mask_no = page_no / 32
		if mask_no > num_physical_masks or mask_no < 0
			return
		let offset = page_no & 0x0000001f # % 32
		let m = 1 << offset
		if (physical_mask[mask_no] & m) != 0
			pages_allocated ++
			physical_mask[mask_no] -= m
		else
			prints("  -e-  ")
			printh(&physical_mask[mask_no], 4)
			prints("  ")
			printh(&m, 4)
			prints("  ")
			printi(paddr)
			prints(" ")
			printi(mask_no)
			prints(" ")
			printi(offset)
			panic("invalid free page")
			
	func static find_and_reserve_chunk(size: int) -> int
		let num_pages_req = ceil_quot(size, PAGE_SIZE)
		let num_masks_req = ceil_quot(num_pages_req, 32)
		for i in 0:num_physical_masks - num_masks_req
			var ok = true
			for j in 0:num_masks_req
				if physical_mask[i+j] != 0
					ok = false
					break
			if ok
				for j in 0:num_masks_req
					physical_mask[i+j] = 0xffffffff
				return i * PAGE_SIZE * 32
		return 0
	
	func static reserve_physical_chunk(paddr: int, size: int, test_free: bool) -> bool
		if (paddr & 0x00000fff) != 0
			return false
		if size == 0
			return true
		let npages = ceil_quot(size, PAGE_SIZE)
		
		# which pages/masks?
		var p0 = paddr >> 12
		var p1 = p0 + npages - 1 # inclusive
		
		let m0 = p0 >> 5
		let m1 = p1 >> 5
		p0 = p0 & 0x0000001f
		p1 = p1 & 0x0000001f
		
		# boundary masks
		var mask0 = 0xffffffff << p0
		let mask1 = 0xffffffff >> (32 - p1 - 1)
		
		# special case
		if m0 == m1
			mask0 = mask0 & mask1
			if test_free
				if (physical_mask[m0] & mask0) != 0
					return false
				pages_allocated += npages
			physical_mask[m0] = physical_mask[m0] | mask0
			return true
		
		if test_free
			# free?
			if (physical_mask[m0] & mask0) != 0
				return false
			if (physical_mask[m1] & mask1) != 0
				return false
			for m in m0+1:m1
				if physical_mask[m] != 0
					return false
		
		# allocate
		physical_mask[m0] = physical_mask[m0] | mask0
		physical_mask[m1] = physical_mask[m1] | mask1
		for m in m0+1:m1
			physical_mask[m] = 0xffffffff
		if test_free
			pages_allocated += npages
		return true

	func static free_chunk(paddr: int, size: int) -> bool
		if (paddr & 0x00000fff) != 0
			return false
		if size == 0
			return true
		let npages = ceil_quot(size, PAGE_SIZE)
		
		# which pages/masks?
		var p0 = paddr >> 12
		var p1 = p0 + npages
		let m0 = p0 >> 5
		let m1 = p1 >> 5
		p0 = p0 & 0x0000001f
		p1 = p1 & 0x0000001f
		
		# boundary masks
		let mask0 = 0xffffffff >> (32 - p0)
		let mask1 = 0xffffffff << p1
		
		# special case
		if m0 == m1
			physical_mask[m0] = physical_mask[m0] & mask0
			pages_allocated -= npages
			return true
		
		# free
		physical_mask[m0] = physical_mask[m0] & mask0
		physical_mask[m1] = physical_mask[m1] & mask1
		for m in m0+1:m1
			physical_mask[m] = 0
		pages_allocated -= npages
		return true

	func static get_used() -> int
		var n = 0
		for i in 0:num_physical_masks
			if physical_mask[i] == 0
				continue
			if physical_mask[i] == 0xffffffff
				n += 32
			else
				for j in 0:32
					let m = 1 << j
					if (physical_mask[i] & m) > 0
						n ++
		return n * PAGE_SIZE
	
	# hmmm, this assumes we are still in linear space...
	func static create_root_table() -> PageRootTable&
		let paddr = reserve_physical_page()
		if paddr == -1
			panic("can not create page root table")
		var pd = _i2p(paddr) as PageRootTable&
		pd.clear()
		return pd
