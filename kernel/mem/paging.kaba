use "../base.kaba"
use "../io/text.kaba"
use "heap.kaba"

const int PAGE_SIZE = 4096
const int PAGE_TABLE_ENTRIES = 1024
const int MAX_PAGE_MASKS = 32768 // 2^32 / PAGE_SIZE / 32
// 1 mask = 32 pages = 128k

//const int KERNEL_PAGE_DIRECTORY = 0x00200000
PageDirectory *KernelPageDir

class Page
	int[PAGE_TABLE_ENTRIES] e
	
	void clear()
		for i in 0:PAGE_TABLE_ENTRIES
			e[i] = 0

class PageTable extends Page
	
	int count_entries()
		int num_entries = 0
		for ee in e
			if ee != 0
				num_entries ++
		return num_entries

void page_params(int addr, int* dir_no, int* page_no, int* offset)
	*dir_no = addr >> 22
	*page_no = (addr >> 12) & 0x000003ff
	*offset = addr & 0x00000fff

class PageDirectory extends PageTable

	// source = task-space
	// dest = kernel-space
	// (does not allocate pages)
	void map_lin(int source, int dest, int size, bool writable)
		source = source & 0xfffff000
		dest = dest & 0xfffff000
		int dir_no, page_no, offset
		page_params(source, &dir_no, &page_no, &offset)
		int npages = ceil_quot(size, PAGE_SIZE)
		int flags = 5
		if writable
			flags = 7
		while npages > 0
			PageTable *pt
			if e[dir_no] == 0
				int pos = paging.alloc_page()
				pt = _i2p(pos)
				pt.clear()
				e[dir_no] = pos + flags
			else
				pt = _i2p(e[dir_no] & 0xfffff000)
			int i0 = page_no
			int i1 = page_no + npages
			if i1 > PAGE_TABLE_ENTRIES
				i1 = PAGE_TABLE_ENTRIES
			for i in i0:i1
				if pt.e[i] != 0
					panic("double map")
				pt.e[i] = dest + flags
				dest += PAGE_SIZE
			npages -= i1-i0
			dir_no ++
			page_no = 0

	// start = task-space
	bool map_by_alloc(int start, int size, bool writable)
		start = start & 0xfffff000
		int dir_no, page_no, offset
		page_params(start, &dir_no, &page_no, &offset)
		int npages = ceil_quot(size, PAGE_SIZE)
		int flags = 5
		if writable
			flags = 7
		while npages > 0
			PageTable *pt
			if e[dir_no] == 0
				int pos = paging.alloc_page()
				pt = _i2p(pos)
				pt.clear()
				e[dir_no] = pos + flags
			else
				pt = _i2p(e[dir_no] & 0xfffff000)
			int i0 = page_no
			int i1 = page_no + npages
			if i1 > PAGE_TABLE_ENTRIES
				i1 = PAGE_TABLE_ENTRIES
			for i in i0:i1
				int dest = paging.alloc_page()
				if dest == -1
					unmap(start, size, true)
					return false
				pt.e[i] = dest + flags
			npages -= i1-i0
			dir_no ++
			page_no = 0
		return true
	
	void unmap(int start, int size, bool dealloc)
		start = start & 0xfffff000
		int dir_no, page_no, offset
		page_params(start, &dir_no, &page_no, &offset)
		int npages = ceil_quot(size, PAGE_SIZE)
		while npages > 0
			int pt_pos = e[dir_no] & 0xfffff000
			PageTable *pt = _i2p(pt_pos)
			int i0 = page_no
			int i1 = page_no + npages
			if i1 > PAGE_TABLE_ENTRIES
				i1 = PAGE_TABLE_ENTRIES
			for i in i0:i1
				if pt.e[i] != 0
					if dealloc
						paging.free_page(pt.e[i] & 0xfffff000)
					pt.e[i] = 0
			if pt.count_entries() == 0
				paging.free_page(pt_pos)
			npages -= i1-i0
			dir_no ++
			page_no = 0
	
	int find_free_space(int start, int size)
		start = (start & 0xfffff000)
		int dir_no, page_no, offset
		page_params(start, &dir_no, &page_no, &offset)
		int npages = ceil_quot(size, PAGE_SIZE)
		int still_need = npages
		int pos = start
		while page_no < PAGE_TABLE_ENTRIES
			int pt_pos = e[dir_no] & 0xfffff000
			PageTable *pt = _i2p(pt_pos)
			int i0 = page_no
			if pt
				for i in i0:PAGE_TABLE_ENTRIES
					if pt.e[i] == 0
						still_need --
						if still_need == 0
							return start
					else
						// restart search
						still_need = npages
						start = pos + PAGE_SIZE
					pos += PAGE_SIZE
			else
				int n = PAGE_TABLE_ENTRIES - i0
				still_need -= n
				pos += n * PAGE_SIZE
				if still_need <= 0
					return start
			dir_no ++
			page_no = 0
		return -1

	int addr2kernel(int addr)
		int dir_no, page_no, offset
		page_params(addr, &dir_no, &page_no, &offset)
		PageTable *pt = _i2p(e[dir_no] & 0xfffff000)
		int n = pt.e[page_no] & 0xfffff000
		return n + offset

	bool memcpy2kernel(cstring *o, int addr, int size)
		while size > 0
			int dir_no, page_no, offset
			page_params(addr, &dir_no, &page_no, &offset)
			if e[dir_no] == 0
				return false
			int n = e[dir_no] & 0xfffff000
			PageTable *pt = _i2p(n)
			if pt.e[page_no] == 0
				return false
			n = pt.e[page_no] & 0xfffff000
			cstring *pp = _i2p(n + offset)
			int num = PAGE_SIZE - offset
			if num > size
				num = size
			for i in 0:num
				o[i] = pp[i]
			addr += num
			size -= num
			o = &o[num]
		return true

	bool memcpy2task(int addr, cstring *p, int size)
		while size > 0
			int dir_no, page_no, offset
			page_params(addr, &dir_no, &page_no, &offset)
			if e[dir_no] == 0
				return false
			int n = e[dir_no] & 0xfffff000
			PageTable *pt = _i2p(n)
			if pt.e[page_no] == 0
				return false
			n = pt.e[page_no] & 0xfffff000
			cstring *pp = _i2p( n + offset)
			int num = PAGE_SIZE - offset
			if num > size
				num = size
			for i in 0:num
				pp[i] = p[i]
			addr += num
			size -= num
		return true
	
	void copy_pages_to(PageDirectory* dest, int start1, int start2, int size)
		int dir_no1, page_no1, offset1
		page_params(start1, &dir_no1, &page_no1, &offset1)
		int dir_no2, page_no2, offset2
		page_params(start2, &dir_no2, &page_no2, &offset2)
		int npages = ceil_quot(size, PAGE_SIZE)
		PageTable *pt1 = _i2p(e[dir_no1] & 0xfffff000)
		//int n = pt.e[page_no] & 0xfffff000
		PageTable *pt2 = _i2p(dest.e[dir_no2] & 0xfffff000)
		//int n = pt.e[page_no] & 0xfffff000
		while npages > 0
			memcpy(_i2p(pt2.e[page_no2] & 0xfffff000), _i2p(pt1.e[page_no1] & 0xfffff000), PAGE_SIZE)
			page_no1 ++
			if page_no1 >= PAGE_SIZE
				page_no1 = 0
				dir_no1 ++
				pt1 = _i2p(e[dir_no1] & 0xfffff000)
			page_no2 ++
			if page_no2 >= PAGE_SIZE
				page_no2 = 0
				dir_no2 ++
				pt2 = _i2p(dest.e[dir_no2] & 0xfffff000)
			npages --
	
	void show()
		printh(self, 64)
		prints("...\n")
		for i in 0:4
			PageTable *pt = _i2p(e[i] & 0xfffff000)
			printh(pt, 64)
			prints("...\n")

class PageController
	int[MAX_PAGE_MASKS] mask
	int num_masks
	int pages_allocated
	int pages_usable
	void init()
		prints("enable paging...")
		num_masks = MemorySize / PAGE_SIZE / 32
		MemorySize = num_masks * PAGE_SIZE * 32 // easier memory management...
		for i in 0:num_masks
			mask[i] = 0
		
		// reserve 8mb for kernel
		for i in 0:64
			mask[i] = 0xffffffff
		
		mark_by_bios()
		
		pages_allocated = 0
		pages_usable = 0
			
		// kernel: flat paging
		int nmax = MemorySize / PAGE_SIZE / 1024
		KernelPageDir = create_page_directory()
		KernelPageDir.map_lin(0, 0, MemorySize, true)
	
		asm{
			mov eax, KernelPageDir
			mov cr3, eax
			mov eax, cr0
			or eax, 0x80000000
			mov cr0, eax
		
			// flush cpu prefetch
			jmp _flush
			_flush:
		}
		prints("  ok\n")
		
	
	void mark_by_bios()
		for m,i in bios_mem_map
			if m.type < 0
				break
			if m.type == 1
				continue
			
			int p0 = m.offset / PAGE_SIZE
			int p1 = ceil_quot(m.offset + m.size, PAGE_SIZE)
			alloc_chunk(p0 * PAGE_SIZE, (p1 - p0) * PAGE_SIZE, false)
	
	// does not clear
	int alloc_page()
		bool ok = true
		for i in 0:num_masks
			if mask[i] == 0xffffffff
				continue
			for j in 0:32
				int m = 1 << j
				if (mask[i] & m) == 0
					mask[i] = mask[i] | m
					pages_allocated ++
					int pos = (i * 32 + j) * PAGE_SIZE
					return pos
		return -1
	
	void free_page(int pos)
		int page_no = pos / PAGE_SIZE
		int mask_no = page_no / 32
		if mask_no > num_masks or mask_no < 0
			return
		int offset = page_no & 0x0000001f // % 32
		int m = 1 << offset
		if (mask[mask_no] & m) != 0
			pages_allocated ++
			mask[mask_no] -= m
		else
			prints("  -e-  ")
			printh(&mask[mask_no], 4)
			prints("  ")
			printh(&m, 4)
			prints("  ")
			printi(pos)
			prints(" ")
			printi(mask_no)
			prints(" ")
			printi(offset)
			panic("invalid free page")
			
	int find_and_alloc_chunk(int size)
		int num_pages_req = ceil_quot(size, PAGE_SIZE)
		int num_masks_req = ceil_quot(num_pages_req, 32)
		for i in 0:num_masks-num_masks_req
			bool ok = true
			for j in 0:num_masks_req
				if mask[i+j] != 0
					ok = false
					break
			if ok
				for j in 0:num_masks_req
					mask[i+j] = 0xffffffff
				return i * PAGE_SIZE * 32
		return 0
	
	bool alloc_chunk(int pos, int size, bool test_free)
		if (pos & 0x00000fff) != 0
			return false
		if size == 0
			return true
		int npages = ceil_quot(size, PAGE_SIZE)
		
		// which pages/masks?
		int p0 = pos >> 12
		int p1 = p0 + npages - 1 // inclusive
		
		int m0 = p0 >> 5
		int m1 = p1 >> 5
		p0 = p0 & 0x0000001f
		p1 = p1 & 0x0000001f
		
		// boundary masks
		int mask0 = 0xffffffff << p0
		int mask1 = 0xffffffff >> (32 - p1 - 1)
		
		// special case
		if m0 == m1
			mask0 = mask0 & mask1
			if test_free
				if (mask[m0] & mask0) != 0
					return false
				pages_allocated += npages
			mask[m0] = mask[m0] | mask0
			return true
		
		if test_free
			// free?
			if (mask[m0] & mask0) != 0
				return false
			if (mask[m1] & mask1) != 0
				return false
			for m in m0+1:m1
				if mask[m] != 0
					return false
		
		// allocate
		mask[m0] = mask[m0] | mask0
		mask[m1] = mask[m1] | mask1
		for m in m0+1:m1
			mask[m] = 0xffffffff
		if test_free
			pages_allocated += npages
		return true

	bool free_chunk(int pos, int size)
		if (pos & 0x00000fff) != 0
			return false
		if size == 0
			return true
		int npages = ceil_quot(size, PAGE_SIZE)
		
		// which pages/masks?
		int p0 = pos >> 12
		int p1 = p0 + npages
		int m0 = p0 >> 5
		int m1 = p1 >> 5
		p0 = p0 & 0x0000001f
		p1 = p1 & 0x0000001f
		
		// boundary masks
		int mask0 = 0xffffffff >> (32 - p0)
		int mask1 = 0xffffffff << p1
		
		// special case
		if m0 == m1
			mask[m0] = mask[m0] & mask0
			pages_allocated -= npages
			return true
		
		// free
		mask[m0] = mask[m0] & mask0
		mask[m1] = mask[m1] & mask1
		for m in m0+1:m1
			mask[m] = 0
		pages_allocated -= npages
		return true

	int get_used()
		int n = 0
		for i in 0:num_masks
			if mask[i] == 0
				continue
			if mask[i] == 0xffffffff
				n += 32
			else
				for j in 0:32
					int m = 1 << j
					if (mask[i] & m) > 0
						n ++
		return n * PAGE_SIZE
	
	PageDirectory *create_page_directory()
		int pos = alloc_page()
		if pos == -1
			panic("kann PageDirectory nicht anlegen")
			return nil
		PageDirectory *pd = _i2p(pos)
		pd.clear()
		return pd
			

PageController paging



void show_mem_map()
	for m,i in bios_mem_map
		if m.type < 0
			break
		printh(&m.offset, 4)
		prints("    ")
		printh(&m.size, 4)
		prints("    ")
		if m.type == 1
			prints("free")
		else if m.type == 2
			prints("used-2")
		else if m.type == 3
			prints("used-3")
		else if m.type == 4
			prints("used-4")
		else if m.type == 5
			prints("BAD")
		else
			printh(&m.type, 1)
		prints("\n")

