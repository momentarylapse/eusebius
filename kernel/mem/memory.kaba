use common.*
use io.text.*

var memory_size: int

class BiosMemoryMapEntry as @noauto
	var offset: i64
	var size: i64
	var type, dummy: int # type < 0 -> end

var bios_mem_map: BiosMemoryMapEntry[64]



func read_data_from_init()
	asm {
		mov rax, [0x00005100]
		shl rax, 0x0a
		mov memory_size, eax
		
		mov rax, [0x00005104]
		mov __temp_i__, eax
	}

	var num_entries = __temp_i__ # & 0x0000ffff
	memcpy(&bios_mem_map, _i2p(0x00006000), 64*24)#sizeof(bio_mem_map))
	
	bios_mem_map[num_entries].type = -1
	
#	for i=>m in bios_mem_map
#		if i == 0
#			continue
#		if m.offset == bios_mem_map[0].offset #and m.size == bios_mem_map[0].size
#			bmmn = i
#			m.type = -1
#			break

func show_mem_map()
	for i=>m in bios_mem_map
		if m.type < 0
			break
		printh(&m.offset, 8)
		prints(" : ")
		let end = m.offset + m.size
		printh(&end, 8)
		prints("    ")
		printh(&m.size, 4)
		prints("    ")
		if m.type == 1
			prints("free")
		else if m.type == 2
			prints("used-2")
		else if m.type == 3
			prints("used-3")
		else if m.type == 4
			prints("used-4")
		else if m.type == 5
			prints("BAD")
		else
			printh(&m.type, 1)
		prints("\n")

