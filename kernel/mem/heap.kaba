use common
use io.text


#--------------------------------------------------------------
# memory "management"

const MEM_HEAP_OFFSET = 0x00280000
const MEM_HEAP_SIZE   = 0x00480000 # 5.5mb

class Heap as @noauto

	var static allocated: int # includes overhead of all headers


	class MallocHeader as @noauto
		var size: int
		var next: MallocHeader*
		var prev: MallocHeader*
		func after() -> void&
			var pp = &self as char[0]&
			return &pp[size]
		func payload() -> void&
			var pp = &self as char[0]&
			return &pp[sizeof(MallocHeader)]
	var static first_free: MallocHeader&
	var static end_marker: MallocHeader&

	# heap is split into a (hole-free) list of blocks
	# blocks are either free or allocated
	# free blocks form a doubly-linked list (no loop)
	# allocated blocks are not linked


	func static malloc(_size: int) -> void&
		var size = ceil_quot(_size, 8) << 3
		#prints("<+")
		#printi(size)
		
		# account for the allocation header
		size += sizeof(MallocHeader)
		
		# find a free block big enough
		var cur = first_free #as MallocHeader&
		while true
			for n in cur.next
				if size <= cur.size - sizeof(MallocHeader)
			
					# shrink free block
					cur.size -= size
				
					# create allocated block at (former) end of free block
					var hh = cur.after() as MallocHeader&
					hh.size = size
					hh.next = nil
					hh.prev = nil
				
					allocated += size
					memcheck()
					#prints(" ")
					#let xx = hh.payload()
					#printh(&xx, 4)
					#prints("> ")
					return hh.payload()
				cur := n
			else
				break
		printi(_size)
		panic("malloc: fail")
		return first_free # dummy

	func static _cleanup(_h: MallocHeader&)
		var h = _h
		if &(h.after()) == h.next
			allocated -= sizeof(MallocHeader)
			#prints(" merge after ")
			for n in h.next
				h.size += n.size
				h.next = n.next
			for n in h.next
				n.prev = h
		for p in h.prev
			if p.after() == h
				allocated -= sizeof(MallocHeader)
				#prints(" merge before ")
				p.size += h.size
				for n in h.next
					n.prev = p
				p.next = h.next

	func static free(_p: void*)
		for p in _p
			let ip = _p2i(p)
			#prints "---free"
			#prints("<-")
			#printi(ip)
		
			var hh = _i2p(ip - sizeof(MallocHeader)) as MallocHeader&
			#prints(" ")
			#printi(hh.size)
		
			# find last free window before p
			var cur = first_free
			while true
				for next in cur.next
					if (ip >= _p2i(cur)) and (ip < _p2i(cur) + cur.size)
						prints("\n")
						printi(_p2i(cur))
						prints("  ")
						printi(cur.size)
						panic("double free")
					if ip < _p2i(next)
						# turn allocated block into a free one
				
						#printi(hh.size)
						allocated -= hh.size - sizeof(MallocHeader)
				
						# ..by linking it to its neighbors
						hh.next = cur.next
						next.prev = hh
						hh.prev = cur
						cur.next = hh
				
						_cleanup(hh)
						memcheck()
						#prints(">")
						return
					cur := next
				else
					break
			panic("free: fail")



	func static memcheck()
		var h = first_free
		while true
			for next in h.next
				if _p2i(next) < _p2i(h) + h.size
					panic("memcheck: h.next<h+size")
				if h != next.prev
					panic("memcheck: h!=h.next.prev")
				h := next
			else
				break

	func static realloc(po: void&, old_size: int, new_size: int) -> void&
		var pn = malloc(new_size)
		var n = old_size
		if new_size < n
			n = new_size
		memcpy(pn, po, n)
		free(po)
		return pn

	func static init()
		# intentionally leave a 8b gap to prevent merging
		allocated = sizeof(MallocHeader)*2 - 8
		first_free := _i2p(MEM_HEAP_OFFSET) as MallocHeader&
		first_free.size = MEM_HEAP_SIZE - sizeof(MallocHeader) - 8
		first_free.prev = nil
		end_marker := _i2p(MEM_HEAP_OFFSET + MEM_HEAP_SIZE - sizeof(MallocHeader)) as MallocHeader&
		end_marker.size = sizeof(MallocHeader)
		end_marker.next = nil
		end_marker.prev = first_free
		first_free.next = end_marker
