use common
use io.text


#--------------------------------------------------------------
# memory "management"

const MEM_HEAP_OFFSET = 0x00280000
const MEM_HEAP_SIZE   = 0x00580000 # 5.5mb

class Heap

	var static allocated: int # includes overhead of all headers


	class MallocHeader
		var size: int
		var next: MallocHeader*
		var prev: MallocHeader*
		func const after() -> void*
			var pp: char[0]* = &self
			return &pp[size]
		func const payload() -> void*
			var pp: char[0]* = &self
			return &pp[sizeof(MallocHeader)]
	var static first_free: MallocHeader*
	var static end_marker: MallocHeader*

	# heap is split into a (hole-free) list of blocks
	# blocks are either free or allocated
	# free blocks form a doubly-linked list (no loop)
	# allocated blocks are not linked


	func static malloc(_size: int) -> void*
		var size = ceil_quot(_size, 8) << 3
		#prints "<+"
		#printi size
		
		# account for the allocation header
		size += sizeof(MallocHeader)
		
		# find a free block big enough
		var cur: MallocHeader* = first_free
		while cur.next
			if size <= cur.size - sizeof(MallocHeader)
			
				# shrink free block
				cur.size -= size
				
				# create allocated block at (former) end of free block
				var hh: MallocHeader* = cur.after()
				hh.size = size
				hh.next = nil
				hh.prev = nil
				
				allocated += size
				#prints " "
				#printi(_p2i(hh.payload()))
				memcheck()
				#prints ">"
				return hh.payload()
			cur = cur.next
		panic("malloc: fail")
		return nil

	func static _cleanup(_h: MallocHeader*)
		var h = _h
		if h.after() == h.next
			allocated -= sizeof(MallocHeader)
			#prints(" merge after ")
			h.size += h.next.size
			h.next = h.next.next
			h.next.prev = h
		if h.prev.after() == h
			allocated -= sizeof(MallocHeader)
			#prints(" merge before ")
			h.prev.size += h.size
			h.next.prev = h.prev
			h.prev.next = h.next

	func static free(p: void*)
		if !p
			return
		let ip = _p2i(p)
		#prints "---free"
		#prints("<-")
		#printi(ip)
		
		var hh: MallocHeader* = _i2p(ip - sizeof(MallocHeader))
		#prints(" ")
		#printi(hh.size)
		
		# find last free window before p
		var cur: MallocHeader* = first_free
		while cur.next
			if (ip >= _p2i(cur)) and (ip < _p2i(cur) + cur.size)
				prints("\n")
				printi(_p2i(cur))
				prints("  ")
				printi(cur.size)
				
				panic("double free")
			if ip < _p2i(cur.next)
				# turn allocated block into a free one
				
				#printi(hh.size)
				allocated -= hh.size - sizeof(MallocHeader)
				
				# ..by linking it to its neighbors
				hh.next = cur.next
				cur.next.prev = hh
				hh.prev = cur
				cur.next = hh
				
				_cleanup(hh)
				memcheck()
				#prints(">")
				return
			cur = cur.next
		panic("free: fail")



	func static memcheck()
		var h: MallocHeader* = first_free
		while h.next
			if _p2i(h.next) < _p2i(h) + h.size
				panic("memcheck: h.next<h+size")
			if h != h.next.prev
				panic("memcheck: h!=h.next.prev")
			h = h.next

	func static realloc(po: void*, old_size: int, new_size: int) -> void*
		var pn: void* = malloc(new_size)
		var n = old_size
		if new_size < n
			n = new_size
		memcpy(pn, po, n)
		free(po)
		return pn

	func static init()
		# intentionally leave a 8b gap to prevent merging
		allocated = sizeof(MallocHeader)*2 - 8
		first_free = _i2p(MEM_HEAP_OFFSET)
		first_free.size = MEM_HEAP_SIZE - sizeof(MallocHeader) - 8
		first_free.prev = nil
		end_marker = _i2p(MEM_HEAP_OFFSET + MEM_HEAP_SIZE - sizeof(MallocHeader))
		end_marker.size = sizeof(MallocHeader)
		end_marker.next = nil
		end_marker.prev = first_free
		first_free.next = end_marker
