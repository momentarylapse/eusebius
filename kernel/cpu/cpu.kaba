use common
use io.text

class Cpu as @noauto
	enum MSR as @noauto
		EFER = 0xc0000080
		STAR = 0xc0000081
		LSTAR = 0xc0000082
		CSTAR = 0xc0000083
		SF_MASK = 0xc0000084

	func static read_msr(msr: MSR) -> int
		__temp_i__ = int(msr)
		asm{
			mov ecx, __temp_i__
			rdmsr
			mov __temp_i64__, rax
		}
		return __temp_i__
	func static write_msr(msr: MSR, v: int64)
		__temp_i__ = int(msr)
		__temp_i64__ = v
		asm{
			mov ecx, __temp_i__
			mov rax, __temp_i64__
			wrmsr
		}
	func static read_cr0() -> int
		asm{
			mov eax, cr0
			mov __temp_i__, eax
		}
		return __temp_i__
	func static write_cr0(e: int)
		__temp_i__ = e
		asm{
			mov eax, __temp_i__
			mov cr0, eax
		}

	func static enable_longmode()
		let e = read_msr(MSR.EFER)
		write_msr(MSR.EFER, e | 0x00000100) # LM bit
		
#	func static enable_paging()
#		write_cr0(read_cr0() | 0x80000000) # PG bit
		
	func static enable_sse()
		var e = read_cr0()
		e = e & 0xfffffffb # clear CR0.EM (don't emulate via IRQ)
		e = e | 0x00000002 # set CR0.MP (inform about task-switches)
		write_cr0(e)
		
		asm{
	
			mov eax, cr0
			and eax, 0xfffffffb # clear CR0.EM (don't emulate via IRQ)
			or eax, 0x00000002 # set CR0.MP (inform about task-switches)
			mov cr0, eax
			mov __temp_i__, eax
	
			# set CR4.OSFXSR (enable sse)
			mov eax, cr4
			#mov __temp_i__, eax
			or eax, 0x00000200
			mov cr4, eax

			# flush cpu prefetch
			jmp _flush_sse
			_flush_sse:
		}

	func static enable_syscall()
		write_msr(MSR.EFER, read_msr(MSR.EFER) | 1)
	
