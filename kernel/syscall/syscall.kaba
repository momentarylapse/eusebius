use common
use io.text
use cpu
use fs.fs
use fs.access
use dev.block
use mem.heap
use mem.paging
#use mem.shared
#use task.task
#use task.scheduler
#use time.timevalue
#use time.timer
#use irq.irq

#let SYSCALL_STACK_SIZE = 65536




func @noframe syscall_test()
	asm{
		cli
		# general purpose registers
		push rax
		push rbx
		push rcx
		push rdx
		push rbp
		push rdi
		push rsi
		push r8
		push r9
		push r10
		push r11
		push r12
		push r13
		push r14
		push r15
		mov rax, rsp
		mov __temp_p__, rax
	}
	var task_rsp = __temp_p__
	var frame = __temp_p__ as Syscall.Frame&
	prints("<syscall>  rsp=")
	printh(&frame.rsp, 8)
	prints("  ret=")
	printh(&frame.rcx, 8)
	__temp_p__ = task_rsp
	asm{
		mov rax, __temp_p__
		mov rsp, rax
		# general purpose registers
		pop r15
		pop r14
		pop r13
		pop r12
		pop r11
		pop r10
		pop r9
		pop r8
		pop rsi
		pop rdi
		pop rbp
		pop rdx
		pop rcx
		pop rbx
		#pop rax
		add rsp, 0x08
		
		db 0x48
		sysret
	}
	while true
		pass


class Syscall
	let STACK_SIZE = 4096
	
	class Frame
		reg8ff: int64[8]
		rsi, rdi, rbp, rdx, rcx, rbx, rax: int64
		#rip, cs, rflags, rsp, ss: int64
		rsp: int64
	
	var static stack: void&
	func static init()
		stack := Heap.malloc(STACK_SIZE)
		
		Cpu.enable_syscall()
		Cpu.write_msr(Cpu.MSR.STAR, 0x0010000800000000)
		Cpu.write_msr(Cpu.MSR.LSTAR, _p2i(raw_function_pointer(syscall_test)))
#		Cpu.write_msr(Cpu.MSR.CSTAR, _p2i(raw_function_pointer(syscall_test)))
		Cpu.write_msr(Cpu.MSR.SF_MASK, (1 << 9) + (1 << 10)) # mask irq + direction flag
#		let x = Cpu.read_msr(Cpu.MSR.STAR)
#		printh(&x, 8)
#		prints(" STAR\n")
#		let x2 = Cpu.read_msr(Cpu.MSR.LSTAR)
#		printh(&x2, 8)
#		prints(" LSTAR\n")
#		let x3 = Cpu.read_msr(Cpu.MSR.SF_MASK)
#		printh(&x3, 8)
#		prints("\n")
##		for pp in raw_function_pointer(syscall_test)
#			printh(pp, 8)




#class SysInfo as @noauto
#	var uptime: int
#	var loads: int[3]
#	var totalram, freeram, sharedram, bufferram: int
#	var totalswap, freeswap: int
#	var procs: int
#	var totalhigh, freehigh: int
#	var mem_unit: int
#	var pad: int[2]
#	var totalheap, freeheap: int
#	func get()
#		KernelTimer.update()
#		uptime = KernelTimer.tv.sec
#		for l in loads
#			l = 0
#		mem_unit = 1024 #PAGE_SIZE
#		totalram = MemorySize / mem_unit
#		freeram = (MemorySize - Paging.get_used()) / mem_unit
#		sharedram = SharedMemory.get_used() / mem_unit
#		bufferram = 0
#		totalswap = 0
#		freeswap = 0
#		procs = 0
#		for t in TaskManager.tasks
#			if t.status != TASK_STATUS_UNUSED
#				procs ++
#		totalhigh = 0
#		freehigh = 0
#		totalheap = MEM_HEAP_SIZE / mem_unit
#		freeheap = (MEM_HEAP_SIZE - Heap.allocated) / mem_unit
#
#var _sys_info: SysInfo
#
#class UTSName as @noauto
#	var sysname: cstring
#	var nodename: cstring
#	var release: cstring
#	var version: cstring
#	var machine: cstring
#	var domainname: cstring
#	func get()
#		strcpy(sysname, KERNEL_NAME)
#		strcpy(nodename, "???")
#		strcpy(release, KERNEL_VERSION)
#		strcpy(version, KERNEL_VERSION)
#		strcpy(machine, MACHINE_TYPE)
#		strcpy(domainname, "-no domain-")
#
#var _uts_name: UTSName
#
#class TaskInfo as @noauto
#	var name: cstring
#	var pid, ppid, mode, status: int
#	var mem: int
#	var cpu: int
#	var life: TimeValue
#	func get(_pid: int) -> int
#		var t = TaskManager.get_task(_pid)
#		if !t
#			return -1
#		strcpy(name, t.name)
#		pid = t.pid
#		ppid = -1
#		if t.parent
#			ppid = t.parent.pid
#		status = t.status
#		mode = 1
#		if t.kernel_mode
#			mode = 0
#		mem = t.pages_alloced()
#		cpu = t.cpu_load
#		life = t.time_all
#		return 0
#
#var _task_info: TaskInfo
#
#class MountInfo as @noauto
#	var major, minor: int
#	var dir: cstring
#	func get(_index: int) -> int
#		var m = &FileSystem.mounts[_index]
#		if !m.dev
#			return -1
#		major = m.dev.major
#		minor = m.dev.minor
#		m.dest.get_path(dir)
#		return 0
#
#var _mount_info: MountInfo
#
#
#class StatData as @noauto
#	var name: cstring
#	var type: int
#	var size: int
#	var inode: int
#	var mp_inode: int
#	var time: int
#	func get(filename: cstring, cur_dir: FileEntry) -> int
#		var e = FileSystem.get(filename, cur_dir)
#		if !e
#			#panic(filename)
#			return -1
#		strcpy(name, e.name)
#		type = e.type
#		size = e.size
#		inode = e.inode
#		return 0
#
#var _stat_data: StatData
#
#func int_syscall()
#	while true
#		#show_pvl()
#		int r = 0
#		
#		#int pid = (SysCallTask.tss.prev >> 3) - NUM_PRE_GDT_ENTRIES
#		var caller = &TaskManager.tasks[Scheduler.running_pid]
#		#printi(pid)
#		int index = caller.tss.eax
#		int param1 = caller.tss.ebx
#		int param2 = caller.tss.ecx
#		int param3 = caller.tss.edx
#		int param4 = caller.tss.esi
#		#printi(RunningPid)
##		prints(" ")
##		printi(index)
##		prints(" ")
#	
#		if index == 1 # exit
#			caller.sys_exit(param1)
#		else if index == 2 # fork
#			r = caller.sys_fork()
#		else if index == 3 # read
#			r = caller.sys_read(param1, param2, param3)
#		else if index == 4 # write
#			r = caller.sys_write(param1, param2, param3)
#		else if index == 5 # open
#			r = caller.sys_open(param1, param2)
#		else if index == 6 # close
#			r = caller.sys_close(param1)
#		else if index == 7 # waitpid
#			r = caller.sys_waitpid(param1, param2, param3)
#		else if index == 8 # create
#			r = caller.sys_open(param1, O_CREATE | O_WRONLY | O_TRUNC)
#		else if index == 10 # unlink
#			r = caller.sys_unlink(param1)
#		else if index == 11 # exec
#			r = caller.sys_execute(param1, param2, param3)
#		else if index == 12 # chdir
#			r = caller.sys_set_cur_dir(param1)
#		else if index == 14 # mknod
#			r = caller.sys_mknod(param1, param2)
#		else if index == 19 # seek
#			r = caller.sys_seek(param1, param2, param3)
#		else if index == 20 # getpid
#			r = Scheduler.running_pid
#		else if index == 25 # stime
#			KernelTimer.update()
#			r = 0
#			if !caller.page_dir.memcpy2task(param1, &KernelTimer.tv, sizeof(TimeValue))
#				r = -EFAULT
#		else if index == 37 # kill
#			r = caller.sys_kill(param1, param2)
#		else if index == 39 # mkdir
#			r = caller.sys_mkdir(param1)
#		else if index == 40 # rmdir
#			r = caller.sys_rmdir(param1)
#		else if index == 41 # dup
#			r = caller.sys_dup(param1)
#		else if index == 42 # pipe
#			r = caller.sys_pipe(param1)
#		else if index == 45 # brk
#			r = caller.sys_brk(param1)
#		else if index == 51 # fcntl
#			r = caller.sys_fcntl(param1, param2, param3)
#		else if index == 67 # sigaction
#			r = caller.sys_sigaction(param1, param2)
#		else if index == 88 # reboot
#			pass
#		else if index == 102 # socket
#			r = caller.sys_socket(param1, param2, param3)
#		else if index == 116 # sysinfo
#			_sys_info.get()
#			caller.page_dir.memcpy2task(param1, &_sys_info, sizeof(_sys_info))
#		else if index == 117 # ipc
#			r = caller.sys_ipc(param1, param2, param3, param4)
#		else if index == 122 # uname
#			_uts_name.get()
#			caller.page_dir.memcpy2task(param1, &_uts_name, sizeof(_uts_name))
#		else if index == 141 # getdents
#			r = caller.sys_getdents(param1, param2, param3)
#		else if index == 158 # sched_yield
#			int pid_next = Scheduler.get_next_task(Scheduler.running_pid)
#			Scheduler.reconnect_tasks(pid_next, sys_call_task)
#		else if index == 162 # nanosleep
#			caller.sys_nanosleep(param1, param2)
#			# p1 = &duration
#			# p2 = &duration_more
#		else if index == 183 # getcwd
#			cstring filename
#			caller.cur_dir.get_path(filename)
#			r = 0
#			if !caller.page_dir.memcpy2task(param1, &filename, sizeof(cstring))
#				r = -EFAULT
#		else if index == 0x2001 # getarg
#			caller.page_dir.memcpy2task(param1, &caller.arg, sizeof(cstring))
#		else if index == 0x2002 # kprints
#			cstring filename
#			if param2 < sizeof(filename)
#				caller.page_dir.memcpy2kernel(&filename, param1, param2)
#				filename[param2] = 0
#				prints(filename)
#		else if index == 0x2003 # kprinti
#			printi(param1)
#		else if index == 0x2005 # taskinfo
#			r = _task_info.get(param1)
#			if r == 0
#				caller.page_dir.memcpy2task(param2, &_task_info, sizeof(_task_info))
#		else if index == 0x2006 # exit_signal
#			r = caller.sys_exit_signal()
#			asm {
#				# don't overwrite eax with return value
#				jmp __sys_call_return
#			}
#		else if index == 0x2007 # map IRQ
#			r = irq.sys_map_irq(param1, caller, param2)
#		else if index == 0x2008 # mountinfo
#			r = _mount_info.get(param1)
#			if r == 0
#				caller.page_dir.memcpy2task(param2, &_mount_info, sizeof(_mount_info))
#		else if index == 0x2009 # blockinfo
#			r = -1
#			var d = BlockDevManager.get(param1, param2)
#			if d
#				caller.page_dir.memcpy2task(param3, d, sizeof(BlockDevice))
#				r = 0
#		else if index == 0x200a # stat
#			cstring filename
#			caller.page_dir.memcpy2kernel(&filename, param1, sizeof(cstring))
#			r = _stat_data.get(filename, caller.cur_dir)
#			if r == 0
#				caller.page_dir.memcpy2task(param2, &_stat_data, sizeof(_stat_data))
#		else if index == 0x200b # addr2phys
#			int offset
#			r = caller.page_dir.addr2kernel(param1, &offset)
#		else
#			r = -ENOSYS
#		#TextColor = 4
##		prints("<<")
##		prints(caller.name)
##		prints(":")
##		printi(index)
##		prints(">>")
##		TextColor = 7
#		#while true
#		#	nil
#		
#		if TaskManager.ack_hw_irq >= 0
#			#prints(" <ACK> ")
#			irq.end_of_interrupt(TaskManager.ack_hw_irq)
#			TaskManager.ack_hw_irq = -1
#		
#		# task switch?
#		if caller.status != TASK_STATUS_RUNNING
#			#prints("S")
#			int pid_next = Scheduler.get_next_task(Scheduler.running_pid)
#			Scheduler.reconnect_tasks(pid_next, sys_call_task)
#			#printi(pid_next)
#
#		# back
#		caller.tss.eax = r
#		
#		#prints(">")
#		asm {
#		__sys_call_return:
#			iret
#		}
#		#prints("<")
#	
#var sys_call_task: Task*
#
#func InitSysCall()
#	sys_call_task = TaskManager.add_task_kernel("irq-syscall", int_syscall, SYSCALL_STACK_SIZE, kernel_task)
#	irq.set_task(0x80, sys_call_task)
