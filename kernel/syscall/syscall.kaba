use common.*
use common.macros.*
use io.text.*
use cpu.*
use dev.block.*
use mem.heap.*
use mem.paging.*
#use mem.shared.*
use task.task.*
use task.manager.*
use task.scheduler.*
use time.timer.*
use syscall.op_fs.*
use syscall.op_sys.*
use syscall.op_task.*
#use irq.irq.*

use fs.* # experiment

#let SYSCALL_STACK_SIZE = 65536


# syscall:
#  (cs = STAR...)
#  (ss = STAR...)
#  (rflags = ..MSTAR)
#  (cpl = 0)
#  rcx = rip
#  r11 = rflags
#  rip = LSTAR

# sysret:
#  (cs = STAR...)
#  (ss = STAR...)
#  (cpl = 3)
#  rflags = r11
#  rip = rcx


class Syscall
	let STACK_SIZE = 4096*2
	
	class Frame
		r15, r14, r13, r12, r11, r10, r9, r8: int64
		rsi, rdi, rbp, rdx, rcx, rbx, rax: int64
	
	var static stack: void&
	var static rsp: void& # kernel/handler
	
	var static task_frame_rsp: void& # task stack + pushed frame
	
	func static init()
		stack := Heap.malloc(STACK_SIZE)
		rsp := _i2p(_p2i(stack) + STACK_SIZE)
		
		Cpu.enable_syscall()
		Cpu.write_msr(Cpu.MSR.STAR, 0x0010000800000000) # segments
		Cpu.write_msr(Cpu.MSR.LSTAR, _p2i(raw_function_pointer(syscall_handler)))
		Cpu.write_msr(Cpu.MSR.SF_MASK, (1 << 9) + (1 << 10)) # mask irq + direction flag
#		let x = Cpu.read_msr(Cpu.MSR.STAR)
#		printh(&x, 8)
#		prints(" STAR\n")
#		let x2 = Cpu.read_msr(Cpu.MSR.LSTAR)
#		printh(&x2, 8)
#		prints(" LSTAR\n")
#		let x3 = Cpu.read_msr(Cpu.MSR.SF_MASK)
#		printh(&x3, 8)
#		prints("\n")
##		for pp in raw_function_pointer(syscall_test)
#			printh(pp, 8)


	func static @noframe syscall_handler()
		asm {
			cli
		}
		# save frame on task's stack
		push_general_purpose_registers()
	
		# save task stack pointer
		asm {
			mov rax, rsp
			mov __temp_r__, rax
		}
		Syscall.task_frame_rsp := __temp_r__
		
		# switch to kernel/syscall stack
		__temp_p__ = Syscall.rsp
		asm {
			mov rsp, __temp_p__
			mov rbp, rsp
		}
	
		# no local variables allowed! (rbp still from task-frame)
#		__temp_i64__ = Syscall.handle(__temp_p__ as Syscall.Frame&)
		Syscall.handle_meta(Syscall.task_frame_rsp as Syscall.Frame&)

		# switch to task stack
		__temp_p__ = Syscall.task_frame_rsp
		asm {
			mov rax, __temp_p__
			mov rsp, rax
		}
	
		pop_general_purpose_registers()
		asm {
			#mov rax, __temp_i64__ # return value -> rax
			#add rsp, 0x08
		
			db 0x48
			sysret
		}




	func static handle_meta(out frame: Frame)
		TextMode.text_color = 0x02
#		prints("  <sc ")
#		printh(&frame.rax, 2)
#		prints(">  ")
		TextMode.text_color = 0x07
		let r = handle(frame)
		frame.rax = r
		for t in Scheduler.cur
			if t.status != TaskStatus.RUNNING and t.status != TaskStatus.IDLE
				return_to_idle(frame)
				#panic("???")
#		TextMode.text_color = 0x02
#		prints("  <sc ret>  ")
#		TextMode.text_color = 0x07

#		for t in Scheduler.cur
#			if t.pid == 0
#				printh(&frame, sizeof(Frame))
				#panic("x")
	
	func static return_to_idle(out frame: Frame)
#		TextMode.text_color = 0x02
#		prints("  <sc ret idle>  ")
#		TextMode.text_color = 0x07

		Scheduler.update_time()
		
		# prepare current task to be awoken by returning from a timer interrupt
		for t in Scheduler.cur
			memcpy(&t.frame.reg8ff, &frame, sizeof(int64) * (8 + 7))
			#t.syscall_rsp
			t.frame.rsp = _p2i(Syscall.task_frame_rsp) + sizeof(Frame)
			t.frame.rip = frame.rcx
			t.frame.rflags = frame.r11
		
		Scheduler.cur = nil
		
#		# wait for timer interrupt
#		prints(">> IDLE...")
#		asm {
#			sti
#			jmp $
#		}	

#		panic("TODO iret idle")
		Scheduler.cur = &TaskManager.tasks[0]
		
		for t in Scheduler.cur
			__temp_p__ = t.page_root_dir
			asm {
				mov rax, __temp_p__
				mov cr3, eax
				jmp _flush_aaa
				_flush_aaa:
			}
			
			__temp_i64__ = t.frame.rip
			__temp_p__ = _i2p(t.frame.rsp)
			asm{
				#cli
				#sti
				push 0x0000001b #0x1b # ss + ring3
				mov rax, __temp_p__
				push rax # rsp
				push 0x00003200 # flags: iopl=3, iterrupts=1
				#push 0x00003000#0x202 # flags: iopl=3, iterrupts=1
				push 0x00000023 #0x23 # cs + ring3
				mov rax, __temp_i64__
				push rax # rip
			#	jmp $
				db 0x48
				iret
			}
			
			
			Syscall.task_frame_rsp := _i2p(t.frame.rsp - sizeof(Frame))
			var next_frame = Syscall.task_frame_rsp as Frame&
			memcpy(next_frame, &t.frame.reg8ff, sizeof(int64) * (8 + 7))
		
		
		# switch to task stack
		__temp_p__ = Syscall.task_frame_rsp
		asm {
			mov rax, __temp_p__
			mov rsp, rax
		}
	
		pop_general_purpose_registers()
		asm {
			#mov rax, __temp_i64__ # return value -> rax
			#add rsp, 0x08
		
			db 0x48
			sysret
		}
		
		for t in Scheduler.cur
			if t.first_time_running
				panic("x432")
			else
				Syscall.task_frame_rsp := t.syscall_rsp
				var next_frame = Syscall.task_frame_rsp as Frame&
				memcpy(next_frame, &t.frame.reg8ff, sizeof(int64) * (8 + 7))
		prints(">> IDLE...")

	func static handle(frame: Frame) -> int64
		let index = int(frame.rax)
		
#		prints("\n")
#		for t in Scheduler.cur
#			printi(t.pid)
#		prints(" SC")
#		printh(&index, 2)
		
		for t in Scheduler.cur
			if index == 0x0001 # exit
				sys_exit(t, frame.rdi)
				return 0
#			if index == 0x0002 # fork
#				return sys_fork(t)
			if index == 0x0003 # read
				return sys_read(t, frame.rdi, frame.rsi, frame.rdx)
			if index == 0x0004 # write
				return sys_write(t, frame.rdi, frame.rsi, frame.rdx)
			if index == 0x0005 # open
				return sys_open(t, frame.rdi, frame.rsi)
			if index == 0x0006 # close
				return sys_close(t, frame.rdi)
			if index == 0x0007 # waitpid
				return sys_waitpid(t, frame.rdi, frame.rsi, frame.rdx)
			if index == 0x0008 # create
				return sys_open(t, frame.rdi, O_CREATE | O_WRONLY | O_TRUNC)
			if index == 0x000a # unlink
				return sys_unlink(t, frame.rdi)
			if index == 0x000b # exec
				return sys_execute(t, frame.rdi, frame.rsi, frame.rdx)
			if index == 0x000c # chdir
				return sys_set_cur_dir(t, frame.rdi)
			if index == 0x000e # mknod
				return sys_mknod(t, frame.rdi, frame.rsi)
			if index == 0x0013 # seek
				return sys_seek(t, frame.rdi, frame.rsi, frame.rdx)
			if index == 0x0014 # getpid
				return t.pid
			if index == 0x0019 # stime
				return sys_stime(frame.rdi)
			if index == 0x0025 # kill
				return sys_kill(frame.rdi, frame.rsi)
			if index == 0x0027 # mkdir
				return sys_mkdir(t, frame.rdi)
			if index == 0x0028 # rmdir
				return sys_rmdir(t, frame.rdi)
			if index == 0x0029 # dup
				return sys_dup(t, frame.rdi)
			if index == 0x002a # pipe
				return sys_pipe(t, frame.rdi)
			if index == 0x002d # brk
				return sys_brk(t, frame.rdi)
			if index == 0x0033 # fcntl
				return sys_fcntl(t, frame.rdi, frame.rsi, frame.rdx)
#			if index == 0x0043 # sigaction
#				r = caller.sys_sigaction(param1, param2)
			if index == 0x0058 # reboot
				return -1
			if index == 0x0066 # socket
				return sys_socket(t, frame.rdi, frame.rsi, frame.rdx)
			if index == 0x0074 # sysinfo
				var si = _i2p(frame.rdi) as SysInfo&
				si.get()
				return 0
			if index == 0x0075 # ipc
				return sys_ipc(t, frame.rdi, frame.rsi, frame.rdx, frame.r10)
			if index == 0x007a # uname
				var un = _i2p(frame.rdi) as UTSName&
				un.get()
				return 0
			if index == 0x008d # getdents
				return sys_getdents(t, frame.rdi, frame.rsi, frame.rdx)
#			if index == 0x009e # sched_yield
#				int pid_next = Scheduler.get_next_task(Scheduler.running_pid)
#				Scheduler.reconnect_tasks(pid_next, sys_call_task)
			if index == 0x00a2 # nanosleep
				# p1 = &duration
				# p2 = &duration_more
				return sys_nanosleep(t, frame.rdi, frame.rsi)
			if index == 0x00b7 # getcwd
				return sys_getcwd(t, frame.rdi)
			if index == 0x1234 # print hi
				return sys_hi()
			if index == 0x2001 # getarg
				memcpy(_i2p(frame.rdi), &t.arg, sizeof(cstring))
				return 0
			if index == 0x2002 # kprint
				TextMode.prints_low(_i2p(frame.rdi) as cstring&, frame.rsi)
				return 0
			if index == 0x2003 # kprinti
				printi(frame.rdi)
				return 0
			if index == 0x2004 # kprintp
				printh(&frame.rdi, 8)
				return 0
			if index == 0x2005 # taskinfo
				var ti = _i2p(frame.rsi) as TaskInfo&
				return ti.get(frame.rdi)
#			if index == 0x2006 # exit_signal
#				r = caller.sys_exit_signal()
#				asm {
#					# don't overwrite eax with return value
#					jmp __sys_call_return
#				}
#			if index == 0x2007 # map IRQ
#				r = irq.sys_map_irq(param1, caller, param2)
			if index == 0x2008 # mountinfo
				var mi = _i2p(frame.rsi) as MountInfo&
				return mi.get(frame.rdi)
			if index == 0x2009 # blockinfo
				return sys_blockinfo(frame.rdi, frame.rsi, frame.rdx)
			if index == 0x200a # stat
				return sys_stat(t, frame.rdi, frame.rsi)
#			if index == 0x200b # addr2phys
#				int offset
#				r = caller.page_dir.addr2kernel(param1, &offset)
		prints("<syscall>")
		printh(&index, 2)
		return -ENOSYS

