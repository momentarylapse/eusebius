use common.*
use task.*
use mem.paging.*
use task.manager.*
use time.timevalue.*
use time.timer.*
use op_fs.*

use io.text.*


func sys_set_cur_dir(out t: Task, faddr: i64) -> int
	var filename = _i2p(faddr) as cstring&
#	if !memcpy2kernel(&filename, faddr, sizeof(cstring))
#		return -EFAULT
	return t.set_cur_dir(filename)
#		
func sys_brk(out t: Task, _new_top: int) -> int
	let new_top = ceil_quot(_new_top, PAGE_SIZE) * PAGE_SIZE
	let cur_top = t.memory_offset + t.memory_size
	if new_top <= cur_top
		return cur_top
	if !t.page_root_dir.map_by_alloc(cur_top, new_top - cur_top, PageFlags.WRITABLE | PageFlags.USER)
		return -ENOMEM
	t.memory_size = new_top - t.memory_offset
	return new_top
	
func sys_kill(_pid: int, signal: int) -> int
#	for t in TaskManager.get_task(_pid)
#		return t.handle_signal_link_iret(signal)
	return -ESRCH

func sys_nanosleep(out t: Task, p1: i64, p2: i64) -> i64
	var tv = _i2p(p1) as TimeValue&
	tv.add(KernelTimer.tv)
	t.set_wait(WaitingMode.TIME, tv.sec, tv.nanosec, 0)
	return 0

func sys_exit(out t: Task, r: int)
	TaskManager.die(t, r)

func sys_waitpid(out t: Task, _pid: int, status_addr: i64, options: int) -> i64
	for o in TaskManager.get_task(_pid)
		# already (un-) dead?
		if o.status == TaskStatus.ZOMBIE
			var p = _i2p(status_addr) as int&
			p = o.return_status
			o.clean_up_deep()
			t.activate()
			return 0
		
		# don't block?
		if (options & 1) > 0
			return -2

		t.set_wait(WaitingMode.TASK_EXIT, _pid, status_addr, 0)
		return 0
	return -ECHILD


func sys_execute(out t: Task, faddr: i64, fd_in: int, fd_out: int) -> i64
	var filename = _i2p(faddr) as cstring&
	#for tt in TaskManager.execute_user_task(filename, nil,nil)
	for tt in TaskManager.execute_user_task(filename, &t, t.get_handle(fd_in), t.get_handle(fd_out))
		return tt.pid
	return -1
#
#	let h = sys_open(t, faddr, O_RDONLY)
#	if h < 0
#		return -ENOENT
#	for of in t.handles[h]
#		var filename: cstring
#		of.entry.get_path(filename)
#		var addr = TASK_IMAGE_POS # task space...
#		for tt in TaskManager.add_user_task(filename, addr, &t)
#			memcpy(&tt.arg, _i2p(faddr), sizeof(cstring))
#			var code = tt.page_root_dir.virtual_to_physical(TASK_MEMORY_OFFSET)
#			while true
#				let r = of.read(code, 1024)
#				if r <= 0
#					break
#				code += r
#			sys_close(t, h)
#			
##			for of_in in t.get_handle(fd_in)
##				tt.add_handle(of_in)
##			for of_out in t.get_handle(fd_out)
##				tt.add_handle(of_out)
#	
#			tt.activate()
#			return tt.pid
#		else
#			sys_close(t, h)
#			return -ENOMEM
#	sys_close(t, h)
#	return -1

func sys_getcwd(out t: Task, addr: i64) -> i64
	var pf = _i2p(addr) as cstring&
	t.cur_dir.get_path(pf)
	return 0
#	return -EFAULT

#	func mut sys_fork() -> int
#		var t = TaskManager.add_task_user("-fork-", _i2p(TASK_IMAGE_POS), &self)
#		if !t
#			return -ENOMEM
#		
#		# copy "normal" memory
#		t.sys_brk(mem_bottom + mem_size)
#		page_dir.copy_pages_to(t.page_dir, mem_bottom, mem_bottom, mem_size)
#		
#		# link shared memory
#		for i=>r in shmem
#			if !r.s
#				t.shmem[i].s = r.s
#				t.shmem[i].dest = r.dest
#				r.s.refcount ++
#				t.page_dir.map_lin(r.dest, r.s.p, r.s.size, true)
#		
#		# open files...
#		# TODO
#		
#		# data
#		memcpy(&t.arg, &arg, sizeof(cstring))
#		strcpy(t.name, name)
#		t.cur_dir = cur_dir
#		t.parent = &self
#		t.tss = tss
#		t.tss.cr3 = t.page_dir
#		t.tss.eax = 0 # fork() return for child
#	
#		t.activate()
#		return t.pid

#	func mut sys_sigaction(sig: int, addr: int) -> int
#		if sig < 0 or sig >= MAX_SIGNALS or sig == SIGSTOP or sig == SIGKILL
#			return -EINVAL
#		#prints(" SIGAC ")
#		#printh(&addr, 4)
#		signal_handlers[sig] = addr # task address space!
#		return 0
#		
#	func mut sys_exit_signal() -> int
#		if !in_signal
#			return -1
#		
#		#prints(" EXSIG ")
#		in_signal = false
#		if in_hw_irq >= 0
#			TaskManager.ack_hw_irq = in_hw_irq
#			in_hw_irq = -1
#		memcpy(&tss, &signal_reg_buf, sizeof(TaskStateSegment))
#		return 0
