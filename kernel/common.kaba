#define __STRING_CONST_AS_CSTRING__
use kaba

const O_RDONLY = 1
const O_WRONLY = 2
const O_RDWR = 3
const O_APPEND = 16
const O_CREATE = 32
const O_NONBLOCK = 64
const O_TRUNC = 128

const EWOULDBLOCK = 128
const ENOSPC = 127
const EACCES = 126
const EEXIST = 125
const EINVAL = 124
const ENOENT = 123
const ENOMEM = 122
const ESRCH = 121
const ECHILD = 120
const EBADF = 119
const ENFILE = 118
const EFAULT = 117
const ENOSYS = 116
const ENOTDIR = 115
const EISDIR = 114
const ENOTEMPTY = 113
const ENOTSOCK = 112
const EADDRINUSE = 111
const ECONNREFUSED = 110
const ENOTCONN = 109

const F_GETFL = 1
const F_SETFL = 2

const SEEK_SET = 1
const SEEK_CUR = 2
const SEEK_END = 3

const SHMAT = 9
const SHMDT = 10
const SHMGET = 11

const SYS_SOCKET = 1
const SYS_BIND = 2
const SYS_CONNECT = 3
const SYS_LISTEN = 4
const SYS_ACCEPT = 5
const SYS_SEND = 10
const SYS_SENDTO = 11
const SYS_RECV = 12
const SYS_RECVFROM = 13

let SHM_ABSOLUTE = 1<<20
let SHM_DEST = 1<<11
let IPC_CREAT = 1<<12
let IPC_EXCL = 1<<13


let KERNEL_NAME = "Eusebius"
let KERNEL_VERSION = "0.2.99.0"
let MACHINE_TYPE = "x64"


let KERNEL_MEMORY_SIZE = 0x00800000 # 8mb
let KERNEL_STACK_SIZE = 0x00020000 # 128k
let IDLE_STACK_SIZE = 0x00001000 # 4k

#--------------------------------------------------------------
# Low Level


func memcpy(_dest: void&, _source: void&, size: int)
	var dest = _dest as cstring&
	let source = _source as cstring&
	for n in 0:size
		dest[n] = source[n]
#	if size > 0
#		temp_i=size
#		temp_p=source
#		temp_p2=dest
#		asm{
#			mov ecx, temp_i
#			mov eax, temp_p
#			mov ebx, temp_p2
#			_mem_cpy_loop:
#				mov.b dl, [eax]
#				mov.b [ebx], dl
#				inc eax
#				inc ebx
#				loop _mem_cpy_loop
#		}

func strlen(s: cstring) -> int
	for i in 0:256
		if s[i] == 0
			return i
	return 256

func strcpy(out a: cstring, b: cstring)
	for i in 0:256
		a[i] = b[i]
		if b[i] == 0
			break

func strcat(out a: cstring, b: cstring)
	let n = strlen(a)
	for i in 0:256
		a[i+n] = b[i]
		if b[i] == 0
			break

func strcmp(a: cstring, b: cstring) -> int
	for i in 0:256
		if a[i] > b[i]
			return 1
		else if a[i] < b[i]
			return -1
		if a[i] == 0
			break
	return 0



func ceil_quot(n: int, m: int) -> int
	return (n + m - 1) / m

func ceil_quot(n: int64, m: int64) -> int64
	return (n + m - 1) / m

var __temp_i__, __temp_i2__, __temp_i3__, __temp_i4__: int
var __temp_i64__: int64
var __temp_p__, __temp_p2__, __temp_p3__, __temp_p4__: void*
func _p2i(p: void*) -> int
	return &p as int&
func _p2i64(p: void*) -> int64
	return &p as int64&

class PointerWrapper as @noauto
	var p: void&

func _i2p(i: int) -> void&
	return _i642p(i)


## FIXME
func _i642p(i: int64) -> void&
	var p = &i as PointerWrapper&
	return p.p


class Word
	var c: char[2]
	func __int__() -> int
		let a: int = c[0]
		let b: int = c[1]
		return a + b * 256
	func mut set(i: int)
		c[0] = i
		c[1] = i >> 8
	func mut __iadd__(d: int)
		set(int(self) + d)
		


#func _call_ppii(f: Function*, a: void*, b: void*, c: int, d: int) -> int
#	__temp_p__ = f
#	__temp_p2__ = a
#	__temp_p3__ = b
#	__temp_i__ = c
#	__temp_i2__ = d
#	asm{
#		mov eax, __temp_p__
#		push __temp_i2__
#		push __temp_i__
#		push __temp_p3__
#		push __temp_p2__
#		call eax
#		mov __temp_i__, eax
#		sub esp, 0x10
#	}
#	return __temp_i__
#
#
#func _call_ppi(f: Function*, a: void*, b: void*, c: int) -> int
#	__temp_p__ = f
#	__temp_p2__ = a
#	__temp_p3__ = b
#	__temp_i__ = c
#	asm{
#		mov eax, __temp_p__
#		push __temp_i__
#		push __temp_p3__
#		push __temp_p2__
#		call eax
#		mov __temp_i__, eax
#		sub esp, 0x0c
#	}
#	return __temp_i__
#
#
#func _call_pi(f: Function*, a: void*, b: int) -> int
#	__temp_p__ = f
#	__temp_p2__ = a
#	__temp_i__ = b
#	asm{
#		mov eax, __temp_p__
#		push __temp_i__
#		push __temp_p2__
#		call eax
#		mov __temp_i__, eax
#		sub esp, 0x08
#	}
#	return __temp_i__
#
#
#func _call_pp(f: Function*, a: void*, b: void*) -> int
#	__temp_p__ = f
#	__temp_p2__ = a
#	__temp_p3__ = b
#	asm{
#		mov eax, __temp_p__
#		push __temp_p3__
#		push __temp_p2__
#		call eax
#		mov __temp_i__, eax
#		sub esp, 0x08
#	}
#	return __temp_i__
#
#func call_p(f: Function*, a: void*) -> int
#	__temp_p__ = f
#	__temp_p2__ = a
#	asm{
#		mov eax, __temp_p__
#		push __temp_p2__
#		call eax
#		mov __temp_i__, eax
#		sub esp, 0x04
#	}
#	return __temp_i__
