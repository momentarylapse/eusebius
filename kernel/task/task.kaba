use common.*
use io.text.*
use fs.*
use fs.pipe.*
use fs.access.*
##use mem.heap.*
use mem.paging.*
use mem.shared.*
use net.socket.*
use irq.irq.*
use time.timevalue.*
##use gdt.*



let MAX_OPEN_FILES_PER_TASK = 16
let MAX_SHARED_MEMS_PER_TASK = 16

let SIGKILL = 9
let SIGSEGV = 11
let SIGCONT = 18
let SIGSTOP = 19
let SIGX = 23
let MAX_SIGNALS = 32


let TASK_MEMORY_OFFSET = 0x40000000 # 1g
let TASK_IMAGE_POS = TASK_MEMORY_OFFSET
let TASK_STACK_POS = 0x40070000
let TASK_STACK_SIZE = 0x00010000 # 512k
let NUM_PRE_GDT_ENTRIES = 5
let TASK_INITIAL_MEMORY_SIZE = 0x00800000 # 8m

let TASK_MAX_MESSAGES = 16

enum TaskStatus as @noauto
	UNUSED
	SLEEPING
	RUNNING
	WAITING
	ZOMBIE
	INTERRUPT
	#DEAD
	IDLE


#var TaskCallData: int[2]

enum WaitingMode as @noauto
	TASK_EXIT
	FILE_READ
	FILE_WRITE
	TIME
	MESSAGE
	SOCKET_ACCEPT
	SOCKET_CONNECT

class TaskSharedMemoryRef as @noauto
	var s: SharedMemory.Block*
	var vaddr: i64

class Task
	var stack: void&
	var frame: InterruptFrame
	var syscall_rsp: void&
#	var desc: int
	var pid, puid: int
	var status: TaskStatus
	var return_status: int
	var waiting_mode: WaitingMode
	var waiting_param_i1, waiting_param_i2, waiting_param_i3: int
	var sleep_and_wait: bool
	var parent: Task*
	var name: cstring
	var arg: cstring
	var cur_dir: FileEntry&
	var page_root_dir: PageRootTable&
	var memory_offset, memory_size: int
	
	var time_all, time_temp: TimeValue
	var cpu_load: int
	
#	var kernel_mode: bool
	var handles: OpenFileData*[MAX_OPEN_FILES_PER_TASK]
	var shmem: TaskSharedMemoryRef[MAX_SHARED_MEMS_PER_TASK]
#	
	var signal_handlers: int[MAX_SIGNALS]
#	var signal_reg_buf: TaskStateSegment
	var in_signal: bool
	var in_hw_irq: int
	
	var first_time_running: bool
	
	func mut init(_pid: int, _name: cstring, F: i64, _parent: Task*)
		for mut h in handles
			h = nil
		for mut s in shmem
			s.s = nil
		for mut s in signal_handlers
			s = 0
		sleep_and_wait = false
		first_time_running = true
			
		pid = _pid

		strcpy(name, _name)
		for mut a in arg
			a = 0
		status = TaskStatus.SLEEPING
		parent = _parent
		for p in parent
			cur_dir := p.cur_dir
		else
			cur_dir := FileSystem.root
#		kernel_mode = false
		
		in_signal = false
		in_hw_irq = -1
	
		stack := _i2p(TASK_STACK_POS)
		frame.rsp = _p2i(stack) + TASK_STACK_SIZE
		frame.rbp = frame.rsp
		frame.rip = F
		frame.cs = 0x20 + 3
		frame.ss = 0x18 + 3
		frame.rax = 0
		frame.cr0 = 0x80000013 # paging + extension + coprocesor + protected
		frame.cr3 = _p2i(page_root_dir)
		frame.cr4 = 0x00000220 # sse=1 + ...
		frame.rflags = 0x3200 # iopl=3 + interrupts=1

##	t.mem_bottom = KERNEL_MEM
##	t.mem_size = INITIAL_TASK_MEM
##	t.page_dir = paging.create_page_directory()
##	t.page_dir.map_lin(PAGE_SIZE, PAGE_SIZE, KERNEL_MEM - PAGE_SIZE, false)
##	if !t.page_dir.map_by_alloc(t.mem_bottom, t.mem_size, true)
##		panic("incomplete page dir") # ...
##	t.tss.set(t.get_initial_stack_pos(), 3, 4, 3, t.page_dir, func)
##	GlobalDescriptorTable[t.desc].set_task(t)

		time_all.clear()
		cpu_load = 0
		time_temp.clear()

	func mut activate()
		if sleep_and_wait
			status = TaskStatus.SLEEPING
			sleep_and_wait = false
		else
			status = TaskStatus.RUNNING
	
#	# nur um einmalig den Scheduler zu starten
#	func mut run_forced()
#		#prints("springe in ")
##		printi(t.pid)
##		prints(t.name)
#		# "Task Gate Descriptor" ---- falsch, kein gate!
#		TaskCallData[0] = 0
#		TaskCallData[1] = 8 * desc
#		#printi(t.desc)
#		#prints(":\n")
#		__temp_p__ = &TaskCallData[0]
#
#		# in Task springen
#		#t.status = TASK_STATUS_RUNNING
#		asm{
#			mov eax, __temp_p__
#			#db 0xff
#			#db 0x28
#			#jmp_far [eax]
#			db 0xff
#			db 0x18
#			#call_far [eax]
#			#jmp_far 0x004000000000 #0x0040:0x00000000
#		}
#	func addr2kernel(addr: int) -> int
#		return page_dir.addr2kernel(addr)
	
	func mut set_cur_dir(dir: cstring) -> int
		for e in get_file(dir)
			if e.type != FileType.DIR
				return -2
			cur_dir := &e
			return 0
		return -1
		
	func get_file(path: cstring) -> FileEntry*
		return FileSystem.get(path, cur_dir)
		
	func mut add_handle(oh: OpenFileData&) -> int
		for i=>h in handles
			if !h
				handles[i] = oh
				oh.ref_count ++
				return i
		return -1

	func mut clean_up_resources()
		for i=>_h in handles
			for h in _h
				h.unref()
				handles[i] = nil
		
#		for s in shmem
#			if s.s
#				page_dir.unmap(s.dest, s.s.size, false)
#				s.s.unref()
#				s.s = nil

		#page_dir.unmap(0, KERNEL_MEM, false)
		page_root_dir.unmap(memory_offset, memory_size, true)

	func mut clean_up_deep()
		clean_up_resources()
		Paging.free_physical_page(page_root_dir.e[0])
		Paging.free_physical_page(_p2i(page_root_dir))
		status = TaskStatus.UNUSED
		puid = -1
		#if in_hw_irq >= 0
		#	TaskManager.ack_hw_irq = in_hw_irq
		
		
#	func get_initial_stack_pos() -> void*
#		return _i2p(_p2i(stack) + stack_size)
	
	func mut set_wait(mode: WaitingMode, param_i1: int, param_i2: int, param_i3: int)
		status = TaskStatus.WAITING
		waiting_mode = mode
		waiting_param_i1 = param_i1
		waiting_param_i2 = param_i2
		waiting_param_i3 = param_i3
	
	func pages_alloced() -> int
		var n = memory_size / PAGE_SIZE
		n += page_root_dir.count_entries() # all page tables
		n ++ # page_dir itself
		return n

		
#	func get_prev_pid() -> int
#		return (tss.prev >> 3) - NUM_PRE_GDT_ENTRIES
#		
#	func mut handle_signal_link_iret(signal: int) -> int
#		if signal < 0 or signal >= MAX_SIGNALS
#			return -EINVAL
#		#prints(" handle/link:")
#		
#		#printi(signal)
#		#prints(" ")
#		#printi(signal_handlers[signal])
#		if in_signal
#			prints(" in sig...die")
#			if in_hw_irq >= 0
#				TaskManager.ack_hw_irq = in_hw_irq
#				in_hw_irq = -1
#			die(0) # we're very friendly :-P
#
#		else if signal_handlers[signal] != 0
#			#prints("...user > link iret ")
#			in_signal = true
#			# save registers
#			memcpy(&signal_reg_buf, &tss, sizeof(TaskStateSegment))
#			
#			tss.edx = signal_handlers[signal]
#			# allocate some extra space on the stack
#			tss.esp = _i2p(_p2i(tss.esp) - 2048)
#			tss.ebp = tss.esp
#			# run the handler "loader stage" (in kernel memory)
#			tss.eip = TaskManager.task_signal_handler
#		else
#			# default actions
#			if signal == SIGSTOP
#				if status == TaskStatus.RUNNING
#					status = TaskStatus.SLEEPING
#				else if status == TaskStatus.WAITING
#					sleep_and_wait = true
#			else if signal == SIGCONT
#				if status == TaskStatus.SLEEPING
#					status = TaskStatus.RUNNING
#				else if status == TaskStatus.WAITING
#					sleep_and_wait = false
#			else
#				die(0)
#		return 0

#--------------------------------------------------------------
# file access
	
	func get_handle(handle: int) -> OpenFileData*
		if (handle < 0) or (handle >= MAX_OPEN_FILES_PER_TASK)
			return nil
		return handles[handle]


