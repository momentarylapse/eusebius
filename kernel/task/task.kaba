use common
use io.text
use fs.fs
use fs.pipe
use fs.access
use mem.heap
use mem.paging
use mem.shared
use net.socket
use time.timevalue




const MAX_OPEN_FILES_PER_TASK = 16
const MAX_SHARED_MEMS_PER_TASK = 16

const SIGKILL = 9
const SIGSEGV = 11
const SIGCONT = 18
const SIGSTOP = 19
const SIGX = 23
const MAX_SIGNALS = 32


#--------------------------------------------------------------
# Tasks

const KERNEL_STACK_SIZE = 0x00020000 # 128k
const KERNEL_MEM = 0x00800000 # 8mb
const IDLE_STACK_SIZE = 0x00001000 # 4k

const MAX_TASKS = 256
const TASK_IMAGE_POS = KERNEL_MEM
const TASK_STACK_SIZE = 0x00080000 # 512k
const TASK_STACK_POS = 0x00880000
const NUM_PRE_GDT_ENTRIES = 5
const INITIAL_TASK_MEM = 0x00800000 # 8m

const TASK_MAX_MESSAGES = 16

enum
	TASK_STATUS_UNUSED
	TASK_STATUS_SLEEPING
	TASK_STATUS_RUNNING
	TASK_STATUS_WAITING
	TASK_STATUS_ZOMBIE
	TASK_STATUS_INTERRUPT
	#TASK_STATUS_DEAD

class TaskStateSegment
	var prev: int
	var esp0: void*
	var ss0: int
	var esp1: void*
	var ss1: int
	var esp2: void*
	var ss2: int
	var cr3: PageDirectory*
	var eip: void*
	var eflags: int
	var eax: int
	var ecx: int
	var edx: int
	var ebx: int
	var esp: void*
	var ebp: void*
	var esi: int
	var edi: int
	var es, cs, ss, ds, fs, gs: int
	var x, y: int
	
	
	func set(stack_pointer: void*, _cs: int, _ds: int, pvl: int, page_dir: PageDirectory, task: void*)
		int _ss = _ds
		prev = 0 # previous TSS (dynamisch)
		esp0 = stack_pointer
		ss0 = _ss * 8
		esp1 = stack_pointer
		ss1 = _ss * 8
		esp2 = stack_pointer
		ss2 = _ss * 8
		cr3 = &page_dir
		eip = task
		eflags = 0x200 + pvl * 0x1000 # IterruptFlag + PVL
		eax = 0
		ecx = 0
		edx = 0
		ebx = 0
		esp = stack_pointer
		ebp = stack_pointer
		esi = 0
		edi = 0
		es = _ds * 8
		cs = _cs * 8
		ss = _ss * 8
		ds = _ds * 8
		fs = _ds * 8
		gs = _ds * 8
		x = 0
		y = 0

var TaskCallData: int[2]

enum
	WAITING_MODE_TASK_EXIT
	WAITING_MODE_FILE_READ
	WAITING_MODE_FILE_WRITE
	WAITING_MODE_TIME
	WAITING_MODE_MESSAGE
	WAITING_MODE_SOCKET_ACCEPT
	WAITING_MODE_SOCKET_CONNECT

class TaskSharedMemoryRef
	var s: SharedMemory.Block*
	var dest: int



class Task
	var tss: TaskStateSegment
	var stack: int[0]*
	var stack_size: int
	var desc: int
	var pid, puid, status: int
	var return_status: int
	var waiting_mode: int
	var waiting_param_i1, waiting_param_i2, waiting_param_i3: int
	var sleep_and_wait: bool
	var parent: Task*
	var name: cstring
	var arg: cstring
	var cur_dir: FileEntry*
	var page_dir: PageDirectory*
	var mem_bottom, mem_size: int
	
	var time_all, time_temp: TimeValue
	var cpu_load: int
	
	var kernel_mode: bool
	var handles: OpenFileData*[MAX_OPEN_FILES_PER_TASK]
	var shmem: TaskSharedMemoryRef[MAX_SHARED_MEMS_PER_TASK]
	
	var signal_handlers: int[MAX_SIGNALS]
	var signal_reg_buf: TaskStateSegment
	var in_signal: bool
	var in_hw_irq: int
	
	func init(_pid: int, _name: cstring, _parent: Task*)
		for s in signal_handlers
			s = 0
		sleep_and_wait = false
			
		pid = _pid
		puid = TaskManager.next_puid_to_assign
		TaskManager.next_puid_to_assign ++

		strcpy(name, _name)
		desc = NUM_PRE_GDT_ENTRIES + pid
		status = TASK_STATUS_SLEEPING
		parent = _parent
		if parent
			cur_dir = parent.cur_dir
		else
			cur_dir = FileSystem.root
		kernel_mode = false
		
		in_signal = false
		in_hw_irq = -1
	
		#t.stack_size = TASK_STACK_SIZE
#	t.stack = _i2p(TASK_STACK_POS)
#	t.mem_bottom = KERNEL_MEM
#	t.mem_size = INITIAL_TASK_MEM
#	t.page_dir = paging.create_page_directory()
#	t.page_dir.map_lin(PAGE_SIZE, PAGE_SIZE, KERNEL_MEM - PAGE_SIZE, false)
#	if !t.page_dir.map_by_alloc(t.mem_bottom, t.mem_size, true)
#		panic("incomplete page dir") # ...
#	t.tss.set(t.get_initial_stack_pos(), 3, 4, 3, t.page_dir, func)
#	GlobalDescriptorTable[t.desc].set_task(t)
	
		time_all.clear()
		cpu_load = 0
		time_temp.clear()
	
	func __assign__(o: Task)
		pass
	
	func activate()
		if sleep_and_wait
			status = TASK_STATUS_SLEEPING
			sleep_and_wait = false
		else
			status = TASK_STATUS_RUNNING
	
	# nur um einmalig den Scheduler zu starten
	func run_forced()
		#prints("springe in ")
#		printi(t.pid)
#		prints(t.name)
		# "Task Gate Descriptor" ---- falsch, kein gate!
		TaskCallData[0] = 0
		TaskCallData[1] = 8 * desc
		#printi(t.desc)
		#prints(":\n")
		__temp_p__ = &TaskCallData[0]

		# in Task springen
		#t.status = TASK_STATUS_RUNNING
		asm{
			mov eax, __temp_p__
			#db 0xff
			#db 0x28
			#jmp_far [eax]
			db 0xff
			db 0x18
			#call_far [eax]
			#jmp_far 0x004000000000 #0x0040:0x00000000
		}
	func addr2kernel(addr: int, out offset: int*) -> int
		return page_dir.addr2kernel(addr, offset)
	
	func set_cur_dir(dir: cstring) -> int
		FileEntry *e = get_file(dir)
		if !e
			return -1
		if e.type != FILE_TYPE_DIR
			return -2
		cur_dir = e
		return 0
		
	func get_file(path: cstring) -> FileEntry*
		return FileSystem.get(path, cur_dir)
		
	func add_handle(oh: OpenFileData) -> int
		for h,i in handles
			if !h
				h = &oh
				oh.ref_count ++
				return i
		return -1

	func clean_up_resources()
		for h in handles
			if h
				h.unref()
				h = nil
		
		for s in shmem
			if s.s
				page_dir.unmap(s.dest, s.s.size, false)
				s.s.unref()
				s.s = nil
				
		if !kernel_mode
			if page_dir
				page_dir.unmap(0, KERNEL_MEM, false)
				page_dir.unmap(mem_bottom, mem_size, true)
				Paging.free_page(_p2i(page_dir))
				page_dir = nil

	func clean_up_deep()
		clean_up_resources()
		status = TASK_STATUS_UNUSED
		puid = -1
		#if in_hw_irq >= 0
		#	TaskManager.ack_hw_irq = in_hw_irq
		
	
	func send_death_message()
		for t in TaskManager.tasks
			if t.status == TASK_STATUS_WAITING
				if t.waiting_mode == WAITING_MODE_TASK_EXIT and t.waiting_param_i1 == pid
					t.tss.eax = 0# # return waitpid()
					t.page_dir.memcpy2task(t.waiting_param_i2, &return_status, 4)
					clean_up_deep()
					t.activate()
		
	func get_initial_stack_pos() -> void*
		return _i2p(_p2i(stack) + stack_size)
	
	func set_wait(mode: int, param_i1: int, param_i2: int, param_i3: int)
		status = TASK_STATUS_WAITING
		waiting_mode = mode
		waiting_param_i1 = param_i1
		waiting_param_i2 = param_i2
		waiting_param_i3 = param_i3
	
	func pages_alloced() -> int
		int n = mem_size / PAGE_SIZE
		n += page_dir.count_entries() # all page tables
		n ++ # page_dir itself
		return n
	
	
	func die(r: int)
		return_status = r
		clean_up_resources()
		status = TASK_STATUS_ZOMBIE
		send_death_message()
		
	func get_prev_pid() -> int
		return (tss.prev >> 3) - NUM_PRE_GDT_ENTRIES
		
	func handle_signal_link_iret(signal: int) -> int
		if signal < 0 or signal >= MAX_SIGNALS
			return -EINVAL
		#prints(" handle/link:")
		
		#printi(signal)
		#prints(" ")
		#printi(signal_handlers[signal])
		if in_signal
			prints(" in sig...die")
			if in_hw_irq >= 0
				TaskManager.ack_hw_irq = in_hw_irq
				in_hw_irq = -1
			die(0) # we're very friendly :-P

		else if signal_handlers[signal] != 0
			#prints("...user > link iret ")
			in_signal = true
			# save registers
			memcpy(&signal_reg_buf, &tss, sizeof(TaskStateSegment))
			
			tss.edx = signal_handlers[signal]
			# allocate some extra space on the stack
			tss.esp = _i2p(_p2i(tss.esp) - 2048)
			tss.ebp = tss.esp
			# run the handler "loader stage" (in kernel memory)
			tss.eip = TaskManager.task_signal_handler
		else
			# default actions
			if signal == SIGSTOP
				if status == TASK_STATUS_RUNNING
					status = TASK_STATUS_SLEEPING
				else if status == TASK_STATUS_WAITING
					sleep_and_wait = true
			else if signal == SIGCONT
				if status == TASK_STATUS_SLEEPING
					status = TASK_STATUS_RUNNING
				else if status == TASK_STATUS_WAITING
					sleep_and_wait = false
			else
				die(0)
		return 0

#--------------------------------------------------------------
# file access
	
	func get_handle(handle: int) -> OpenFileData*
		if (handle < 0) or (handle >= MAX_OPEN_FILES_PER_TASK)
			return nil
		return handles[handle]

	func open(filename: cstring, flags: int) -> int
		var of = kernel_open(filename, flags, cur_dir)
		if !of
			return -ENOENT
		int index = add_handle(of)
		if index < 0
			of.unref()
		return index

	func sys_open(faddr: int, flags: int) -> int
		cstring filename
		if !page_dir.memcpy2kernel(&filename, faddr, sizeof(cstring))
			return -EFAULT
		return open(filename, flags)


	func sys_read(handle: int, addr: int, size: int) -> int
		var of = get_handle(handle)
		if !of
			return -EBADF
		int r = of.read(page_dir, addr, size)
		if r == -EWOULDBLOCK and of.blocking
			set_wait(WAITING_MODE_FILE_READ, handle, addr, size)
		return r


	func sys_write(handle: int, addr: int, size: int) -> int
		var of = get_handle(handle)
		if !of
			return -EBADF
		int r = of.write(page_dir, addr, size)
		if r == -EWOULDBLOCK and of.blocking
			set_wait(WAITING_MODE_FILE_WRITE, handle, addr, size)
		return r

	func sys_getdents(handle: int, addr: int, num: int) -> int
		var of = get_handle(handle)
		if !of
			return -EBADF
		return of.getdents(page_dir, addr, num)


	func sys_seek(handle: int, offset: int, mode: int) -> int
		var of = get_handle(handle)
		if !of
			return -EBADF
		return of.seek(offset, mode)

	func sys_close(handle: int) -> int
		var of = get_handle(handle)
		if !of
			return -EBADF
		of.unref()
		handles[handle] = nil
		return 0
	
	func sys_dup(fd: int) -> int
		var of = get_handle(fd)
		if !of
			return -EBADF
		int index = add_handle(of)
		return index
	
	func sys_pipe(addr: int) -> int
		var e = create_file_entry(":pipe:", FILE_TYPE_PIPE, nil)
		if !e
			return -ENFILE
		if !PipeManager.create(e)
			return -3
		var of_in = kernel_open_entry(e, O_RDONLY)
		var of_out = kernel_open_entry(e, O_WRONLY)
		int[2] fd
		fd[0] = add_handle(of_in)
		fd[1] = add_handle(of_out)
		if fd[0] < 0 or fd[1] < 0
			return -2
		if !page_dir.memcpy2task(addr, &fd, 8)
			return -EFAULT
		return 0
	
	func sys_set_cur_dir(faddr: int) -> int
		cstring filename
		if !page_dir.memcpy2kernel(&filename, faddr, sizeof(cstring))
			return -EFAULT
		return set_cur_dir(filename)
		
	func sys_mkdir(faddr: int) -> int
		cstring filename
		if !page_dir.memcpy2kernel(&filename, faddr, sizeof(cstring))
			return -EFAULT
		return kernel_mkdir(filename, cur_dir)

	func sys_mknod(faddr: int, flags: int) -> int
		cstring filename
		if !page_dir.memcpy2kernel(&filename, faddr, sizeof(cstring))
			return -EFAULT
		return kernel_mknod(filename, flags, cur_dir)
		
	func sys_unlink(faddr: int) -> int
		cstring filename
		if !page_dir.memcpy2kernel(&filename, faddr, sizeof(cstring))
			return -EFAULT
		return kernel_unlink(filename, cur_dir)
		
	func sys_rmdir(faddr: int) -> int
		cstring filename
		if !page_dir.memcpy2kernel(&filename, faddr, sizeof(cstring))
			return -EFAULT
		return kernel_rmdir(filename, cur_dir)
	
	func sys_execute(faddr: int, fd_in: int, fd_out: int) -> int
		int h = sys_open(faddr, O_RDONLY)
		if h < 0
			return -ENOENT
		var of = handles[h]
		cstring filename
		of.entry.get_path(filename)
		int addr = TASK_IMAGE_POS # task space...
		var t = TaskManager.add_task_user(filename, _i2p(addr), &self)
		if !t
			sys_close(h)
			return -ENOMEM
		if !page_dir.memcpy2kernel(&t.arg, faddr, sizeof(cstring))
			return -EFAULT
		while true
			#int r = sys_read(caller, h, addr, 1024)
			int r = of.read(t.page_dir, addr, 1024)
			if r <= 0
				break
			addr += r
		sys_close(h)
		
		var of_in = get_handle(fd_in)
		var of_out = get_handle(fd_out)
		t.add_handle(of_in)
		t.add_handle(of_out)
	
		t.activate()
		return t.pid

	func sys_exit(r: int)
		die(r)

	func sys_waitpid(_pid: int, status_addr: int, options: int) -> int
		var t = TaskManager.get_task(_pid)
		if !t
			return -ECHILD
		if t.status == TASK_STATUS_ZOMBIE
			page_dir.memcpy2task(status_addr, &t.return_status, 4)
			t.clean_up_deep()
			activate()
			return 0
		if (options & 1) > 0
			return -2
		set_wait(WAITING_MODE_TASK_EXIT, _pid, status_addr, 0)
		return 0

	func sys_kill(_pid: int, signal: int) -> int
		var t = TaskManager.get_task(_pid)
		if !t
			return -ESRCH
		return t.handle_signal_link_iret(signal)
	
	func sys_nanosleep(p1: int, p2: int) -> int
		TimeValue tv
		if !page_dir.memcpy2kernel(&tv, p1, sizeof(tv))
			return -EFAULT
		set_wait(WAITING_MODE_TIME, tv.sec, tv.nanosec, 0)
		return 0

	func sys_brk(_new_top: int) -> int
		int new_top = ceil_quot(_new_top, PAGE_SIZE) * PAGE_SIZE
		int cur_top = mem_bottom + mem_size
		if new_top <= cur_top
			return cur_top
		if !page_dir.map_by_alloc(cur_top, new_top - cur_top, true)
			return -ENOMEM
		mem_size = new_top - mem_bottom
		return new_top
	
	func sys_fcntl(fd: int, op: int, param: int) -> int
		var of = get_handle(fd)
		if !of
			return -EBADF
		if op == F_GETFL
			return of.get_flags()
		if op == F_SETFL
			of.set_flags(param)
			return 0
		return -EINVAL
	
	func sys_fork() -> int
		var t = TaskManager.add_task_user("-fork-", _i2p(TASK_IMAGE_POS), &self)
		if !t
			return -ENOMEM
		
		# copy "normal" memory
		t.sys_brk(mem_bottom + mem_size)
		page_dir.copy_pages_to(t.page_dir, mem_bottom, mem_bottom, mem_size)
		
		# link shared memory
		for r,i in shmem
			if !r.s
				t.shmem[i].s = r.s
				t.shmem[i].dest = r.dest
				r.s.refcount ++
				t.page_dir.map_lin(r.dest, r.s.p, r.s.size, true)
		
		# open files...
		# TODO
		
		# data
		memcpy(&t.arg, &arg, sizeof(cstring))
		strcpy(t.name, name)
		t.cur_dir = cur_dir
		t.parent = &self
		t.tss = tss
		t.tss.cr3 = t.page_dir
		t.tss.eax = 0 # fork() return for child
	
		t.activate()
		return t.pid
	
	func sys_ipc(cmd: int, p1: int, p2: int, p3: int) -> int
		if cmd == SHMGET
			return SharedMemory.shm_get(p1, p2, p3, pid)
		else if cmd == SHMAT
			for r in shmem
				if !r.s
					r.s = SharedMemory.get(p1)
					if !r.s
						return -ENOENT
					r.dest = page_dir.find_free_space(0xe0000000, r.s.size) #0xa0000000
					if r.dest == -1
						return -ENOMEM
					r.s.refcount ++
					page_dir.map_lin(r.dest, r.s.p, r.s.size, true)
					if !page_dir.memcpy2task(p2, &r.dest, 4)
						return -EFAULT
					return 0
			return -1
		else if cmd == SHMDT
			for r in shmem
				if r.s and r.dest == p1
					page_dir.unmap(r.dest, r.s.size, false)
					r.s.unref()
					r.s = nil
					return 0
			return -1
		else if cmd == 1001 # wait-for-message
			set_wait(WAITING_MODE_MESSAGE, 0, 0, 0)
			return 0
		else if cmd == 1002 # yield / wake-up
			var t = TaskManager.get_task(p1)
			if t
				t.activate()
			set_wait(WAITING_MODE_TIME, 0, 0, 0)
			return 0
		return -EINVAL
	
	func sys_socket(cmd: int, p1: int, p2: int) -> int
		if cmd == SYS_SOCKET
			var e = create_file_entry(":sock:", FILE_TYPE_SOCKET, nil)
			if !e
				return -ENFILE
			if !SocketManager.create(e, p1)
				return -3
			OpenFileData *of = kernel_open_entry(e, O_RDWR)
			return add_handle(of)
		else if cmd == SYS_BIND
			OpenFileData *of = get_handle(p1)
			if !of
				return -EBADF
			if of.entry.type != FILE_TYPE_SOCKET
				return -ENOTSOCK
			return of.socket.bind(p2)
		else if cmd == SYS_CONNECT
			var of = get_handle(p1)
			if !of
				return -EBADF
			if of.entry.type != FILE_TYPE_SOCKET
				return -ENOTSOCK
			int e = of.socket.connect(p2)
			if e != -EWOULDBLOCK
				return e
			set_wait(WAITING_MODE_SOCKET_CONNECT, of.socket.port, 0, 0)
			return 0
		else if cmd == SYS_LISTEN
			var of = get_handle(p1)
			if !of
				return -EBADF
			if of.entry.type != FILE_TYPE_SOCKET
				return -ENOTSOCK
			return of.socket.listen()
		else if cmd == SYS_ACCEPT
			var of = get_handle(p1)
			if !of
				return -EBADF
			if of.entry.type != FILE_TYPE_SOCKET
				return -ENOTSOCK
			int e = of.socket.accept()
			if e == -EWOULDBLOCK
				if of.socket.blocking
					set_wait(WAITING_MODE_SOCKET_ACCEPT, of.socket.port, 0, 0)
					return 0
				else
					return e
			if e < 0
				return e
			# port
			var s = SocketManager.get_by_port(e)
			if !s
				return -1
			of = kernel_open_entry(s.e, O_RDWR)
			return add_handle(of)
		return -EINVAL
	
	func sys_sigaction(sig: int, addr: int) -> int
		if sig < 0 or sig >= MAX_SIGNALS or sig == SIGSTOP or sig == SIGKILL
			return -EINVAL
		#prints(" SIGAC ")
		#printh(&addr, 4)
		signal_handlers[sig] = addr # task address space!
		return 0
		
	func sys_exit_signal() -> int
		if !in_signal
			return -1
		
		#prints(" EXSIG ")
		in_signal = false
		if in_hw_irq >= 0
			TaskManager.ack_hw_irq = in_hw_irq
			in_hw_irq = -1
		memcpy(&tss, &signal_reg_buf, sizeof(TaskStateSegment))
		return 0
	
	func do_wait_update()
		if waiting_mode == WAITING_MODE_FILE_READ
			int r = sys_read(waiting_param_i1, waiting_param_i2, waiting_param_i3)
			if r >= 0
				tss.eax = r # return r
				activate()
		else if waiting_mode == WAITING_MODE_FILE_WRITE
			int r = sys_write(waiting_param_i1, waiting_param_i2, waiting_param_i3)
			if r >= 0
				tss.eax = r # return r
				activate()
		#else if waiting_mode == WAITING_MODE_TIME
#			TimeValue *rem = &waiting_param_i1
#			rem.dec_nanosec(kernel_timer.dt_nanosec)
#			if rem.sec < 0
#				tss.eax = 0 # return 0
#				activate()
		else if waiting_mode == WAITING_MODE_SOCKET_ACCEPT
			KSocket *s = SocketManager.get_by_port(waiting_param_i1)
			if !s
				tss.eax = -EINVAL # return ...
				activate()
			if s.state == SOCK_STATE_WAIT_ACCEPT
				int e = s.accept()
				if e == -EWOULDBLOCK
					return
				if e < 0
					tss.eax = e # return e
				else
					s = SocketManager.get_by_port(e)
					if !s
						tss.eax = -2  # return -2
					else
						OpenFileData *of = kernel_open_entry(s.e, O_RDWR)
						tss.eax = add_handle(of) # return 0
				activate()
		else if waiting_mode == WAITING_MODE_SOCKET_CONNECT
			var s = SocketManager.get_by_port(waiting_param_i1)
			if !s
				tss.eax = -EINVAL # return ...
				activate()
			if s.state != SOCK_STATE_CONNECTING
				tss.eax = 0 # return 0
				activate()


class GlobalDescriptorData
	var a, b: int
	func set_base(base: int, limit: int, gran: bool)
		a = (base << 16) + (limit & 0xffff) # base[15..0] limit[15..0]
		b = (base & 0xff000000) + (limit & 0x0f0000) + ((base >> 16) & 0xff)  # base[31..24],..limit[19..16] not busy, base[23..16]
		b += 0x00008000 # present
		if gran
			b += 0x00800000
	func set_data(base: int, limit: int, executable: bool, pvl: int)
		set_base(base, limit >> 12, true)
		b += 0x00401200
		if executable
			b += 0x00000800
		b += 0x00002000 * pvl
	func set_task(t: Task)
		set_base(_p2i(&t.tss), 103, false)
		b += 0x00000900 # not busy
	func set_busy(busy: bool)
		if busy
			b = b | 0x200
		else
			b = b & 0xfffffdff


var kernel_task: Task*


class TaskManager
	func static get_task(pid: int) -> Task*
		if pid < 0 or pid >= MAX_TASKS
			return nil
		var t = &tasks[pid]
		if t.status == TASK_STATUS_UNUSED
			return nil
		return t

	var static tasks: Task[MAX_TASKS]
	var static idle_task: Task*
	var static next_pid_to_assign: int
	var static next_puid_to_assign: int
	
	var static __handler_p__: int
	var static ack_hw_irq: int


	var static gdt: GlobalDescriptorData[NUM_PRE_GDT_ENTRIES + MAX_TASKS]

	func static get_next_pid() -> int
		for i in next_pid_to_assign:MAX_TASKS
			if tasks[i].status == TASK_STATUS_UNUSED
				next_pid_to_assign = i + 1
				return i
		for i in 0:next_pid_to_assign
			if tasks[i].status == TASK_STATUS_UNUSED
				next_pid_to_assign = i + 1
				return i
		return -1

	func static add_task_user(name: cstring, F: void*, parent: Task*) -> Task*
		int pid = get_next_pid()
		if pid < 0
			return nil
		var t = &tasks[pid]
	
		t.init(pid, name, parent)
		t.kernel_mode = false
	
		t.stack_size = TASK_STACK_SIZE
		t.stack = _i2p(TASK_STACK_POS)
		t.mem_bottom = KERNEL_MEM
		t.mem_size = INITIAL_TASK_MEM
		t.page_dir = Paging.create_page_directory()
		t.page_dir.map_lin(PAGE_SIZE, PAGE_SIZE, KERNEL_MEM - PAGE_SIZE, false)
		if !t.page_dir.map_by_alloc(t.mem_bottom, t.mem_size, true)
			panic("incomplete page dir") # ...
		t.tss.set(t.get_initial_stack_pos(), 3, 4, 3, t.page_dir, F)
		gdt[t.desc].set_task(t)

		return t

	func static add_task_kernel(name: cstring, F: void*, stack_size: int, parent: Task*) -> Task*
		int pid = get_next_pid()
		if pid < 0
			return nil
		var t = &tasks[pid]

		t.init(pid, name, parent)
		t.kernel_mode = true
	
		t.stack_size = stack_size
		t.stack = Heap.malloc(stack_size)
		t.page_dir = Paging.kernel_page_dir
		t.mem_bottom = 0
		t.mem_size = 0
		t.tss.set(t.get_initial_stack_pos(), 1, 2, 0, Paging.kernel_page_dir, F)
	
		gdt[t.desc].set_task(t)

		return t

	func static idle_func()
		while true
			#prints("<idle>")
			asm {
				hlt
			}
	func static get_pvl() -> int
		asm {
			db 0x9c # pushf
			pop eax
			mov __temp_i__, eax
		}
		int eflags = __temp_i__
		return (eflags >> 12) & 3


	# running in task space
	func static task_signal_handler()
		asm {
			mov TaskManager.__handler_p__, edx
		}
		#prints("[task-signal-handler] ")
		#printh(&__handler_p__, 4)
		#prints(" [call]\n")
		asm {
			mov eax, TaskManager.__handler_p__
			call eax
		}
		#prints("[done...return]\n")
		asm {
			# return from handler
			mov eax, 0x00002006
			int 0x80
		}
		while true
			nil

	func static init()
		prints("init tasks...")
		ack_hw_irq = -1
	
		# null descriptor
		for g in gdt
			g.a = 0x00000000
			g.b = 0x00000000
		# kernel code
		gdt[1].set_data(0, 0xffffffff, true, 0)
		# kernel data
		gdt[2].set_data(0, 0xffffffff, false, 0)
		# user code
		gdt[3].set_data(0, 0xffffffff, true, 0)#3)
		# user data
		gdt[4].set_data(0, 0xffffffff, false, 0)#3)

		for t in tasks
			t.status = TASK_STATUS_UNUSED
			for h in t.handles
				h = nil
			for sm in t.shmem
				sm.s = nil

		next_pid_to_assign = 0
		next_puid_to_assign = 0
		#UserMemMask = 0

		kernel_task = add_task_kernel("kernel", nil, KERNEL_STACK_SIZE, nil)
		idle_task = add_task_kernel("idle", idle_func, IDLE_STACK_SIZE, kernel_task)
	
		# load GDT
		__temp_i__ = sizeof(gdt) - 1
		__temp_p__ = &gdt
		asm{
			jmp _after_gdt_data
			_gdtr:
			dw 0x0000
			_gdtr_base:
			dd 0x00000000
			_after_gdt_data:
			mov eax, __temp_i__
			mov [_gdtr], eax
			mov eax, __temp_p__
			mov [_gdtr_base], eax
			lgdt [_gdtr]
		}

		#prints("\n  setze Kernel-Task-Register")
		__temp_i__ = kernel_task.desc * 8
		asm{
			mov eax, __temp_i__ # Descriptor[n]
			ltr ax
		}
		# markiert das aktuelle TSS als "busy"!
	
		# enable sse
		asm{
	
			mov eax, cr0
			and eax, 0xfffffffb # clear CR0.EM (don't emulate via IRQ)
			or eax, 0x00000002 # set CR0.MP (inform about task-switches)
			mov cr0, eax
			mov __temp_i__, eax
		
			# set CR4.OSFXSR (enable sse)
			mov eax, cr4
			#mov __temp_i__, eax
			or eax, 0x00000200
			mov cr4, eax
	
			# flush cpu prefetch
			jmp _flush_sse
			_flush_sse:
		}

		prints("  ok\n")

#int sys_getpid()
#	asm{
#		xor, eax, eax
#		str ax
#		mov __temp_i__, eax
#	}
#	int pid = (__temp_i__ >> 3) - NUM_PRE_GDT_ENTRIES

			

