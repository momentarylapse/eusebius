use common
use common.macros
use io.text
use io.io
use task.task
use task.manager
use time.timevalue
use time.timer
use irq.irq

#const SCHEDULER_STACK_SIZE = 8192

let TASK_SWITCH_DT = 5 # ms
let PERF_UPDATE_DT = 1000000000 # 1000 ns


class Scheduler
	

#	var static scheduler_task: Task*
#
	var static next_perf_calc: TimeValue
	var static running_pid: int

#	func static int_timer()
#		while true
#			#prints("(")
#			KernelTimer.tick()
#		
#			# IO-waits
#			process_waiting_tasks()
#			
#			update_times()
#			#prints(" ")
#		
#			# pick next task
#			int pid_next = get_next_task(running_pid)
#			reconnect_tasks(pid_next, scheduler_task)
#
#			#prints(")")
#
#			# allow more timer IRQs
#			irq.end_of_interrupt(0)
#			#outportb(0x20,0x20)
#
#			# return to (other) task
#			asm {
#				iret
#			}

	var static cur: Task*
	var static next: Task*
	
	func static run()
		running_pid = 0
		prints("starting scheduler\n")
		
		next = nil#&TaskManager.tasks[0]
		cur = nil

		KernelTimer.start()
		IrqManager.enable()

		# wait for timer interrupt
		while true
			pass


#		scheduler_task = TaskManager.add_task_kernel("scheduler", int_timer, SCHEDULER_STACK_SIZE, kernel_task)
#	
#		KernelTimer.init_interrupt(scheduler_task, TASK_SWITCH_DT)
#		next_perf_calc = KernelTimer.tv
#		next_perf_calc.inc_nanosec(PERF_UPDATE_DT)
#		scheduler_task.run_forced()

	func static @noframe interrupt_handler()
		asm{
			cli
		}
		push_general_purpose_registers()
		push_control_registers()
		asm {
			mov rax, rsp
			mov __temp_p__, rax
		}
		handle_irq(__temp_p__ as InterruptFrame*)
		pop_control_registers()
		pop_general_purpose_registers()
		asm{
			#sti
			db 0x48
			iret
		}

	func static handle_irq(_frame: InterruptFrame*)
		IrqManager.mask(TIMER_IRQ)
		#prints("<timer>")
		
		for frame in _frame
			leave_task(frame)
			KernelTimer.update()
			process_waiting_tasks()
			do_scheduling()
			enter_task(frame)
			
		IrqManager.eoi(TIMER_IRQ)
		IrqManager.unmask(TIMER_IRQ)
	
	func static leave_task(out frame: InterruptFrame)
#		TextMode.text_color = 0x05
#		prints(" <irq> ")
#		TextMode.text_color = 0x07
		for t in cur
			memcpy(&t.frame, &frame, sizeof(InterruptFrame))

	func static do_scheduling()
		let next_pid = get_next_task()
		if next_pid < 0
			panic("no running tasks")
		cur = &TaskManager.tasks[next_pid]
		
	func static enter_task(out frame: InterruptFrame)
#		TextMode.text_color = 0x05
#		prints(" </irq> ")
#		TextMode.text_color = 0x07
		for t in cur
			if t.first_time_running
#				TextMode.text_color = 0x05
#				prints(" <FIRST> ")
#				printi(t.pid)
#				TextMode.text_color = 0x05
				t.first_time_running = false
			memcpy(&frame, &t.frame, sizeof(InterruptFrame))


	# Scheduler
	func static get_next_task() -> int
		var pid0 = 0
		for c in cur
			pid0 = c.pid
		for i in pid0 + 1:MAX_TASKS
			if TaskManager.tasks[i].status == TaskStatus.RUNNING
				return i
		for i in 0:pid0+1
			if TaskManager.tasks[i].status == TaskStatus.RUNNING
				return i
#		prints(" => NEXT=IDLE ")
		return 0 #TaskManager.idle_task.pid

	func static process_waiting_tasks()
		for t in TaskManager.tasks
			if t.status == TaskStatus.WAITING
				if t.waiting_mode == WaitingMode.TIME
					var tv = &t.waiting_param_i1 as TimeValue&
#					printi(tv.sec)
#					prints(":")
#					printi(KernelTimer.tv.sec)
#					prints(" ")
					if tv.is_before(KernelTimer.tv)
#						prints("W")
						t.frame.rax = 0 # return 0
						t.activate()
#				else
#					t.do_wait_update()


#	func static reconnect_tasks(pid_next: int, out irq_task: Task)
#		#int pid_cur = irq_task.get_prev_task()
#		TaskManager.gdt[TaskManager.tasks[running_pid].desc].set_busy(false)
#		TaskManager.gdt[TaskManager.tasks[pid_next].desc].set_busy(true)
#		irq_task.tss.prev = (pid_next + NUM_PRE_GDT_ENTRIES) << 3
#		running_pid = pid_next
#		#prints("<rec ")
#	#	printi pid_next
#	#	prints(">")
#
#	func static update_times()
#		TaskManager.tasks[running_pid].time_all.inc_nanosec(KernelTimer.dt_nanosec)
#		TaskManager.tasks[running_pid].time_temp.inc_nanosec(KernelTimer.dt_nanosec)
#	
#		if !KernelTimer.tv.is_before(next_perf_calc)
#			next_perf_calc.inc_nanosec(PERF_UPDATE_DT)
#			for t in TaskManager.tasks
#				t.cpu_load = t.time_temp.nanosec / (PERF_UPDATE_DT / 1000)
#				t.time_temp.clear()
#