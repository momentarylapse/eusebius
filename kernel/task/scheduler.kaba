#define __OS__
use "../base.kaba"
use "../text_mode.kaba"
use "tasks.kaba"
use "../std_char_devs.kaba"
use "../timer.kaba"
#define __STRING_CONST_AS_CSTRING__


const int TASK_SWITCH_DT = 5 // ms
const int PERF_UPDATE_DT = 1000000000 // 1000 ns

bool SchedulerEnabled

TimeValue next_perf_calc

void int_timer()
	asm{
		cli
	}
	while true
		if SchedulerEnabled
			//prints "."
			kernel_timer.tick()
		
			// IO-waits
			ProcessWaitingTasks()
			
			UpdateTimes()
		
			// pick next task
			int pid_next = GetNextTask(RunningPid)
			ReconnectTasks(pid_next, TimerTask)

		// allow more timer IRQs
		outportb(0x20,0x20)

		// return to (other) task
		asm{
			sti
			iret
			cli
		}

void StartScheduler()
	SchedulerEnabled = false
	RunningPid = 0
	if VerbosityLevel >= 1
		prints("starte Scheduler\n")
	InitTimerInterrupt(TASK_SWITCH_DT)
	SchedulerEnabled = true
	next_perf_calc = kernel_timer.tv
	next_perf_calc.inc_nanosec(PERF_UPDATE_DT)
	TimerTask.run_forced()



// Scheduler
int GetNextTask(int pid)
	for i in pid + 1:MAX_TASKS
		if Tasks[i].status == TASK_STATUS_RUNNING
			return i
	for i in 0:pid+1
		if Tasks[i].status == TASK_STATUS_RUNNING
			return i
	return IdleTask.pid

void ProcessWaitingTasks()
	for t in Tasks
		if t.status == TASK_STATUS_WAITING
			if t.waiting_mode == WAITING_MODE_FILE_READ
				int r = t.sys_read(t.waiting_param_i1, t.waiting_param_i2, t.waiting_param_i3)
				if r >= 0
					t.tss.eax = r // return r
					t.activate()
			else if t.waiting_mode == WAITING_MODE_FILE_WRITE
				r = t.sys_write(t.waiting_param_i1, t.waiting_param_i2, t.waiting_param_i3)
				if r >= 0
					t.tss.eax = r // return r
					t.activate()
			else if t.waiting_mode == WAITING_MODE_TIME
				TimeValue *rem = &t.waiting_param_i1
				rem.dec_nanosec(kernel_timer.dt_nanosec)
				if rem.sec < 0
					t.tss.eax = r // return r
					t.activate()


void ReconnectTasks(int pid_next, TaskData *irq_task)
	//int pid_cur = (irq_task.tss.prev >> 3) - NUM_PRE_GDT_ENTRIES
	GlobalDescriptorTable[Tasks[RunningPid].desc].set_busy(false)
	GlobalDescriptorTable[Tasks[pid_next].desc].set_busy(true)
	irq_task.tss.prev = (pid_next + NUM_PRE_GDT_ENTRIES) << 3
	RunningPid = pid_next
	/*prints("<rec ")
	printi pid_next
	prints(">")*/

void UpdateTimes()
	Tasks[RunningPid].time_all.inc_nanosec(kernel_timer.dt_nanosec)
	Tasks[RunningPid].time_temp.inc_nanosec(kernel_timer.dt_nanosec)
	
	if !kernel_timer.tv.is_before(next_perf_calc)
		next_perf_calc.inc_nanosec(PERF_UPDATE_DT)
		for t in Tasks
			t.load = t.time_temp.nanosec / (PERF_UPDATE_DT / 1000)
			t.time_temp.clear()
