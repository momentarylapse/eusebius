use "../base.kaba"
use "../io/text.kaba"
use "../io/io.kaba"
use "task.kaba"
use "../time/timevalue.kaba"
use "../time/timer.kaba"
use "../irq/irq.kaba"

const int SCHEDULER_STACK_SIZE = 8192

const int TASK_SWITCH_DT = 5 # ms
const int PERF_UPDATE_DT = 1000000000 # 1000 ns


class Scheduler
	static Task* scheduler_task

	static TimeValue next_perf_calc
	static int running_pid

	static void int_timer()
		while true
			#prints("(")
			KernelTimer.tick()
		
			# IO-waits
			process_waiting_tasks()
			
			update_times()
			#prints(" ")
		
			# pick next task
			int pid_next = get_next_task(running_pid)
			reconnect_tasks(pid_next, scheduler_task)

			#prints(")")

			# allow more timer IRQs
			outportb(0x20,0x20)

			# return to (other) task
			asm {
				iret
			}

	static void start()
		running_pid = 0
		prints("starting scheduler\n")
	
		scheduler_task = TaskManager.add_task_kernel("scheduler", int_timer, SCHEDULER_STACK_SIZE, kernel_task)
	
		KernelTimer.init_interrupt(scheduler_task, TASK_SWITCH_DT)
		next_perf_calc = KernelTimer.tv
		next_perf_calc.inc_nanosec(PERF_UPDATE_DT)
		scheduler_task.run_forced()



	# Scheduler
	static int get_next_task(int pid)
		for i in pid + 1:MAX_TASKS
			if TaskManager.tasks[i].status == TASK_STATUS_RUNNING
				return i
		for i in 0:pid+1
			if TaskManager.tasks[i].status == TASK_STATUS_RUNNING
				return i
		return TaskManager.idle_task.pid

	static void process_waiting_tasks()
		for t in TaskManager.tasks
			if t.status == TASK_STATUS_WAITING
				if t.waiting_mode == WAITING_MODE_TIME
					TimeValue *rem = &t.waiting_param_i1
					rem.dec_nanosec(KernelTimer.dt_nanosec)
					if rem.sec < 0
						t.tss.eax = 0 # return 0
						t.activate()
				else
					t.do_wait_update()


	static void reconnect_tasks(int pid_next, out Task irq_task)
		#int pid_cur = irq_task.get_prev_task()
		TaskManager.gdt[TaskManager.tasks[running_pid].desc].set_busy(false)
		TaskManager.gdt[TaskManager.tasks[pid_next].desc].set_busy(true)
		irq_task.tss.prev = (pid_next + NUM_PRE_GDT_ENTRIES) << 3
		running_pid = pid_next
		#prints("<rec ")
	#	printi pid_next
	#	prints(">")

	static void update_times()
		TaskManager.tasks[running_pid].time_all.inc_nanosec(KernelTimer.dt_nanosec)
		TaskManager.tasks[running_pid].time_temp.inc_nanosec(KernelTimer.dt_nanosec)
	
		if !KernelTimer.tv.is_before(next_perf_calc)
			next_perf_calc.inc_nanosec(PERF_UPDATE_DT)
			for t in TaskManager.tasks
				t.cpu_load = t.time_temp.nanosec / (PERF_UPDATE_DT / 1000)
				t.time_temp.clear()
