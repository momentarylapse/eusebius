#define __OS__
use "../base.kaba"
use "../text_mode.kaba"
use "tasks.kaba"
use "../std_char_devs.kaba"
#define __STRING_CONST_AS_CSTRING__


const int TASK_SWITCH_DT = 20 // ms

bool SchedulerEnabled

int _nnn

void int_timer()
	while true
		if SchedulerEnabled
		
			// FIXME handle mouse... IRQ does not seem to work...
			_nnn ++
			if (_nnn & 0x3) == 0
				ps2_try_read()
		
			// IO-waits
			ProcessWaitingTasks()
		
			int pid_next = GetNextTask(RunningPid)
			ReconnectTasks(pid_next, TimerTask)
			
	/*		if next != last
				prints("<")
				prints(Task[pid_cur].name)
				prints(",")
				prints(Task[pid_next].name)
				//printi(pid_next)
				prints(">")*/

		// weitere Aufrufe erlauben
		outportb(0x20,0x20)

		// zurÃ¼ck
		asm{
			iret
		}

void InitTimerInterrupt()
	_nnn = 0
	
	// ticks/s: 1193180
	// 100Hz:   11932 = 0x2e9c
	int ticks_per_sec = 1193180
	int ticks_till_irq = (ticks_per_sec >> 10) * TASK_SWITCH_DT
	if ticks_till_irq > 0xffff
		ticks_till_irq = 0xffff
	//1/0
	outportb(0x43, 0x34)
	outportb(0x40, ticks_till_irq) //0x9c)
	outportb(0x40, ticks_till_irq >> 8) //0x2e)

void StartScheduler()
	SchedulerEnabled = false
	RunningPid = 0
	if VerbosityLevel >= 1
		prints("starte Scheduler\n")
	InitTimerInterrupt()
	SchedulerEnabled = true
	TimerTask.run_forced()



// Scheduler
int GetNextTask(int pid)
	for i in pid + 1:MAX_TASKS
		if Tasks[i].status == TASK_STATUS_RUNNING
			return i
	for i in 0:pid+1
		if Tasks[i].status == TASK_STATUS_RUNNING
			return i
	return IdleTask.pid

void ProcessWaitingTasks()
	for t in Tasks
		if t.status == TASK_STATUS_WAITING
			if t.waiting_mode == WAITING_MODE_FILE_READ
				int r = t.sys_read(t.waiting_param_i1, t.waiting_param_i2, t.waiting_param_i3)
				if r >= 0
					t.tss.eax = r // return r
					t.activate()
			else if t.waiting_mode == WAITING_MODE_FILE_WRITE
				r = t.sys_write(t.waiting_param_i1, t.waiting_param_i2, t.waiting_param_i3)
				if r >= 0
					t.tss.eax = r // return r
					t.activate()


void ReconnectTasks(int pid_next, TaskData *irq_task)
	//int pid_cur = (irq_task.tss.prev >> 3) - NUM_PRE_GDT_ENTRIES
	GlobalDescriptorTable[Tasks[RunningPid].desc].set_busy(false)
	GlobalDescriptorTable[Tasks[pid_next].desc].set_busy(true)
	irq_task.tss.prev = (pid_next + NUM_PRE_GDT_ENTRIES) << 3
	RunningPid = pid_next
