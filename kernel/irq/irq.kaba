use "../base.kaba"
use "../io/text.kaba"
use "../io/io.kaba"
use "../task/task.kaba"


void int_ignore()
	//prints("[ignore irq]")
	asm{
		iret
	}
Task *IgnoreTask



class InterruptDescriptor
	int a, b

	void set(void* func)
		a = 0
		b = 0
		if func
			int addr = _p2i(func)
			// Interrupt Gate
			a = 0x00080000 + (addr & 0xffff) // desc[1],addr[15..0]
			b = (addr & 0xffff0000) + 0x00008e00 // addr[31..16],typ


	// interrupt tasks don't need the cli/sti... we use the IF bit
	void set_task(Task* t)
		a = 0
		b = 0
		if t
			t.tss.eflags = 0x000 // Iterrupt Flag = 0
			t.status = TASK_STATUS_INTERRUPT

			// Interrupt Task Gate
			a = 0x00080000*t.desc // desc,0[15..0]
			b = 0x00008500 // 0[31..16],typ

class InterruptController
	InterruptDescriptor[256] idt
	
	void set(int id, void* func)
		idt[id].set(func)
	
	void set_task(int id, Task* t)
		idt[id].set_task(t)

	void init()
		prints("lade Interrupt-Tabelle")

		for i in idt
			i.set(nil)
		
	
		IgnoreTask = AddTaskKernel("irq-ignore", &int_ignore, 128, KernelTask)
		irq.set_task(32, IgnoreTask) // IRQ 0

		// move IRQs to higher interrupts
		outportb(0x20,0x11) // init
		outportb(0xa0,0x11)
		outportb(0x21,0x20) // offset 32
		outportb(0xa1,0x28)
		outportb(0x21,0x04) // master/slave identity stuff?
		outportb(0xa1,0x02)
		outportb(0x21,0x01) // 8086
		outportb(0xa1,0x01)
		outportb(0x21,0x00) // masks
		outportb(0xa1,0x00)
	
		__temp_p__ = &idt

		asm{
			jmp _after_idt_data
			_idtr:
			dw 0x07ff
			_idtr_base:
			dd 0x00000000
			_after_idt_data:
			mov eax, __temp_p__
			mov [_idtr_base], eax
			cli
			lidt [_idtr]
			sti
		}
	
		prints("   ok\n")

InterruptController irq
