#define __OS__
use "../base.kaba"
use "../text_mode.kaba"
use "../task/tasks.kaba"
use "../task/scheduler.kaba"
use "../std_char_devs.kaba"
use "../syscall.kaba"
use "error.kaba"
#define __STRING_CONST_AS_CSTRING__




class InterruptDescriptor
	int a, b

	void set(void* func)
		a = 0
		b = 0
		if func
			int addr = _p2i(func)
			// Interrupt Gate
			a = 0x00080000 + (addr & 0xffff) // desc[1],addr[15..0]
			b = (addr & 0xffff0000) + 0x00008e00 // addr[31..16],typ


	// interrupt tasks don't need the cli/sti... we use the IF bit
	void set_task(Task* t)
		a = 0
		b = 0
		if t
			t.tss.eflags = 0x000 // Iterrupt Flag = 0
			t.status = TASK_STATUS_INTERRUPT

			// Interrupt Task Gate
			a = 0x00080000*t.desc // desc,0[15..0]
			b = 0x00008500 // 0[31..16],typ

class InterruptController
	InterruptDescriptor[256] idt
	void*[16] handler
	Task*[16] tasks
	
	void set(int id, void* func)
		idt[id].set(func)
	
	void set_task(int id, Task* t)
		idt[id].set_task(t)

	void init()
		if VerbosityLevel >= 1
			prints("lade Interrupt-Tabelle")

		for i in idt
			i.set(nil)
	
		//ErrorTask = AddTask("irq-error", &int_handler, KernelTask)
		TimerTask = AddTaskKernel("irq-timer", &int_timer, KernelTask)
		SysCallTask = AddTaskKernel("irq-syscall", &int_syscall, KernelTask)
		Task *KeyTask = AddTaskKernel("irq-key", &int_key, KernelTask)
		Task *MouseTask = AddTaskKernel("irq-mouse", &int_mouse, KernelTask)

		handler[ 0] = &int_00
		handler[ 1] = &int_01
		handler[ 2] = &int_02
		handler[ 3] = &int_03
		handler[ 4] = &int_04
		handler[ 5] = &int_05
		handler[ 6] = &int_06
		handler[ 7] = &int_07
		handler[ 8] = &int_08
		handler[ 9] = &int_09
		handler[10] = &int_10
		handler[11] = &int_11
		handler[12] = &int_12
		handler[13] = &int_13
		handler[14] = &int_14
		handler[15] = &int_15
		
		for h,i in handler
			//set(i, h)
			tasks[i] = AddTaskKernel("error", h, KernelTask)
			set_task(i, tasks[i])
	
		set_task(32, TimerTask) // IRQ 0
		set_task(33, KeyTask) // IRQ 1
		set_task(44, MouseTask) // IRQ 12
		set_task(0x80, SysCallTask)

		// IRQs auf hÃ¶here Interrupts legen
		outportb(0x20,0x11) // init
		outportb(0xa0,0x11)
		outportb(0x21,0x20) // offset 32
		outportb(0xa1,0x28)
		outportb(0x21,0x04) // master/slave identity stuff?
		outportb(0xa1,0x02)
		outportb(0x21,0x01) // 8086
		outportb(0xa1,0x01)
		outportb(0x21,0x00) // masks
		outportb(0xa1,0x00)
	
		__temp_p__ = &idt

		asm{
			jmp _after_idt_data
			_idtr:
			dw 0x07ff
			_idtr_base:
			dd 0x00000000
			_after_idt_data:
			mov eax, __temp_p__
			mov [_idtr_base], eax
			cli
			lidt [_idtr]
			sti
		}
	
		InterruptsEnabled = true
		if VerbosityLevel >= 1
			prints("   ok\n")

InterruptController Interrupts
