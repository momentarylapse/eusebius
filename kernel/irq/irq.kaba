use "../base.kaba"
use "../io/text.kaba"
use "../io/io.kaba"
use "../task/task.kaba"
use kaba


const int HARDWARE_IRQ_SHIFT = 32
const int MAX_HW_IRQS = 16


class InterruptDescriptor
	int a, b
	
	void clear()
		a = 0
		b = 0

	void set(Function func)
		int addr = _p2i(&func)
		# Interrupt Gate
		a = 0x00080000 + (addr & 0xffff) # desc[1],addr[15..0]
		b = (addr & 0xffff0000) + 0x00008e00 # addr[31..16],typ


	# interrupt tasks don't need the cli/sti... we use the IF bit
	void set_task(out Task t)
		t.tss.eflags = 0x000 # Iterrupt Flag = 0
		t.status = TASK_STATUS_INTERRUPT
		
		# Interrupt Task Gate
		a = 0x00080000*t.desc # desc,0[15..0]
		b = 0x00008500 # 0[31..16],typ

class InterruptToSignalMap
#	int irq # hardware IRQ  (!= shifted version...)
	int pid, puid
	int signal
	Task *ktask
	Task *utask

class irq
	static InterruptDescriptor[256] idt
	static InterruptToSignalMap[MAX_HW_IRQS] task_maps
	
	static void deny_user_map(int hw_irq)
		if hw_irq < 0 or hw_irq >= MAX_HW_IRQS
			return
		#prints(" DENY ")
		#printi(hw_irq)
		task_maps[hw_irq].pid = 0x66666666
		
	
	static void set_func(int soft_irq, Function func)
		idt[soft_irq].set(func)
		deny_user_map(soft_irq - HARDWARE_IRQ_SHIFT)
	
	static void set_task(int soft_irq, out Task t)
		idt[soft_irq].set_task(t)
		deny_user_map(soft_irq - HARDWARE_IRQ_SHIFT)
	
	static int hw2soft(int hw_irq)
		return hw_irq + HARDWARE_IRQ_SHIFT

	static void init()
		prints("loading interrupt table...")

		for i in idt
			i.clear()
		for m in task_maps
			m.pid = -1
			m.ktask = nil
			m.utask = nil
		
	
		# ignore the timer for now
		ignore_task = TaskManager.add_task_kernel("irq-ignore", int_ignore, 128, kernel_task)
		set_task(hw2soft(0), ignore_task) # IRQ 0

		# move IRQs to higher interrupts
		outportb(0x20, 0x11) # init
		outportb(0xa0, 0x11)
		outportb(0x21, HARDWARE_IRQ_SHIFT) # offset
		outportb(0xa1, 0x28)
		outportb(0x21, 0x04) # master/slave identity stuff?
		outportb(0xa1, 0x02)
		outportb(0x21, 0x01) # 8086
		outportb(0xa1, 0x01)
		outportb(0x21, 0x00) # masks
		outportb(0xa1, 0x00)
		disable()
		
		load_idt()
		enable()
		prints("   ok\n")
	
	static void load_idt()
		__temp_p__ = &idt

		asm {
			jmp _after_idt_data
		_idtr:
			dw 0x07ff
		_idtr_base:
			dd 0x00000000
		_after_idt_data:
			mov eax, __temp_p__
			mov [_idtr_base], eax
			#cli
			lidt [_idtr]
			#sti
		}
	
	static void enable()
		asm {
			sti
		}
	static void disable()
		asm {
			cli
		}
	
	static int sys_map_irq(int hw_irq, Task t, int signal)
		if hw_irq < 0 or hw_irq >= MAX_HW_IRQS
			return -EINVAL
		if signal < 0 or signal >= MAX_SIGNALS
			return -EINVAL

		let m = &task_maps[hw_irq]
		if m.pid >= 0
			return -EEXIST
		if !m.ktask or true
			m.ktask = TaskManager.add_task_kernel("irq-task", int_task_irq, 4096, kernel_task)
			set_task(hw2soft(hw_irq), m.ktask)
			
			# task function will see this as a parameter
			m.ktask.tss.esi = hw_irq
		m.pid = t.pid
		m.puid = t.puid
		m.signal = signal
		m.utask = &t
		#load_idt()
		return 0


	static void int_task_irq()
		asm {
			mov __temp_i__, esi
		}
		int hw_irq = __temp_i__
		let m = &irq.task_maps[hw_irq]
		let t = m.utask
		while true
			#prints("<IRQ ")
			#printi(hw_irq)
			#prints(">")
		
			if t.puid == m.puid
				# link the task return into the handler...
				if t.handle_signal_link_iret(m.signal) != 0
					prints("err")
		
			# allow more
			if hw_irq >= 8
				outportb(0xa0, 0x20)
			outportb(0x20, 0x20)
			#prints(" <IRET> ")
			asm {
				iret
			}

	static void int_ignore()
		while true
			#prints("[ignore irq]")
			asm {
				iret
			}
	static Task* ignore_task

