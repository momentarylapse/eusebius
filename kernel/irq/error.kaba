use "../base.kaba"
use "../io/text.kaba"
use "../task/task.kaba"
use "../task/scheduler.kaba"
use "irq.kaba"
use kaba

const int ERROR_STACK_SIZE = 4096

void handle_task_error(out Task* t, out Task* e, int i)
	int pid = t.pid
	#prints("\n    -- Interrupt #")
#	printi(i)
#	prints(" pid=")
#	printi(pid)
#	prints "  eip="
#	printh(t.tss.eip, 4)
#	prints(" --\n")
#	cstring s
#	get_error_text(i, s)
#	prints(s)
	
	# TODO send signal
	
	if i == 13 or i == 14
		t.handle_signal(SIGSEGV)
	else
		t.die(i-666)
	
	int pid_next = GetNextTask(pid)
	ReconnectTasks(pid_next, e)
	

void handle_kernel_error(Task* t, int i)
	cstring s
	get_error_text(i, s)
	
	prints("\neip=")
	printh(t.tss.eip, 4)
	prints("  esp=")
	printh(t.tss.esp, 4)
	prints("\n")
	
	#if i == 0
#		prints("   eflags=")
#		printh(&KernelTask.tss.eflags, 4)
#		prints(s)
#		prints("-y-")
#		return
#		asm{
#			iret
#		}
#		prints("xxxx")
	panic(s)

void get_error_text(int i, out cstring s)
	cstring nn
	strcpy(s, "Int ")
	_i2s(i, nn)
	strcat(s, nn)
	if i==0
		strcat(s, ": division by zero")
	if i==1
		strcat(s, ": debug")
	if i==3
		strcat(s, ": breakpoint")
	if i==4
		strcat(s, ": overflow")
	if i==5
		strcat(s, ": bounds check")
	if i==6
		strcat(s, ": invalid opcode")
	if i==7
		strcat(s, ": no coprocessor")
	if i==8
		strcat(s, ": system error")
	if i==9
		strcat(s, ": coprocessor segment overrun")
	if i==10
		strcat(s, ": invalid TSS")
	if i==11
		strcat(s, ": segment missing")
	if i==12
		strcat(s, ": stack error")
	if i==13
		strcat(s, ": general protection fault")
	if i==14
		strcat(s, ": page fault")
	if i==16
		strcat(s, ": coprocessor error")
	strcat(s, "  8-P")

void int_handler(int i)
	while true
		# task?
		Task* e = error.tasks[i]
		int prev_pid = e.get_prev_pid()
		Task *prev = &Tasks[prev_pid]
		
		# handle error
		if prev.kernel_mode
			handle_kernel_error(prev, i)
		else
			handle_task_error(prev, e, i)
		
		asm{
			iret
		}

void int_00()
	int_handler(0)
void int_01()
	int_handler(1)
void int_02()
	int_handler(2)
void int_03()
	int_handler(3)
void int_04()
	int_handler(4)
void int_05()
	int_handler(5)
void int_06()
	int_handler(6)
void int_07()
	int_handler(7)
	prints("[CP]")
	asm{
		db 0x0f
		db 0x06
		iret
	}
void int_08()
	int_handler(8)
void int_09()
	int_handler(9)
void int_10()
	int_handler(10)
void int_11()
	int_handler(11)
void int_12()
	int_handler(12)
void int_13()
	int_handler(13)
void int_14()
	int_handler(14)
void int_15()
	int_handler(15)
void int_16()
	int_handler(16)
void int_XX()
	int_handler(2004)
	
	
void int_ignore_dummy()
	asm{
		_ignore_interrupt_handler:
	}
	#prints("  [ignore]")
	asm{
		db 0x0f
		db 0x06
		iret
	}


class ErrorController
	Function*[16] handler
	Task*[16] tasks

	void init()
		prints("setting error handler")

		handler[ 0] = int_00
		handler[ 1] = int_01
		handler[ 2] = int_02
		handler[ 3] = int_03
		handler[ 4] = int_04
		handler[ 5] = int_05
		handler[ 6] = int_06
		handler[ 7] = int_07
		handler[ 8] = int_08
		handler[ 9] = int_09
		handler[10] = int_10
		handler[11] = int_11
		handler[12] = int_12
		handler[13] = int_13
		handler[14] = int_14
		handler[15] = int_15
		
		for h,i in handler
			tasks[i] = AddTaskKernel("irq-error", h, ERROR_STACK_SIZE, KernelTask)
			irq.set_task(i, tasks[i])
		
		
		# tell the cpu to ignore sse/task-switch-exceptions
		asm{
			mov eax, _ignore_interrupt_handler
			mov __temp_p__, eax
		}
		irq.set(7, __temp_p__)
	
		prints("   ok\n")


ErrorController error
	
	
