#define __STRING_CONST_AS_CSTRING__
#define __FUNCTION_POINTER_AS_CODE__
use "base.kaba"
use "io/text.kaba"
use "dev/ata.kaba"
use "dev/block.kaba"
use "dev/std_char_devs.kaba"
use "fs/fs.kaba"
use "fs/access.kaba"
use "fs/pipe.kaba"
use "mem/heap.kaba"
use "mem/paging.kaba"
use "mem/shared.kaba"
use "net/socket.kaba"
use "task/task.kaba"
use "task/scheduler.kaba"
use "irq/irq.kaba"
use "irq/error.kaba"
use "syscall.kaba"

const int KALIB_LOCATION = 0x00050000



void show_pvl()
	asm{
		db 0x9c # pushf
		pop eax
		mov __temp_i__, eax
	}
	int eflags = __temp_i__
	int pvl = (eflags >> 12) & 3
	prints("[PVL:")
	printi(pvl)
	prints("]")

void load_kalib()
	prints("loading kalib... ")
	int h = kernel_task.open("/lib/kalib", O_RDONLY)
	if h < 0
		panic("can not read file /lib/kalib!")
		return
	int addr = KALIB_LOCATION
	int size = 0
	while true
		int r = kernel_task.sys_read(h, addr, 1024)
		if r <= 0
			break
		size += r
		addr += r
	kernel_task.sys_close(h)
	printi(size)
	prints("b  ok\n")


void main()
	read_data_from_init()
	TextMode.init()
	
	prints("Welcome to ")
	prints(KERNEL_NAME)
	prints(" ")
	prints(KERNEL_VERSION)
	prints("   (c) by MichiSoft TM 2020\n")
	prints("memory: ")
	printi(MemorySize / 1024)
	prints("k\n")
	
	#asm{
#		mov eax, 0x8000000
#		db 0x0f
#		db 0xa2
#		mov __temp_i__, eax
#		mov __temp_i2__, ecx
#		mov __temp_i3__, edx
#	}
#	prints("   cpu:  ")
#	printh(&__temp_i__, 4)
#	printh(&__temp_i2__, 4)
#	printh(&__temp_i3__, 4)
#	prints("\n")
	
	Heap.init()
	Paging.init()
	SharedMemory.init()
	
	BlockDevManager.init()
	
	InitFileAccessData()
	PipeManager.init()
	SocketManager.init()
	
	FileSystem.init()
	
	# assume a default disk layout...
	FileSystem.mount(BlockDevManager.devs[2], FileSystem.root, "ext2")
	FileEntry *boot = FileSystem.get("/boot", FileSystem.root)
	FileSystem.mount(BlockDevManager.devs[1], boot, "michifs")
	
	TaskManager.init()
	
	irq.init()
	Error.init()
	InitSysCall()
	
	StdCharDevs.init()
	
	load_kalib()
	
	int stdin = kernel_task.open("/dev/tty", O_RDONLY)
	int stdout = kernel_task.open("/dev/tty", O_WRONLY)
	
	if kernel_task.sys_execute(_p2i(&"/bin/shell"), stdin, stdout) < 0
		panic("can not read file /bin/shell!")
	
	Scheduler.start()
	panic("test")
	prints("aa2")
	while true
		pass
	
	panic("no tasks")

