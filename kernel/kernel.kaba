#define __STRING_CONST_AS_CSTRING__
#define __FUNCTION_POINTER_AS_CODE__
use common
use io.text
use cpu
use dev.ata
use dev.block
use dev.std_char_devs
use fs.fs
use fs.access
use fs.pipe
use mem.heap
use mem.paging
use mem.shared
use net.socket
use task.manager
##use task.scheduler
use irq.irq
use irq.error
use time.timer
use syscall

let KALIB_LOCATION = 0x00050000

var _xxx_: int



func load_kalib()
	prints("loading kalib... ")
	
	for of in kernel_open("/lib/kalib", O_RDONLY, FileSystem.root)
		var addr = KALIB_LOCATION
		var size = 0
		while true
			let r = of.read(Paging.kernel_root_table, addr, 1024)
			if r <= 0
				break
			size += r
			addr += r
		printi(size)
		prints("b ok\n")
	else
		panic("can not read /lib/kalib")


func main()
	read_data_from_init()
	TextMode.init()
	TextMode.clear()
	
	prints("Welcome to ")
	prints(KERNEL_NAME)
	prints(" ")
	prints(KERNEL_VERSION)
	prints("   (c) by MichiSoft TM 2023\n")
	prints("memory: ")
	printi(MemorySize / 1024 / 1024)
	prints("m\n")


	#asm{
#		mov eax, 0x8000000
#		db 0x0f
#		db 0xa2
#		mov __temp_i__, eax
#		mov __temp_i2__, ecx
#		mov __temp_i3__, edx
#	}
#	prints("   cpu:  ")
#	printh(&__temp_i__, 4)
#	printh(&__temp_i2__, 4)
#	printh(&__temp_i3__, 4)
#	prints("\n")
	
	Paging.init()
	Heap.init()

#	for i in 0x01000000:0x02000000
#		var p: int* = _i2p(i)
#		*p = 3


	SharedMemory.init()


	TaskManager.init()
	Cpu.enable_sse()
	
	IrqManager.init()
	ErrorManager.init()


	BlockDevManager.init()

	InitFileAccessData()
	PipeManager.init()
	SocketManager.init()

	FileSystem.init()

	# assume a default disk layout...
	FileSystem.mount(BlockDevManager.devs[2], FileSystem.root, "ext2")
	for boot in FileSystem.get("/boot", FileSystem.root)
		FileSystem.mount(BlockDevManager.devs[1], boot, "michifs")
	else
		panic("/boot not found")
	
	StdCharDevs.init()
	
	KernelTimer.init(50)

	Syscall.init()

	load_kalib()

	#TaskManager.x()
	
	prints("loading process ")
	for of in kernel_open("/bin/simple", O_RDONLY, FileSystem.root)
		prints("OK")
		var code = Heap.malloc(1024)
		prints("  xxx")
		let r = of.read(Paging.kernel_root_table, _p2i(code), 1024)
		#printh(code, r)
		#prints("\n")
		
		TaskManager.next = TaskManager.add_task_user("simple", _p2i(code), nil)
	else
		panic("can not open")
	
	
	IrqManager.enable()

	asm{
		jmp $
	}
	
	
##	load_kalib()
##	
##	int stdin = kernel_task.open("/dev/tty", O_RDONLY)
##	int stdout = kernel_task.open("/dev/tty", O_WRONLY)
##	
##	if kernel_task.sys_execute(_p2i(&"/bin/shell"), stdin, stdout) < 0
##		panic("can not read file /bin/shell!")
##	
##	Scheduler.start()
##	panic("test")

#	for i in 0:300000000
#		pass
#	var p:int* = _i2p(0xf0000000)
#	*p = 3

	prints("  \\(^_^)/")
	#IrqManager.slow_endless_loop()
	while true
		pass
##	
##	panic("no tasks")
##
##