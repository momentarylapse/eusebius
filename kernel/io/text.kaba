use common
use io

const SCREEN_WIDTH = 80
const SCREEN_HEIGHT = 25

class TextMode

	var static video_memory: void*
	var static text_color, text_color2: char
	var static pos, line: int

	func static clear()
		cstring *d = video_memory
		for i in 0:SCREEN_WIDTH * SCREEN_HEIGHT
			d[i * 2] = ' '
			d[1 * 2 + 1] = 0
		line = 0
		pos = 0

	func static init()
		video_memory = _i2p(0x000b8000)
		
		clear()
		text_color = 7

	func static etm_shift()
		cstring *d = video_memory
		cstring *d2 = &d[SCREEN_WIDTH * 2]
		for i in 0:SCREEN_WIDTH * (SCREEN_HEIGHT - 1) * 2
			d[i] = d2[i]
		d2 = &d[SCREEN_WIDTH * (SCREEN_HEIGHT - 1) * 2]
		for i in 0:SCREEN_WIDTH
			d2[i * 2] = ' '
			d2[i * 2 + 1] = 0

	func static prints_low(str: cstring*, size: int)
		cstring *d = video_memory
		d = &d[2*(SCREEN_WIDTH * line + pos)]
		for i in 0:size
			if str[i] == 0x7f or str[i] == 0x08 # BACKSPACE
				d[-2] = 0x20
				pos --
				if pos < 0
					if line > 0
						pos = SCREEN_WIDTH - 1
						line --
					else
						pos = 0
						line = 0
				continue
			if str[i] != '\n'
				d[0] = str[i]
				d[1] = text_color
				d = &d[2]
				pos ++
			if (pos >= SCREEN_WIDTH) or (str[i] == '\n')
				pos = 0
				line ++
				if line >= SCREEN_HEIGHT
					etm_shift()
					line --
				d = video_memory
				d = &d[2*(SCREEN_WIDTH * line)]
		int position = (line * SCREEN_WIDTH) + pos
		# cursor LOW port to vga INDEX register
		outportb(0x3d4, 0x0f)
		outportb(0x3d5, position)
		# cursor HIGH port to vga INDEX register
		outportb(0x3d4, 0x0e)
		outportb(0x3d5, position >> 8)

func prints(s: cstring)
	TextMode.prints_low(&s, strlen(s))

func _i2s(_i: int, out s: cstring)
	bool sign = (_i >= 0)
	int i = _i
	if !sign
		i = -i
	char[16] ttt
	ttt[15] = 0
	int offset = 14
	while true
		ttt[offset] = (i % 10) + 0x30
		i /= 10
		offset --
		if i == 0
			break
	if !sign
		ttt[offset] = '-'
		offset --
	memcpy(&s, &ttt[offset + 1], 16-offset)

func printi(i: int)
	cstring s
	_i2s(i, s)
	prints(s)

func printh(_data: void*, size: int)
	cstring* data = _data
	cstring ttt
	for i in 0:size
		int d = data[i]
		int d1 = (d>>4) & 0xf
		int d2 = (d & 0xf)
		if d1 < 10
			ttt[0] = '0'+d1
		else
			ttt[0] = 'a'-10+d1
		if d2 < 10
			ttt[1] = '0'+d2
		else
			ttt[1] = 'a'-10+d2
		if i == size-1
			ttt[2] = 0
		else
			ttt[2] = '.'
		ttt[3] = 0
		prints(ttt)

#void WasteTime()
#	int x
#	for x, 0, 100000
#		nil
		


func panic(s: cstring)
	asm {
		cli
	}
	TextMode.text_color = 0x04
	prints("\n\n                   --  Panik  --\n\n")
	prints(s)
	while true
		nil

