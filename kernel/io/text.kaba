use "../base.kaba"
use "io.kaba"



//--------------------------------------------------------------
// Text Modus

void* VideoMemory
char TextColor, TextColor2
int TextPos, TextLine

const int SCREEN_WIDTH = 80
const int SCREEN_HEIGHT = 25

void clrscr()
	cstring *d = VideoMemory
	for i in 0:SCREEN_WIDTH * SCREEN_HEIGHT
		d[i * 2] = ' '
		d[1 * 2 + 1] = 0
	TextLine = 0
	TextPos = 0

void InitTextMode()
	asm{
		mov eax, 0x000b8000
		mov VideoMemory, eax
	}
	
	clrscr()
	TextColor = 7

void etm_shift()
	cstring *d = VideoMemory
	cstring *d2 = &d[SCREEN_WIDTH * 2]
	for i in 0:SCREEN_WIDTH * (SCREEN_HEIGHT - 1) * 2
		d[i] = d2[i]
	d2 = &d[SCREEN_WIDTH * (SCREEN_HEIGHT - 1) * 2]
	for i in 0:SCREEN_WIDTH
		d2[i * 2] = ' '
		d2[i * 2 + 1] = 0

void prints_low(cstring *str, int size)
	cstring *d = VideoMemory
	d = &d[2*(SCREEN_WIDTH * TextLine + TextPos)]
	for i in 0:size
		if str[i] == 0x7f or str[i] == 0x08 // BACKSPACE
			d[-2] = 0x20
			TextPos --
			if TextPos < 0
				if TextLine > 0
					TextPos = SCREEN_WIDTH - 1
					TextLine --
				else
					TextPos = 0
					TextLine = 0
			continue
		if str[i] != 0x0a
			d[0] = str[i]
			d[1] = TextColor
			d = &d[2]
			TextPos ++
		if (TextPos >= SCREEN_WIDTH) or (str[i] == 0x0a)
			TextPos = 0
			TextLine ++
			if TextLine >= SCREEN_HEIGHT
				etm_shift()
				TextLine --
			d = VideoMemory
			d = &d[2*(SCREEN_WIDTH * TextLine)]
	int position = (TextLine * SCREEN_WIDTH) + TextPos
	// cursor LOW port to vga INDEX register
	outportb(0x3d4, 0x0f)
	outportb(0x3d5, position)
	// cursor HIGH port to vga INDEX register
	outportb(0x3d4, 0x0e)
	outportb(0x3d5, position >> 8)

void prints(cstring str)
	prints_low(&str, strlen(&str))

void _i2s(int i, cstring *s)
	bool sign = (i >= 0)
	if !sign
		i = -i
	char[16] ttt
	ttt[15] = 0
	int offset = 14
	while true
		ttt[offset] = (i % 10) + 0x30
		i /= 10
		offset --
		if i == 0
			break
	if !sign
		ttt[offset] = '-'
		offset --
	strcpy(s, &ttt[offset + 1])

void printi(int i)
	cstring s
	_i2s(i, &s)
	prints(s)

int printh(void* _data,int size)
	cstring* data = _data
	cstring ttt
	for i in 0:size
		int d = data[i]
		int d1 = (d>>4)
		int d2 = (d&15)
		if d1 < 10
			ttt[0] = d1+48
		else
			ttt[0] = d1+87
		if d2<10
			ttt[1] = d2+48
		else
			ttt[1] = d2+87
		if i == size-1
			ttt[2] = 0
		else
			ttt[2] = '.'
			ttt[3] = 0
		prints(ttt)

/*void WasteTime()
	int x
	for x, 0, 100000
		nil*/
		


void panic(cstring s)
	asm{
		cli
	}
	TextColor=0x04
	prints("\n\n                   --  Panik  --\n\n")
	prints(s)
	while true
		nil

