#define __OS__
use "base.kaba"
use "base_mem.kaba"
use "ata.kaba"
use "text_mode.kaba"
#define __STRING_CONST_AS_CSTRING__


//--------------------------------------------------------------
// Dateisystem

const int FILE_TYPE_FILE = 0
const int FILE_TYPE_DIR = 1
const int FILE_TYPE_CHAR = 8
const int FILE_TYPE_BLOCK = 16


class FileOperations
	void *_open
	void *_close
	void *_read
	void *_write

class FileEntry
	cstring name
	int type
	int size
	int num_blocks
	int blocks[0]*
	int inode
	MountPoint *mount
	FileEntry *parent
	FileEntry *next
	FileEntry *first_sub
	FileOperations *op
	
	void add(FileEntry *e)
		e.parent = self
		if first_sub
			FileEntry *i = first_sub
			while i.next
				i = i.next
			i.next = e
		else
			first_sub = e
	void _show()
		printi(type)
		prints(" ")
		printi(size)
		prints(" ")
		prints(name)
		prints("\n")
	
	void show()
		_show()
		FileEntry *e = first_sub
		while e
			prints("    ")
			e._show()
			e = e.next
	FileEntry *get_sub(cstring sname)
		if strcmp(&sname, &"..") == 0
			return parent
		if strcmp(&sname, &".") == 0
			return self
		FileEntry *e = first_sub
		while e
			if strcmp(&sname, &e.name) == 0
				return e
			e = e.next
		return nil



class MountPoint
	FileSystemType *type
	PartitionData *dev
	FileEntry *dest
	int block_offset
	int block_size
	
	int dev_blocks_per_block
	int dev_block_offset
	
	void update(int _bs, int _bo)
		block_size = _bs
		dev_blocks_per_block = _bs / 512
		block_offset = _bo
		dev_block_offset = _bo / 512
	
	void readBlock(int block_no, cstring *buf)
		for int i, 0, dev_blocks_per_block
			Ata.ReadSector(dev.disk_no, dev.offset + block_no * dev_blocks_per_block + dev_block_offset + i    , 1, &buf[512 * i])



class FileSystemData
	MountPoint mounts[16]
	int num_mounts
	FileEntry *root
	
	FileEntry *add(cstring name, int type, MountPoint *mount, FileEntry *parent)
		FileEntry *e = malloc(sizeof(FileEntry))
		e.num_blocks = 0
		e.blocks = nil
		strcpy(&e.name, &name)
		e.parent = parent
		e.type = type
		e.mount = mount
		e.next = nil
		e.first_sub = nil
		e.op = nil
		if parent
			parent.add(e)
		return e
	
	void Init()
		num_mounts = 0
		root = add("-root-", FILE_TYPE_DIR, nil, nil)
	
	FileEntry *get(cstring path, FileEntry *cur_dir)
		int ppos = 0
		if path[0] == '/'
			ppos = 1
			cur_dir = root
			if path[1] == 0
				return root
		else if !cur_dir
			return nil
		FileEntry *e = cur_dir
		cstring sub
		bool has_more = true
		while has_more
			strcpy(&sub, &path[ppos])
			cstring name
			for int i, 0, 256
				if (sub[i] == '/') or (sub[i] == 0)
					has_more = (sub[i] == '/')
					ppos += i + 1
					name[i] = 0
					break
				name[i] = sub[i]
			e = e.get_sub(name)
			if !e
				return nil
		return e
	
	void get_name(cstring path, FileEntry *e)
		if e.parent
			get_name(path, e.parent)
			if e.parent.parent
				strcat(&path, &"/")
			strcat(&path, &e.name)
		else
			strcpy(&path, &"/")
		
	void __Read(int disk_no, int cluster_offset, char buffer[0]*)
		Ata.ReadSector(disk_no, cluster_offset * 4    , 1, &buffer[0])
		Ata.ReadSector(disk_no, cluster_offset * 4 + 1, 1, &buffer[512])
		Ata.ReadSector(disk_no, cluster_offset * 4 + 2, 1, &buffer[1024])
		Ata.ReadSector(disk_no, cluster_offset * 4 + 3, 1, &buffer[1536])
		
	void Mount(PartitionData *dev, FileEntry *dir)
		if VerbosityLevel >= 1
			prints("mounte...")
		MountPoint *mp = &mounts[num_mounts]
		num_mounts ++
		mp.dest = dir
		mp.dev = dev
		mp.type = &FSTMichiFS
		FSTMichiFS.mount(mp)
		if VerbosityLevel >= 1
			prints(" ok\n")

FileSystemData FileSystem

class Word
	char c[2]
	int int()
		int a = c[0]
		int b = c[1]
		return a + b * 256

class Ext2Inode
	Word rights
	Word user
	int size
	int atime, ctime, mtime, dtime
	Word group
	Word hard_links
	int blocks
	int flags
	int version
	int iblock[15]
	int file_version
	int acl
	int size_high
	int dummy
	int xx_high[3]
	bool isDir()
		return (rights.int() & 0xf000) == 0x4000
	bool isFile()
		return (rights.int() & 0xf000) == 0x8000

class FileSystemType
	int dummy

class FileSystemTypeMichiFS : FileSystemType
	char buf[2048]
	int buf_used
	
	int read_int()
		int *p = &buf[buf_used]
		buf_used += 4
		return *p
	void read_str(cstring s)
		int l = buf[buf_used] + buf[buf_used+1]*256
		buf_used += 2
		for int i, 0, l
			s[i] = buf[buf_used + i]
		buf_used += l
		s[l] = 0
	bool mount(MountPoint *mp)
		mp.update(2048, 0)
		mp.readBlock(1, &buf)
		buf_used = 0
		int NumFiles = read_int()
		for int n, 0, NumFiles
			cstring name
			read_str(name)
			FileEntry *e = FileSystem.add(name, FILE_TYPE_FILE, mp, mp.dest)
			//e.type =
			read_int()
			e.size = read_int()
			read_int() // NumParts = 1
			int first_block = read_int()
			e.num_blocks = read_int()
			e.blocks = malloc(e.num_blocks * sizeof(int))
			for int i, 0, e.num_blocks
				e.blocks[i] = first_block + i
	
	//void readBlock(int no, cstring *buf)
	//void readFileBlock(int inode, int block, cstring *buf)

FileSystemTypeMichiFS FSTMichiFS
