#define __OS__
use "base.kaba"
use "base_mem.kaba"
use "ata.kaba"
use "text_mode.kaba"
#define __STRING_CONST_AS_CSTRING__


//--------------------------------------------------------------
// Dateisystem

const int FILE_TYPE_FILE = 0
const int FILE_TYPE_DIR = 1
const int FILE_TYPE_CHAR = 8
const int FILE_TYPE_BLOCK = 16


class FileOperations
	void *_open
	void *_close
	void *_read
	void *_write

class FileEntry
	cstring name
	int type
	int size
	int num_blocks
	int blocks[0]*
	int inode
	MountPoint *mount
	FileEntry *parent
	FileEntry *next
	FileEntry *first_sub
	FileOperations *op
	
	void add(FileEntry *e)
		e.parent = self
		if first_sub
			FileEntry *i = first_sub
			while i.next
				i = i.next
			i.next = e
		else
			first_sub = e
	void _show()
		printi(type)
		prints(" ")
		printi(size)
		prints(" ")
		prints(name)
		prints("\n")
	
	void show()
		_show()
		FileEntry *e = first_sub
		while e
			prints("    ")
			e._show()
			e = e.next
	FileEntry *get_sub(cstring sname)
		if strcmp(&sname, &"..") == 0
			return parent
		if strcmp(&sname, &".") == 0
			return self
		FileEntry *e = first_sub
		while e
			if strcmp(&sname, &e.name) == 0
				return e
			e = e.next
		return nil



class MountPoint
	FileSystemType *type
	PartitionData *dev
	FileEntry *dest
	int block_offset
	int block_size
	
	int dev_blocks_per_block
	int dev_block_offset
	
	void update(int _bs, int _bo)
		block_size = _bs
		dev_blocks_per_block = _bs / 512
		block_offset = _bo
		dev_block_offset = _bo / 512
	
	void readBlock(int block_no, cstring *buf)
		for int i, 0, dev_blocks_per_block
			Ata.ReadSector(dev.disk_no, dev.offset + block_no * dev_blocks_per_block + dev_block_offset + i    , 1, &buf[512 * i])



class FileSystemData
	MountPoint mounts[16]
	int num_mounts
	FileEntry *root
	
	FileEntry *add(cstring name, int type, MountPoint *mount, FileEntry *parent)
		FileEntry *e = malloc(sizeof(FileEntry))
		e.num_blocks = 0
		e.blocks = nil
		strcpy(&e.name, &name)
		e.parent = parent
		e.type = type
		e.mount = mount
		e.next = nil
		e.first_sub = nil
		e.op = nil
		if parent
			parent.add(e)
		return e
	
	void Init()
		num_mounts = 0
		root = add("-root-", FILE_TYPE_DIR, nil, nil)
	
	FileEntry *get(cstring path, FileEntry *cur_dir)
		int ppos = 0
		if path[0] == '/'
			ppos = 1
			cur_dir = root
			if path[1] == 0
				return root
		else if !cur_dir
			return nil
		FileEntry *e = cur_dir
		cstring sub
		bool has_more = true
		while has_more
			strcpy(&sub, &path[ppos])
			cstring name
			for int i, 0, 256
				if (sub[i] == '/') or (sub[i] == 0)
					has_more = (sub[i] == '/')
					ppos += i + 1
					name[i] = 0
					break
				name[i] = sub[i]
			e = e.get_sub(name)
			if !e
				return nil
		return e
	
	void get_name(cstring path, FileEntry *e)
		if e.parent
			get_name(path, e.parent)
			if e.parent.parent
				strcat(&path, &"/")
			strcat(&path, &e.name)
		else
			strcpy(&path, &"/")
		
	void __Read(int disk_no, int cluster_offset, char buffer[0]*)
		Ata.ReadSector(disk_no, cluster_offset * 4    , 1, &buffer[0])
		Ata.ReadSector(disk_no, cluster_offset * 4 + 1, 1, &buffer[512])
		Ata.ReadSector(disk_no, cluster_offset * 4 + 2, 1, &buffer[1024])
		Ata.ReadSector(disk_no, cluster_offset * 4 + 3, 1, &buffer[1536])
		
	void Mount(PartitionData *dev, FileEntry *dir, cstring fs_name)
		if VerbosityLevel >= 1
			prints("mounte...")
		MountPoint *mp = &mounts[num_mounts]
		num_mounts ++
		mp.dest = dir
		mp.dev = dev
		if strcmp(&fs_name, &"michifs") == 0
			mp.type = &FSTMichiFS
			FSTMichiFS.mount(mp)
		else if strcmp(&fs_name, &"ext2") == 0
			mp.type = &FSTExt2
			FSTExt2.mount(mp)
		if VerbosityLevel >= 1
			prints(" ok\n")

FileSystemData FileSystem

class Word
	char c[2]
	int int()
		int a = c[0]
		int b = c[1]
		return a + b * 256

class FileSystemType
	int dummy

class FileSystemTypeMichiFS : FileSystemType
	char buf[2048]
	int buf_used
	
	int read_int()
		int *p = &buf[buf_used]
		buf_used += 4
		return *p
	void read_str(cstring s)
		int l = buf[buf_used] + buf[buf_used+1]*256
		buf_used += 2
		for int i, 0, l
			s[i] = buf[buf_used + i]
		buf_used += l
		s[l] = 0
	bool mount(MountPoint *mp)
		mp.update(2048, 0)
		mp.readBlock(1, &buf)
		buf_used = 0
		int NumFiles = read_int()
		for int n, 0, NumFiles
			cstring name
			read_str(name)
			FileEntry *e = FileSystem.add(name, FILE_TYPE_FILE, mp, mp.dest)
			//e.type =
			read_int()
			e.size = read_int()
			read_int() // NumParts = 1
			int first_block = read_int()
			e.num_blocks = read_int()
			e.blocks = malloc(e.num_blocks * sizeof(int))
			for int i, 0, e.num_blocks
				e.blocks[i] = first_block + i
	
	//void readBlock(int no, cstring *buf)
	//void readFileBlock(int inode, int block, cstring *buf)

class Ext2Inode
	Word rights
	Word user
	int size
	int atime, ctime, mtime, dtime
	Word group
	Word hard_links
	int blocks
	int flags
	int version
	int iblock[15]
	int file_version
	int acl
	int size_high
	int dummy
	int xx_high[3]
	bool isDir()
		return (rights.int() & 0xf000) == 0x4000
	bool isFile()
		return (rights.int() & 0xf000) == 0x8000

class Ext2SuperBlock
	int inodes_count
	int blocks_count
	int reserved_blocks_count
	int free_blocks_count
	int free_inodes_count
	int first_data_block
	int log_block_size
	int log_cluster_size
	int blocks_per_group
	int obso_frags_per_group
	int inodes_per_group
	int mtime, wtime
	Word mnt_count, max_mnt_count
	Word magic
	Word state
	Word errors
	Word minor_rev_level
	int lastcheck, checkinterval
	int creator_os
	int rev_level
	Word def_resuid, def_resgid
	int first_ino
	Word inode_size
	Word block_group_nr
	int feature_compat, feature_incompat, feature_ro_compat
	char uuid[16]
	char volume_name[16]
	char last_mounted[64]
	char _filler_[1024-200]

class Ext2BlockGroupDescriptor
	int block_bitmap
	int inode_bitmap
	int inode_table
	Word free_blocks_count, free_inodes_count
	Word used_dirs_count
	Word flags
	int exclude_bitmap
	Word block_bitmap_csum, inode_bitmap_csum
	Word itable_unused
	Word checksum

class Ext2DirEntryHeader
	int inode
	Word rec_len
	char name_len
	char file_type

class FileSystemTypeExt2 : FileSystemType
	int inodes_per_block
	Ext2SuperBlock sb
	Ext2BlockGroupDescriptor bg
	char _buf[4096]
	bool readable, writable
	int block_size
	int block_offset
	MountPoint *_mp
	
	bool mount(MountPoint *mp)
		_mp = mp
		mp.update(1024, 0) // temp
		
		mp.readBlock(1, &sb)
		
		block_size = 1 << (sb.log_block_size + 10)
		inodes_per_block = block_size / sizeof(Ext2Inode) //128
		block_offset = 1024
		if block_size == 1024
			block_offset = 0
	
		//f.seek(1024 + block_size, true)
		//f.xread(&bg, sizeof(BlockGroupDescriptor))
		mp.readBlock(1 + block_size / 1024, &bg)
		
		mp.update(block_size, block_offset)
		
		
		//showMetaData()
		testCompatibility()
		if readable
			loadInodeRecursive(2, mp.dest)
			
	
	void testCompatibility()
		readable = false
		writable = false
		if (sb.feature_incompat & 0xfffffffd) > 0
			return
		readable = true
		if (sb.feature_ro_compat & 0xfffffffe) > 0
			return
		writable = true
	
	void readInode(int index, Ext2Inode inode, FileEntry *e)
		int group_no = (index - 1) / sb.inodes_per_group // 0...
		int offset = ((index - 1) % sb.inodes_per_group) * sizeof(Ext2Inode)
		// group_no!!!!!!!!!!!!!!
		_mp.readBlock(group_no * sb.blocks_per_group + bg.inode_table + offset/block_size, &_buf)
		memcpy(&inode, &_buf[offset % block_size], sizeof(Ext2Inode))
		
		e.type = FILE_TYPE_FILE
		if inode.isDir()
			e.type = FILE_TYPE_DIR
		
		e.size = inode.size
		e.num_blocks = (inode.size-1) / block_size + 1
		e.blocks = malloc(e.num_blocks * sizeof(int))
		int num_direct = e.num_blocks
		if num_direct > 12
			num_direct = 12
	
		for int i, 0, num_direct
			e.blocks[i] = inode.iblock[i]
		if e.num_blocks > 12
			_mp.readBlock(inode.iblock[12], &_buf)
			int p[0]* = &_buf
			for int i, 12, e.num_blocks
				e.blocks[i] = p[i - 12]
		
	
	Ext2Inode inode
	
	cstring *readInodeContents(FileEntry *e)
		cstring *buf = malloc(e.num_blocks * block_size)
		for int i, 0, e.num_blocks
			_mp.readBlock(e.blocks[i], &buf[i * block_size])
		
		return buf
	
	void loadInodeRecursive(int index, FileEntry *dir)
		readInode(index, inode, dir)
		if !inode.isDir()
			return
		cstring *cont = readInodeContents(dir)
		int p = 0
		while p < dir.size
			Ext2DirEntryHeader *d = &cont[p]
			if d.rec_len.int() == 0
				break
			cstring name
			int len = d.name_len
			memcpy(&name, &cont[p + 8], len)
			name[len] = 0
			p += d.rec_len.int()
			if d.name_len == 0 or d.inode == 0
				continue
				
		
			if strcmp(&name, &".") != 0 and strcmp(&name, &"..") != 0
				int type = FILE_TYPE_FILE
				if d.file_type == 2
					type = FILE_TYPE_DIR
				FileEntry *e = FileSystem.add(name, type, _mp, dir)
				loadInodeRecursive(d.inode, e)
		free(cont)

FileSystemTypeMichiFS FSTMichiFS
FileSystemTypeExt2 FSTExt2
