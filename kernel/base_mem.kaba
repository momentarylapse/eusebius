#define __OS__
use "base.kaba"
use "text_mode.kaba"


//--------------------------------------------------------------
// Speicher-"Verwaltung"	

const int KERNEL_MEM = 0x00800000 // 8mb
const int MEM_HEAP_OFFSET = 0x00400000 // (4-2)=2mb Kernel-Variablen
const int MEM_HEAP_SIZE = 0x00400000

int MemHeapAllocated


class MallocHeader
	int size // header + payload
	MallocHeader *next
	MallocHeader *prev
	void *after()
		char[0]* pp = self
		return &pp[size]
	void *payload()
		char[0]* pp = self
		return &pp[sizeof(MallocHeader)]
MallocHeader *malloc_first_free


void *malloc(int size)
	//prints "-malloc "
	MallocHeader *cur = malloc_first_free
	
	// count in the allocation header
	size += sizeof(MallocHeader)
	while cur
		if size <= cur.size - sizeof(MallocHeader)
			cur.size -= size
			MallocHeader *hh = cur.after()
			hh.size = size
			hh.next = nil
			hh.prev = nil
			MemHeapAllocated += size
			memcheck()
			return hh.payload()
		cur = cur.next
	panic "malloc: fail"
	return nil

void _cleanup(MallocHeader *h)
	if h.next
		if h.after() == h.next
			h.size += h.next.size
			h.next = h.next.next
			if h.next
				h.next.prev = h
	if h.prev
		if h.prev.after() == h
			h.prev.size += h.size
			if h.next
				h.next.prev = h.prev
			h.prev.next = h.next

void free(void *p)
	//prints "---free"
	MallocHeader *cur = malloc_first_free
	while cur
		if (_p2i(p) < _p2i(cur.next)) or !cur.next
			char[0]* pp = p
			MallocHeader *hh = &pp[- sizeof(MallocHeader)]
			MemHeapAllocated -= hh.size
			
			hh.next = cur.next
			if cur.next
				cur.next.prev = hh
			hh.prev = cur
			cur.next = hh
			_cleanup(hh)
			memcheck()
			return
		cur = cur.next
	panic "free: fail"



void memcheck()
	MallocHeader *h = malloc_first_free
	while h
		if h.next
			if _p2i(h.next) < _p2i(h) + h.size
				panic "memcheck: h.next>h+size"
			if h != h.next.prev
				panic "memcheck: h!=h.next.prev"
		h = h.next

void mem_init()
	MemHeapAllocated = 0
	malloc_first_free = _i2p(MEM_HEAP_OFFSET)
	malloc_first_free.size = MEM_HEAP_SIZE
	malloc_first_free.next = nil
	malloc_first_free.prev = nil
