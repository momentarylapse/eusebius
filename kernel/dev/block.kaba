use common
use io.text
use ata


class BlockDevice
	int major, minor
	int disk_no
	int offset, size
	int block_size
	char type
	bool active
	cstring name
	void *p_read_block # (self, buf, minor, index)
	
	void __assign__(BlockDevice o)
	
#	int read_block(int index, void *buf)
#		if !p_read_block
#			return -1
#		return call_ppii(p_read_block, &self, buf, minor, index)

class BlockDevManager	

	static BlockDevice[8] devs
	static int num_devs
	
	static void init()
		num_devs = 0
		AtaController.init()
		read_partitions_from_disk(0)
		show()
	
	static BlockDevice* add_dev(int major, int minor)
		var p = &devs[num_devs]
		p.major = major
		p.minor = minor
		num_devs ++
		return p
	
	static BlockDevice* get(int major, int minor)
		for d in devs
			if d.major == major and d.minor == minor
				return &d
		return nil
		

	static void read_partitions_from_disk(int disk_no)
		var p = add_dev(0, 0)
		p.block_size = 512
		p.disk_no = disk_no
		p.offset = 0
		p.size = AtaController.disk_info[disk_no].size
		p.type = 0
		p.p_read_block = nil
		p.active = false
		strcpy(p.name, "hda")
		p.name[2] = 'a' + disk_no
		# read MBR
		AtaController.read_sector(disk_no, 0, 1, &AtaController.buffer)
		#MountPartition=false
		for n in 0:4
			int *offset = &AtaController.buffer[454+n*16]
			int *size = &AtaController.buffer[458+n*16]
			int type = AtaController.buffer[450+n*16]
			if (type == 0) or (*size == 0)
				continue
			p = add_dev(0, n+1)
			p.block_size = 512
			p.disk_no = disk_no
			p.offset = *offset
			p.size = *size
			p.type = AtaController.buffer[450+n*16]
			p.active = (AtaController.buffer[446+n*16] == 0x80)
			strcpy(p.name, "hda_")
			p.name[2] = 'a' + disk_no
			p.name[3] = n + 49
		#for n, 0, 512
	#		DrawHex(n*3,2,&AtaBuffer[n],1)
			
	static void show()
		#printi(num_devs)
		prints("primary partitions:       offset   size\n")
		for n in 0:num_devs
			var p = &devs[n]
			prints("/dev/")
			prints(p.name)
			TextMode.pos = 60
			if p.active
				prints("(aktiv)")
			TextMode.pos = 27
			printi(p.offset/2)
			TextMode.pos = 36
			printi(p.size/2)
			TextMode.pos = 50
			if p.type == 0x83
				prints("Linux")
			else if p.type == 0x20
				prints("MichiFS")
			else if p.type == 0x0c
				prints("Fat 32")
			else if p.type == 0x0e
				prints("Fat 16")
			else if p.type == 0x07
				prints("NTFS")
			else if p.type == 0x0f
				prints("Extended...")
			else
				printh(&p.type, 1)
			prints("\n")

