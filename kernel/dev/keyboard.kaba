use common
use io.text
use io.io
use fs.fs
use mem.paging
use irq.irq
use tty
#use task.task

let KEYBOARD_IRQ = 1



class FileOperationsKey extends FileOperations
	var key_buf: cstring
	var key_num = 0
	var key_escaped = false
	var key_shift = false
	var key_control = false
	var key_altgr = false
	var key_reading = 0

	func override open(f: FileEntry) -> int
		key_num = 0
		key_reading ++
		return 0
	func override close(f: FileEntry) -> int
		key_reading --
		return 0
	func override read(f: FileEntry, page_dir: PageRootTable*, addr: int, _size: int) -> int
		var size = _size
		if key_num == 0
			return -EWOULDBLOCK
		if size > key_num
			size = key_num
		page_dir.memcpy2task(addr, &key_buf, size)
		key_num -= size
		memcpy(&key_buf, &key_buf[size], key_num)
		return size
	func override write(f: FileEntry, page_dir: PageRootTable*, addr: int, size: int) -> int
		return 0
	
	
	func static register()
		IrqManager.set_func(KEYBOARD_IRQ + 32, raw_function_pointer(int_keyboard))
		IrqManager.unmask(KEYBOARD_IRQ)
		

	func getchar(k: int) -> int
		if key_control
			if k == 0x2e # 'C'
				return 0x03
			if k == 0x20 # 'D'
				return 0x04
			if k == 0x15 # 'Z'
				return 0x1a
			return -1
		if k == 0x1c
			return 0x0a # '\n'
		if k == 0x39
			return 0x20 # ' '
		if k == 0x0e
			return 0x7f # BACKSPACE
		if k == 0xe048
			return 0x1b5b41 # ^[A up
		if k == 0xe050
			return 0x1b5b42 # ^[B down
		if k == 0xe04b
			return 0x1b5b43 # ^[C left
		if k == 0xe04d
			return 0x1b5b44 # ^[D right
		if key_altgr
			if k == 0x1b
				return 0x7e # '~'
			if k == 0x56
				return 0x7c # '|'
			if k == 0x08
				return 0x7b # '{'
			if k == 0x09
				return 0x5b # '['
			if k == 0x0a
				return 0x5d # ']'
			if k == 0x0b
				return 0x7d # '}'
			if k == 0x10
				return 0x40 # '@'
			if k == 0x0c
				return 0x5c # '\'
		else if key_shift
			if k == 0x0b
				return 0x3d # '='
			if k == 0x02
				return 0x21 # '!'
			if k == 0x03
				return 0x22 # '"'
			#if k == 0x04
			#	return 0x00 # '§'
			if k == 0x05
				return 0x24 # '$'
			if k == 0x06
				return 0x25 # '%'
			if k == 0x07
				return 0x26 # '&'
			if k == 0x08
				return 0x2f # '/'
			if k == 0x09
				return 0x28 # '('
			if k == 0x0a
				return 0x29 # ')'
			if k == 0x35
				return 0x5f # '_'
			if k == 0x34
				return 0x3a # ':'
			if k == 0x33
				return 0x3b # ';'
			if k == 0x56
				return 0x3e # '>'
			if k == 0x2b
				return 0x27 # '''
			if k == 0x1b
				return 0x2a # '*'
			#if k == 0x29
			#	return 0x # '°'
			if k == 0x0c
				return 0x3f # '?'
			if k == 0x0d
				return 0x60 # '`'
				
			if k == 0x1e
				return 0x41 # 'A'
			if k == 0x30
				return 0x42
			if k == 0x2e
				return 0x43
			if k == 0x20
				return 0x44
			if k == 0x12
				return 0x45
			if k == 0x21
				return 0x46
			if k == 0x22
				return 0x47 # 'G'
			if k == 0x23
				return 0x48
			if k == 0x17
				return 0x49
			if k == 0x24
				return 0x4a
			if k == 0x25
				return 0x4b
			if k == 0x26
				return 0x4c
			if k == 0x32
				return 0x4d # 'M'
			if k == 0x31
				return 0x4e
			if k == 0x18
				return 0x4f
			if k == 0x19
				return 0x50
			if k == 0x10
				return 0x51
			if k == 0x13
				return 0x52 # 'R'
			if k == 0x1f
				return 0x53
			if k == 0x14
				return 0x54
			if k == 0x16
				return 0x55
			if k == 0x2f
				return 0x56
			if k == 0x11
				return 0x57
			if k == 0x2d
				return 0x58 # 'X'
			if k == 0x2c
				return 0x59
			if k == 0x15
				return 0x5a
		else
			if k == 0x0b
				return 0x30 # '0'
			if k == 0x02
				return 0x31
			if k == 0x03
				return 0x32
			if k == 0x04
				return 0x33
			if k == 0x05
				return 0x34
			if k == 0x06
				return 0x35
			if k == 0x07
				return 0x36
			if k == 0x08
				return 0x37
			if k == 0x09
				return 0x38
			if k == 0x0a
				return 0x39
			if k == 0x35
				return 0x2d # '-'
			if k == 0x34
				return 0x2e # '.'
			if k == 0x33
				return 0x2c # ','
			if k == 0x56
				return 0x3c # '<'
			if k == 0x2b
				return 0x23 # '#'
			if k == 0x1b
				return 0x2b # '+'
			if k == 0x29
				return 0x5e # '^'
			#if k == 0x0c
			#	return ... # 'ß'
			#if k == 0x0d
			#	return ... # '´'
				
			if k == 0x1e
				return 0x61 # 'a'
			if k == 0x30
				return 0x62
			if k == 0x2e
				return 0x63
			if k == 0x20
				return 0x64
			if k == 0x12
				return 0x65
			if k == 0x21
				return 0x66
			if k == 0x22
				return 0x67 # 'g'
			if k == 0x23
				return 0x68
			if k == 0x17
				return 0x69
			if k == 0x24
				return 0x6a
			if k == 0x25
				return 0x6b
			if k == 0x26
				return 0x6c
			if k == 0x32
				return 0x6d # 'm'
			if k == 0x31
				return 0x6e
			if k == 0x18
				return 0x6f
			if k == 0x19
				return 0x70
			if k == 0x10
				return 0x71
			if k == 0x13
				return 0x72 # 'r'
			if k == 0x1f
				return 0x73
			if k == 0x14
				return 0x74
			if k == 0x16
				return 0x75
			if k == 0x2f
				return 0x76
			if k == 0x11
				return 0x77
			if k == 0x2d
				return 0x78 # 'x'
			if k == 0x2c
				return 0x79
			if k == 0x15
				return 0x7a
		#printh(&k, 3)
		return -1

	func mut ps2_read_key(_k: int)
		var k = _k
			
		# add to low level device buffer
		if key_reading > 0
			if key_num < 64
				key_buf[key_num] = k
				key_num ++
			return
			
		if k == 0xe0
			key_escaped = true
		else
			if key_escaped
				k += 0xe000
			key_escaped = false
		
			if (k & 0x80) > 0
				if k == 0xaa or k == 0xb6
					key_shift = false
				if k == 0x9d or k == 0xe09d
					key_control = false
				if k == 0xe0b8
					key_altgr = false
			if k == 0x2a or k == 0x36
				key_shift = true
			if k == 0x1d or k == 0xe01d
				key_control = true
			if k == 0xe038
				key_altgr = true
		
			dev_tty_ops.add_key(getchar(k))
			
	func mut ps2_try_read()
		let k = inportb(0x64)
		if (k & 0x01) == 0
			return
		let d = inportb(0x60)
		if (k & 0x20) > 0
			pass#ps2_read_mouse(d)
		else
			ps2_read_key(d)
		#ps2_try_read()


	func static @noframe int_keyboard()
		asm{
			cli
		}
		dev_key_ops.handle_irq()
		asm{
			sti
			db 0x48
			iret
		}

	func mut handle_irq()
		IrqManager.mask(KEYBOARD_IRQ)
		prints("<key>")
		ps2_try_read()
		IrqManager.eoi(KEYBOARD_IRQ)
		IrqManager.unmask(KEYBOARD_IRQ)

var dev_key_ops: FileOperationsKey
	
