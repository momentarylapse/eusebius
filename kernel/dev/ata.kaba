use common.*
use io.text.*
use io.port.*




#--------------------------------------------------------------
# Ata Treiber

const ATA_MASK_BUSY = 0x80
const ATA_MASK_READY = 0x40
const ATA_MASK_DATA = 0x08

class AtaDiskInfo as @noauto
	var isAvailable: bool
	var isAtapi: bool
	var size: int
	var name: cstring


# FIXME: some compiler bug.... &global does not work....
func __fff(b: u8[512]) -> int&
	return &b[0] as int&

class AtaController as @noauto

	var static nAta: int
	var static Status: int
	var static IOBase, IOCtrl, ide_no, ide_ms: int
	var static MSMask: u8

	var static buffer: u8[512]
	var static BufferDW: int[0]&
	var static Size: int

	var static atapi_buffer: u8[16]
	
	var static disk_info: AtaDiskInfo[4]

	func static wait_400_ns()
		for i in 0:100
			inportb(IOBase + 7)

	func static wait_status(mask: u8, value: u8) -> bool
		var AtaStatusChar = inportb(IOBase + 7)
		var n = 1000000000
		while ((AtaStatusChar & mask)!=value) and (n >= 0)
			AtaStatusChar = inportb(IOCtrl)#+7)
			n--
		return n >= 0

	func static set_disk_add(disk_no: int)
		ide_no = (disk_no/2)
		ide_ms = (disk_no%2)
		# Adressierungs-Daten
		IOBase = 0x1f0
		if ide_no == 1
			IOBase = 0x170
		IOCtrl = IOBase + 0x206
		#IOCtrl = 0x3f6
		MSMask = 0x00
		if ide_ms == 1
			MSMask = 0x10

	func static test_disk(disk_no: int) -> bool
		set_disk_add(disk_no)
		disk_info[disk_no].isAvailable = false

		# generell ansprechbar?
		prints("IDE ")
		printi(ide_no)
		prints(":")
		printi(ide_ms)
		TextMode.pos = 20
		outportb(0x1f6, MSMask)
		wait_400_ns()
		outportb(IOBase + 2, 0x55)
		outportb(IOBase + 3, 0xaa)
		outportb(IOBase + 2, 0xaa)
		outportb(IOBase + 3, 0x55)
		outportb(IOBase + 2, 0x55)
		outportb(IOBase + 3, 0xaa)
		var sc = inportb(IOBase + 2)
		var sn = inportb(IOBase + 3)
		if (sc != 0x55) or (sn != 0xaa)
			prints("---\n")
			return false

		# now we think we know which devices, if any are there,
		# so lets try a soft reset (ignoring any errors).

		outportb(IOBase + 6, MSMask)
		wait_400_ns()
		outportb(IOCtrl, 0x0e) # soft reset
		wait_400_ns()
		outportb(IOCtrl, 0x0a)
		wait_400_ns()

		#sub_atapi_delay( 0 )
		wait_status(ATA_MASK_BUSY, 0)
		outportb(IOBase + 6, MSMask)
		wait_400_ns()

		# lets check device 0 again, is device 0 really there?
		# is it ATA or ATAPI?
		sc = inportb(IOBase + 2)
		sn = inportb(IOBase + 3)
		var fail = true
		if (sc == 0x01) and (sn == 0x01)
			disk_info[disk_no].isAtapi = false
			fail = false
			let cl = inportb(IOBase + 4)
			let ch = inportb(IOBase + 5)
			let st = inportb(IOBase + 7)
			if ( cl == 0x14 ) and (ch == 0xeb)
				prints("ATAPI (CD-Rom)")
				disk_info[disk_no].isAtapi = true
			else
				if (cl == 0x00) and (ch == 0x00) and (st != 0x00)
					prints("ATA")
				else
					fail = true
		if fail
			prints("---\n")
			return false

		#outportb( 0x1f6, 0xe0 ) # Master+LBA
#		wait_400_ns()
#		outportb( 0x3f6, 0x0e ) # ?+SoftReset+NoInt
#		wait_400_ns()
#		outportb( 0x3f6, 0x0a ) # ?+NoInt
#		wait_400_ns()
#		ata_wait_busy()

		disk_info[disk_no].isAvailable = true

		outportb(IOCtrl, 0x0a) # ?+NoInt
		wait_400_ns()
		wait_status(ATA_MASK_BUSY, 0)
		outportb(IOBase+1, 0) #?
		outportb(IOBase+2, 0) # NumSectors
 		outportb(IOBase+3, 0) # S0
 		outportb(IOBase+4, 0) # C0
		outportb(IOBase+5, 0)
		let ata_lba3 = MSMask | 0x60 # ...+LBA
		outportb(IOBase+6, ata_lba3) # H0
		if disk_info[disk_no].isAtapi
			outportb(IOBase+7, 0xa1) # IdentifyDrive (ATAPI)
		else
			outportb(IOBase+7, 0xec) # IdentifyDrive
		wait_400_ns()

		wait_status(0x88, ATA_MASK_DATA)
		wait_400_ns()

		#BufferDW
		#let xx = &buffer
		BufferDW := &buffer #__fff(buffer)
		for n in 0:128
			BufferDW[n] = inportd(IOBase)
		# die Bytes des Namens korregieren
		for n in 0:40:2
			disk_info[disk_no].name[n  ] = buffer[55+n]
			disk_info[disk_no].name[n+1] = buffer[54+n]
		disk_info[disk_no].name[40] = 0
		prints(disk_info[disk_no].name)
		memcpy(&disk_info[disk_no].size, &buffer[120], 4)
		#temp_i = Ata.DiskInfo[disk_no].size >> 11
#		asm{
#			mov eax, temp_i
#			shr eax, 0xb
#			mov temp_i, eax
#		}
		TextMode.pos = 60
		printi(disk_info[disk_no].size >> 11)
	#	TextPos=60
	#	printi(DiskInfo[disk_no].Size)
		prints("mb\n")

		return true

	func static reset(disk_no: int) -> bool
		if !disk_info[disk_no].isAvailable
			return false
		prints("AtaReset ")
		set_disk_add(disk_no)
	
		var status: u8
		status = inportb(IOBase+7)
		printh(&status,1)
		status = inportb(IOBase+1)
		printh(&status,1)
		status = inportb(IOCtrl)
		printh(&status,1)
	
		status = inportb(IOBase+7)
		printh(&status,1)
		status = inportb(IOBase+1)
		printh(&status,1)
		status = inportb(IOCtrl)
		printh(&status,1)
		prints("\n")

	func static init()
		prints("ATA devices:\n")
	
		# set up Device Control register
		outportb(0x3f6, 0x0a)
		outportb(0x376, 0x0a)

		for n in 0:4
			test_disk(n)
			
	# 1 Sektor = 512 b
	func static read_sector(disk_no: int, sector_offset: int, num_sectors: int, buf: void&) -> bool
		if !disk_info[disk_no].isAvailable
			return false
		if disk_info[disk_no].isAtapi
			return false
		#DrawString(0,24,"MAtaRead")
		set_disk_add(disk_no)
		#printh(&IOBase,2)
		# num_sectors=1...
		outportb(IOBase + 0x206, 0x0a)
	
		var status: u8


		
		outportb(IOCtrl, 0x0a) # ?+NoInt
		wait_400_ns()
		wait_status(ATA_MASK_BUSY, 0)

		outportb(IOBase+1, 0) # Features
		outportb(IOBase+2, num_sectors) # NumSectors
 		outportb(IOBase+3, sector_offset) # S0
 		outportb(IOBase+4, sector_offset >> 8) # C0
		outportb(IOBase+5, sector_offset >> 16)
		outportb(IOBase+6, sector_offset >> 24 | MSMask | 0x40 ) # H0 ...+LBA
		outportb(IOBase+7, 0x20 ) # ReadSector
		wait_400_ns()

		wait_status(0x88, ATA_MASK_DATA)
		#wait_status(AtaMaskData | AtaMaskBusy,AtaMaskData)
		wait_400_ns()

		var buf_dw = buf as int[0]&
	
		for n in 0:128 # 512b
			buf_dw[n] = inportd(IOBase)

		status=inportb(IOBase+7)
		#printh(&status,1)
		status=inportb(IOBase+1)
		#printh(&status,1)
		status=inportb(IOCtrl)
		#printh(&status,1)

		return true
		
	# 1 Sektor = 512 b
	func static write_sector(disk_no: int, sector_offset: int, num_sectors: int, buf: void&) -> bool
		if !disk_info[disk_no].isAvailable
			return false
		if disk_info[disk_no].isAtapi
			return false
		#prints "write "
		set_disk_add(disk_no)
		#printh(&IOBase,2)
		# num_sectors=1...
		outportb(IOBase + 0x206, 0x0a)
	
		var status: u8


		
		outportb(IOCtrl, 0x0a) # ?+NoInt
		wait_400_ns()
		wait_status(ATA_MASK_BUSY, 0)

		outportb(IOBase+1, 0) # Features
		outportb(IOBase+2, num_sectors) # NumSectors
 		outportb(IOBase+3, sector_offset) # S0
 		outportb(IOBase+4, sector_offset >> 8) # C0
		outportb(IOBase+5, sector_offset >> 16)
		outportb(IOBase+6, sector_offset >> 24 | MSMask | 0x40 ) # H0 ...+LBA
		outportb(IOBase+7, 0x30 ) # WriteSector
		wait_400_ns()

		wait_status(0x88, ATA_MASK_DATA)
		#wait_status(AtaMaskData | AtaMaskBusy,AtaMaskData)
		wait_400_ns()

		let buf_dw = buf as int[0]&
	
		for n in 0:128 # 512b
			outportd(IOBase, buf_dw[n])

		status=inportb(IOBase+7)
		#printh(&status,1)
		status=inportb(IOBase+1)
		#printh(&status,1)
		status=inportb(IOCtrl)
		#printh(&status,1)

		return true
