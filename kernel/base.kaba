#define __STRING_CONST_AS_CSTRING__


const int O_RDONLY = 1
const int O_WRONLY = 2
const int O_RDWR = 3
const int O_APPEND = 16
const int O_CREATE = 32
const int O_NONBLOCK = 64
const int O_TRUNC = 128

const int EWOULDBLOCK = 128
const int ENOSPC = 127
const int EACCES = 126
const int EEXIST = 125
const int EINVAL = 124
const int ENOENT = 123
const int ENOMEM = 122
const int ESRCH = 121
const int ECHILD = 120
const int EBADF = 119
const int ENFILE = 118
const int EFAULT = 117
const int ENOSYS = 116

const int F_GETFL = 1
const int F_SETFL = 2

const int SHMAT = 9
const int SHMDT = 10
const int SHMGET = 11

const int SHM_ABSOLUTE = 1 << 20
const int SHM_DEST = 1<<11
const int IPC_CREAT = 1<<12
const int IPC_EXCL = 1<<13


int MemorySize // in bytes

const cstring KERNEL_NAME = "Eusebius"
const cstring KERNEL_VERSION = "0.2.12"
const cstring MACHINE_TYPE = "x86"


//--------------------------------------------------------------
// Low Level


void read_data_from_init()
	asm{
		mov eax, [0x00005100]
		shl eax, 0x0a
		mov MemorySize, eax
	}


void memcpy(cstring *dest, cstring *source, int size)
	for n in 0:size
		dest[n] = source[n]
	/*if size > 0
		temp_i=size
		temp_p=source
		temp_p2=dest
		asm{
			mov ecx, temp_i
			mov eax, temp_p
			mov ebx, temp_p2
			_mem_cpy_loop:
				mov.b dl, [eax]
				mov.b [ebx], dl
				inc eax
				inc ebx
				loop _mem_cpy_loop
		}*/

int strlen(cstring *s)
	for i in 0:256
		if s[i] == 0
			return i
	return 256

void strcpy(cstring *a, cstring *b)
	for i in 0:256
		a[i] = b[i]
		if b[i] == 0
			break

void strcat(cstring *a, cstring *b)
	int n = strlen(a)
	strcpy(&a[n], b)

int strcmp(cstring *a, cstring *b)
	for i in 0:256
		if a[i] > b[i]
			return 1
		else if a[i] < b[i]
			return -1
		if a[i] == 0
			break
	return 0



int ceil_quot(int n, int m)
	return (n + m - 1) / m

int __temp_i__, __temp_i2__, __temp_i3__, __temp_i4__
void* __temp_p__, __temp_p2__, __temp_p3__, __temp_p4__
int _p2i(void* p)
	int* i = &p
	return *i

class PointerWrapper
	void *p

void *_i2p(int i)
	PointerWrapper *p = &i
	return p.p


class Word
	char[2] c
	int int()
		int a = c[0]
		int b = c[1]
		return a + b * 256


int call_ppii(void *f, void *a, void *b, int c, int d)
	__temp_p__ = f
	__temp_p2__ = a
	__temp_p3__ = b
	__temp_i__ = c
	__temp_i2__ = d
	asm{
		mov eax, __temp_p__
		push __temp_i2__
		push __temp_i__
		push __temp_p3__
		push __temp_p2__
		call eax
		mov __temp_i__, eax
		sub esp, 0x10
	}
	return __temp_i__


int call_ppi(void *f, void *a, void *b, int c)
	__temp_p__ = f
	__temp_p2__ = a
	__temp_p3__ = b
	__temp_i__ = c
	asm{
		mov eax, __temp_p__
		push __temp_i__
		push __temp_p3__
		push __temp_p2__
		call eax
		mov __temp_i__, eax
		sub esp, 0x0c
	}
	return __temp_i__


int call_pp(void *f, void *a, void *b)
	__temp_p__ = f
	__temp_p2__ = a
	__temp_p3__ = b
	asm{
		mov eax, __temp_p__
		push __temp_p3__
		push __temp_p2__
		call eax
		mov __temp_i__, eax
		sub esp, 0x08
	}
	return __temp_i__

int call_p(void *f, void *a)
	__temp_p__ = f
	__temp_p2__ = a
	asm{
		mov eax, __temp_p__
		push __temp_p2__
		call eax
		mov __temp_i__, eax
		sub esp, 0x04
	}
	return __temp_i__
