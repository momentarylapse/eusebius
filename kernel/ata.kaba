use "base.kaba"
use "io/text.kaba"
use "io/io.kaba"
#define __STRING_CONST_AS_CSTRING__




//--------------------------------------------------------------
// Ata Treiber

#define AtaMaskBusy		0x80
#define AtaMaskReady		0x40
#define AtaMaskData		0x08

class AtaDiskInfo
	bool isAvailable
	bool isAtapi
	int size
	cstring name

class AtaData

	int nAta
	int Status
	int IOBase, IOCtrl, ide_no, ide_ms
	char MSMask

	char[512] Buffer
	int[0]* BufferDW
	int Size

	char[16] atapi_buffer
	
	AtaDiskInfo[4] DiskInfo

	void wait_400_ns()
		for i in 0:100
			inportb(IOBase + 7)

	bool wait_status(char mask, char value)
		char AtaStatusChar = inportb(IOBase + 7)
		int n = 1000000000
		while ((AtaStatusChar & mask)!=value) and (n >= 0)
			AtaStatusChar = inportb(IOCtrl)//+7)
			n--
		return n >= 0

	void setDiskAdd(int disk_no)
		ide_no = (disk_no/2)
		ide_ms = (disk_no%2)
		// Adressierungs-Daten
		IOBase = 0x1f0
		if ide_no == 1
			IOBase = 0x170
		IOCtrl = IOBase + 0x206
		//IOCtrl = 0x3f6
		MSMask = 0x00
		if ide_ms == 1
			MSMask = 0x10

	bool testDisk(int disk_no)
		setDiskAdd(disk_no)
		DiskInfo[disk_no].isAvailable = false

		// generell ansprechbar?
		prints("IDE ")
		printi(ide_no)
		prints(":")
		printi(ide_ms)
		TextPos = 20
		outportb(0x1f6, MSMask)
		wait_400_ns()
		outportb(IOBase + 2, 0x55)
		outportb(IOBase + 3, 0xaa)
		outportb(IOBase + 2, 0xaa)
		outportb(IOBase + 3, 0x55)
		outportb(IOBase + 2, 0x55)
		outportb(IOBase + 3, 0xaa)
		char sc = inportb(IOBase + 2)
		char sn = inportb(IOBase + 3)
		if (sc != 0x55) or (sn != 0xaa)
			prints("---\n")
			return false

		// now we think we know which devices, if any are there,
		// so lets try a soft reset (ignoring any errors).

		outportb(IOBase + 6, MSMask)
		wait_400_ns()
		outportb(IOCtrl, 0x0e) // soft reset
		wait_400_ns()
		outportb(IOCtrl, 0x0a)
		wait_400_ns()

		//sub_atapi_delay( 0 )
		wait_status(AtaMaskBusy, 0)
		outportb(IOBase + 6, MSMask)
		wait_400_ns()

		// lets check device 0 again, is device 0 really there?
		// is it ATA or ATAPI?
		sc = inportb(IOBase + 2)
		sn = inportb(IOBase + 3)
		bool fail = true
		if (sc == 0x01) and (sn == 0x01)
			DiskInfo[disk_no].isAtapi = false
			fail = false
			char cl = inportb(IOBase + 4)
			char ch = inportb(IOBase + 5)
			char st = inportb(IOBase + 7)
			if ( cl == 0x14 ) and (ch == 0xeb)
				prints("ATAPI (CD-Rom)")
				DiskInfo[disk_no].isAtapi = true
			else
				if (cl == 0x00) and (ch == 0x00) and (st != 0x00)
					prints("ATA")
				else
					fail = true
		if fail
			prints("---\n")
			return false

		/*outportb( 0x1f6, 0xe0 ) // Master+LBA
		wait_400_ns()
		outportb( 0x3f6, 0x0e ) // ?+SoftReset+NoInt
		wait_400_ns()
		outportb( 0x3f6, 0x0a ) // ?+NoInt
		wait_400_ns()
		ata_wait_busy()*/

		DiskInfo[disk_no].isAvailable = true

		outportb(IOCtrl, 0x0a) // ?+NoInt
		wait_400_ns()
		wait_status(AtaMaskBusy, 0)
		outportb(IOBase+1, 0) //?
		outportb(IOBase+2, 0) // NumSectors
 		outportb(IOBase+3, 0) // S0
 		outportb(IOBase+4, 0) // C0
		outportb(IOBase+5, 0)
		char ata_lba3 = MSMask | 0x60 // ...+LBA
		outportb(IOBase+6, ata_lba3) // H0
		if DiskInfo[disk_no].isAtapi
			outportb(IOBase+7, 0xa1) // IdentifyDrive (ATAPI)
		else
			outportb(IOBase+7, 0xec) // IdentifyDrive
		wait_400_ns()

		wait_status(0x88, AtaMaskData)
		wait_400_ns()

		BufferDW = &Buffer
		for n in 0:128
			BufferDW[n] = inportd(IOBase)
		// die Bytes des Namens korregieren
		//for n, 0, 40, 2
		for n in 0:40:2
			DiskInfo[disk_no].name[n  ] = Buffer[55+n]
			DiskInfo[disk_no].name[n+1] = Buffer[54+n]
		DiskInfo[disk_no].name[40] = 0
		prints(DiskInfo[disk_no].name)
		memcpy(&DiskInfo[disk_no].size, &Buffer[120], 4)
		/*temp_i = Ata.DiskInfo[disk_no].size >> 11
		asm{
			mov eax, temp_i
			shr eax, 0xb
			mov temp_i, eax
		}*/
		TextPos = 60
		printi(DiskInfo[disk_no].size >> 11)
	//	TextPos=60
	//	printi(DiskInfo[disk_no].Size)
		prints("mb\n")

		return true

	bool reset(int disk_no)
		if !DiskInfo[disk_no].isAvailable
			return false
		prints("AtaReset ")
		setDiskAdd(disk_no)
	
		char status
		status=inportb(IOBase+7)
		printh(&status,1)
		status=inportb(IOBase+1)
		printh(&status,1)
		status=inportb(IOCtrl)
		printh(&status,1)
	
		status=inportb(IOBase+7)
		printh(&status,1)
		status=inportb(IOBase+1)
		printh(&status,1)
		status=inportb(IOCtrl)
		printh(&status,1)
		prints("\n")

	void init()
		NumPartitions = 0
		prints("ATA Geraete:\n")
	
		// set up Device Control register
		outportb(0x3f6, 0x0a)
		outportb(0x376, 0x0a)

		for n in 0:4
			testDisk(n)
			
	// 1 Sektor = 512 b
	bool readSector(int disk_no, int sector_offset, int num_sectors, char *buf)
		if !DiskInfo[disk_no].isAvailable
			return false
		if DiskInfo[disk_no].isAtapi
			return false
		//DrawString(0,24,"MAtaRead")
		setDiskAdd(disk_no)
		//printh(&IOBase,2)
		// num_sectors=1...
		outportb(IOBase + 0x206, 0x0a)
	
		char status


		
		outportb(IOCtrl, 0x0a) // ?+NoInt
		wait_400_ns()
		wait_status(AtaMaskBusy, 0)

		outportb(IOBase+1, 0) // Features
		outportb(IOBase+2, num_sectors) // NumSectors
 		outportb(IOBase+3, sector_offset) // S0
 		outportb(IOBase+4, sector_offset >> 8) // C0
		outportb(IOBase+5, sector_offset >> 16)
		outportb(IOBase+6, sector_offset >> 24 | MSMask | 0x40 ) // H0 ...+LBA
		outportb(IOBase+7, 0x20 ) // ReadSector
		wait_400_ns()

		wait_status(0x88, AtaMaskData)
		//wait_status(AtaMaskData | AtaMaskBusy,AtaMaskData)
		wait_400_ns()

		BufferDW = buf
	
		for n in 0:128 // 512b
			BufferDW[n] = inportd(IOBase)

		status=inportb(IOBase+7)
		//printh(&status,1)
		status=inportb(IOBase+1)
		//printh(&status,1)
		status=inportb(IOCtrl)
		//printh(&status,1)

		return true
		
	// 1 Sektor = 512 b
	bool writeSector(int disk_no, int sector_offset, int num_sectors, char *buf)
		if !DiskInfo[disk_no].isAvailable
			return false
		if DiskInfo[disk_no].isAtapi
			return false
		//prints "write "
		setDiskAdd(disk_no)
		//printh(&IOBase,2)
		// num_sectors=1...
		outportb(IOBase + 0x206, 0x0a)
	
		char status


		
		outportb(IOCtrl, 0x0a) // ?+NoInt
		wait_400_ns()
		wait_status(AtaMaskBusy, 0)

		outportb(IOBase+1, 0) // Features
		outportb(IOBase+2, num_sectors) // NumSectors
 		outportb(IOBase+3, sector_offset) // S0
 		outportb(IOBase+4, sector_offset >> 8) // C0
		outportb(IOBase+5, sector_offset >> 16)
		outportb(IOBase+6, sector_offset >> 24 | MSMask | 0x40 ) // H0 ...+LBA
		outportb(IOBase+7, 0x30 ) // WriteSector
		wait_400_ns()

		wait_status(0x88, AtaMaskData)
		//wait_status(AtaMaskData | AtaMaskBusy,AtaMaskData)
		wait_400_ns()

		BufferDW = buf
	
		for n in 0:128 // 512b
			outportd(IOBase, BufferDW[n])

		status=inportb(IOBase+7)
		//printh(&status,1)
		status=inportb(IOBase+1)
		//printh(&status,1)
		status=inportb(IOCtrl)
		//printh(&status,1)

		return true

AtaData Ata


class PartitionData
	int disk_no
	int offset, size
	int block_size
	char type
	bool active
	cstring name
	void *readFileBlock // (int inode, int block, cstring *buf)
	
PartitionData[8] Partition
int NumPartitions

void ReadPartitions(int disk_no)
	PartitionData *p = &Partition[NumPartitions]
	NumPartitions ++
	p.disk_no = disk_no
	p.offset = 0
	p.size = Ata.DiskInfo[disk_no].size
	p.type = 0
	p.readFileBlock = nil
	p.active = false
	strcpy(&p.name, &"hda")
	p.name[2] = 'a' + disk_no
	// mbr lesen
	Ata.readSector(disk_no, 0, 1, &Ata.Buffer)
	//MountPartition=false
	for n in 0:4
		int *offset = &Ata.Buffer[454+n*16]
		int *size = &Ata.Buffer[458+n*16]
		int type = Ata.Buffer[450+n*16]
		if (type == 0) or (*size == 0)
			continue
		p = &Partition[NumPartitions]
		NumPartitions ++
		p.disk_no = disk_no
		p.offset = *offset
		p.size = *size
		p.type = Ata.Buffer[450+n*16]
		p.active = (Ata.Buffer[446+n*16] == 0x80)
		strcpy(&p.name, &"hda_")
		p.name[2] = 'a' + disk_no
		p.name[3] = n + 49
	/*for n, 0, 512
		DrawHex(n*3,2,&AtaBuffer[n],1)*/
		
void ShowPartitions()
	prints("Primaere Partitionen:     Offset   Groesse\n")
	for n in 0:NumPartitions
		PartitionData *p = &Partition[n]
		prints("/dev/")
		prints(p.name)
		TextPos = 60
		if p.active
			prints("(aktiv)")
		TextPos = 27
		printi(p.offset/2)
		TextPos = 36
		printi(p.size/2)
		TextPos = 50
		if p.type == 0x83
			prints("Linux")
		else if p.type == 0x20
			prints("MichiFS")
		else if p.type == 0x0c
			prints("Fat 32")
		else if p.type == 0x0e
			prints("Fat 16")
		else if p.type == 0x07
			prints("NTFS")
		else if p.type == 0x0f
			prints("Erweitert...")
		else
			printh(&p.type, 1)
		prints("\n")

