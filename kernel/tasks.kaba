#define __OS__
use "base.kaba"
use "text_mode.kaba"
use "filesystem.kaba"
use "file_access.kaba"
use "base_mem.kaba"
use "paging.kaba"
use "shared_memory.kaba"
#define __STRING_CONST_AS_CSTRING__




const int MAX_OPEN_FILES_PER_TASK = 16
const int MAX_SHARED_MEMS_PER_TASK = 1

const int SIGKILL = 9
const int SIGCONT = 18
const int SIGSTOP = 19


//--------------------------------------------------------------
// Tasks

const int MAX_TASKS = 256
const int TASK_STACK_SIZE = 40960
const int TASK_STACK_POS = 0x00c00000
const int NUM_PRE_GDT_ENTRIES = 5
const int INITIAL_TASK_MEM = 0x00800000

enum
	TASK_STATUS_UNUSED
	TASK_STATUS_SLEEPING
	TASK_STATUS_RUNNING
	TASK_STATUS_WAITING
	TASK_STATUS_ZOMBIE
	//TASK_STATUS_DEAD

class TaskStateSegment
	int prev
	void *esp0
	int ss0
	void *esp1
	int ss1
	void *esp2
	int ss2
	PageDirectory *cr3 // =PDPR
	void *eip
	int eflags // Iterrupt Flag
	int eax
	int ecx
	int edx
	int ebx
	void *esp
	void *ebp
	int esi
	int edi
	int es, cs, ss, ds, fs, gs
	int x, y
	
	
	void set(void *stack_pos, int _cs, int _ds, int pvl, PageDirectory *page_dir, void *task)
		int _ss = _ds
		prev = 0 // previous TSS (dynamisch)
		esp0 = stack_pos
		ss0 = _ss * 8
		esp1 = stack_pos
		ss1 = _ss * 8
		esp2 = stack_pos
		ss2 = _ss * 8
		cr3 = page_dir
		eip = task
		eflags = 0x200 + pvl * 0x1000 // IterruptFlag + PVL
		eax = 0
		ecx = 0
		edx = 0
		ebx = 0
		esp = stack_pos
		ebp = stack_pos
		esi = 0
		edi = 0
		es = _ds * 8
		cs = _cs * 8
		ss = _ss * 8
		ds = _ds * 8
		fs = _ds * 8
		gs = _ds * 8
		x = 0
		y = 0

int[2] TaskCallData

enum
	WAITING_MODE_TASK_EXIT
	WAITING_MODE_FILE_READ
	WAITING_MODE_FILE_WRITE

class TaskSharedMemoryRef
	SharedMemory *s
	int dest // task space

class TaskData
	TaskStateSegment tss
	int[0]* stack
	int stack_size
	int desc // Index in GDT
	int pid, status
	int return_status
	int waiting_mode
	int waiting_param_i1, waiting_param_i2, waiting_param_i3
	int *waiting_param_p
	TaskData *parent
	cstring name
	cstring arg
	FileEntry *cur_dir
	PageDirectory *page_dir
	int mem_bottom, mem_size
	
	bool kernel_mode
	OpenFileData*[MAX_OPEN_FILES_PER_TASK] handles
	TaskSharedMemoryRef*[MAX_SHARED_MEMS_PER_TASK] shmem
	
	void __assign__(TaskData o)
		nil
	
	void start()
		status = TASK_STATUS_RUNNING
	
	// nur um einmalig den Scheduler zu starten
	void run_forced()
		/*prints("springe in ")
		printi(t.pid)
		prints(t.name)*/
		// "Task Gate Descriptor" ---- falsch, kein gate!
		TaskCallData[0] = 0
		TaskCallData[1] = 8 * desc
		//printi(t.desc)
		//prints(":\n")
		__temp_p__ = &TaskCallData[0]

		// in Task springen
		//t.status = TASK_STATUS_RUNNING
		asm{
			mov eax, __temp_p__
			//db 0xff
			//db 0x28
			//jmp_far [eax]
			db 0xff
			db 0x18
			//call_far [eax]
			//jmp_far 0x004000000000 //0x0040:0x00000000
		}
	int addr2kernel(int addr)
		return page_dir.addr2kernel(addr)
	
	int set_cur_dir(cstring dir)
		FileEntry *e = get_file(dir)
		if !e
			return -1
		if e.type != FILE_TYPE_DIR
			return -2
		cur_dir = e
		return 0
		
	FileEntry *get_file(cstring path)
		return FileSystem.get(path, cur_dir)
		
	int add_handle(OpenFileData *oh)
		for h,i in handles
			if !h
				h = oh
				oh.ref_count ++
				return i
		return -1

	void clean_up_resources()
		for h in handles
			if h
				h.unref()
				h = nil
		
		for s in shmem
			if s.s
				page_dir.unmap(s.dest, s.s.size, false)
				s.s.unref()
				s.s = nil
				
		if !kernel_mode
			if page_dir
				page_dir.unmap(0, KERNEL_MEM, false)
				page_dir.unmap(mem_bottom, mem_size, true)
				Paging.free_page(_p2i(page_dir))
				page_dir = nil

	void clean_up_deep()
		clean_up_resources()
		status = TASK_STATUS_UNUSED
		
	void *get_initial_stack_pos()
		return _i2p(_p2i(stack) + stack_size)
	
	void set_wait(int mode, void *param_p, int param_i1, int param_i2, int param_i3)
		status = TASK_STATUS_WAITING
		waiting_mode = mode
		waiting_param_p = param_p
		waiting_param_i1 = param_i1
		waiting_param_i2 = param_i2
		waiting_param_i3 = param_i3
	
	int pages_alloced()
		int n = mem_size / PAGE_SIZE
		n += page_dir.count_entries() // all page tables
		n ++ // page_dir itself
		return n

//--------------------------------------------------------------
// Dateizugriff
	
	OpenFileData *get_handle(int handle)
		if (handle < 0) or (handle >= MAX_OPEN_FILES_PER_TASK)
			return nil
		return handles[handle]

	int sys_open(cstring filename, int flags)
		OpenFileData *of = kernel_open(filename, flags, cur_dir)
		if !of
			return -ENOENT
		int index = add_handle(of)
		if index < 0
			of.unref()
		return index


	int sys_read(int handle, int addr, int size)
		OpenFileData *of = get_handle(handle)
		if !of
			return -EBADF
		int r = of.read(page_dir, addr, size)
		if r == E_WOULD_BLOCK and of.blocking
			set_wait(WAITING_MODE_FILE_READ, nil, handle, addr, size)
		return r


	int sys_write(int handle, int addr, int size)
		OpenFileData *of = get_handle(handle)
		if !of
			return -EBADF
		return of.write(page_dir, addr, size)

	int sys_getdents(int handle, int addr, int num)
		OpenFileData *of = get_handle(handle)
		if !of
			return -EBADF
		return of.getdents(page_dir, addr, num)

	int sys_close(int handle)
		OpenFileData *of = get_handle(handle)
		if !of
			return -EBADF
		of.unref()
		handles[handle] = nil
		return 0
	
	int sys_dup(int fd)
		OpenFileData *of = get_handle(fd)
		if !of
			return -EBADF
		int index = add_handle(of)
		return index
	
	int sys_pipe(int addr)
		FileEntry *e = FileSystem.add(":pipe:", FILE_TYPE_PIPE, nil, nil)
		if !e
			return -ENFILE
		if !create_pipe(e)
			return -3
		OpenFileData *of_in = kernel_open_entry(e, O_RDONLY)
		OpenFileData *of_out = kernel_open_entry(e, O_WRONLY)
		int[2] fd
		fd[0] = add_handle(of_in)
		fd[1] = add_handle(of_out)
		page_dir.memcpy2task(addr, &fd, 8)
		
	int sys_mkdir(cstring filename)
		return kernel_mkdir(filename, cur_dir)

	int sys_mknod(cstring filename, int flags)
		return kernel_mknod(filename, flags, cur_dir)
	
	int sys_execute(cstring filename, int fd_in, int fd_out)
		int h = sys_open(filename, O_RDONLY)
		if h < 0
			return -ENOENT
		TaskData *t = AddTask(filename, _i2p(0x00a00000), false, self)
		if !t
			sys_close(h)
			return -ENOMEM
		memcpy(&t.arg, &filename, sizeof(cstring))
		int addr = 0x00200000 + KERNEL_MEM // task space...
		OpenFileData *of = handles[h]
		while true
			//int r = sys_read(caller, h, addr, 1024)
			int r = of.read(t.page_dir, addr, 1024)
			if r <= 0
				break
			addr += r
		sys_close(h)
		
		OpenFileData *of_in = get_handle(fd_in)
		OpenFileData *of_out = get_handle(fd_out)
		t.add_handle(of_in)
		t.add_handle(of_out)
	
		t.start()
		return t.pid

	void sys_exit(int r)
		return_status = r
		clean_up_resources()
		status = TASK_STATUS_ZOMBIE
		
		for t in Task
			if t.status == TASK_STATUS_WAITING
				if t.waiting_mode == WAITING_MODE_TASK_EXIT and t.waiting_param_i1 == pid
					t.tss.eax = 0// // return waitpid()
					*t.waiting_param_p = r
					clean_up_deep()
					t.start()

	int sys_waitpid(int _pid, int status_addr, int options)
		if _pid < 0 or _pid >= MAX_TASKS
			return -ECHILD
		TaskData *t = &Task[_pid]
		if t.status == TASK_STATUS_UNUSED
			return -ECHILD
		int *_status = _i2p(addr2kernel(status_addr))
		if t.status == TASK_STATUS_ZOMBIE
			*_status = t.return_status
			t.clean_up_deep()
			start()
			return 0
		if (options & 1) > 0
			return -2
		set_wait(WAITING_MODE_TASK_EXIT, _status, _pid, 0, 0)
		return 0

	int sys_kill(int _pid, int signal)
		if _pid < 0 or _pid >= MAX_TASKS
			return -ESRCH
		TaskData *t = &Task[_pid]
		if t.status == TASK_STATUS_UNUSED
			return -ESRCH
		if signal == SIGKILL
			t.clean_up_deep()
		else if signal == SIGSTOP
			if t.status == TASK_STATUS_RUNNING
				t.status = TASK_STATUS_SLEEPING
		else if signal == SIGCONT
			if t.status == TASK_STATUS_SLEEPING
				t.status = TASK_STATUS_RUNNING
		return 0

	int sys_brk(int new_top)
		int cur_top = mem_bottom + mem_size
		if new_top <= cur_top
			return cur_top
		if !page_dir.map_by_alloc(mem_bottom, new_top - cur_top, true)
			return -ENOMEM
		mem_size = new_top - mem_bottom
		return new_top
	
	int sys_fcntl(int fd, int op, int param)
		OpenFileData *of = get_handle(fd)
		if !of
			return -EBADF
		if op == F_GETFL
			return of.get_flags()
		if op == F_SETFL
			of.set_flags(param)
			return 0
		return -EINVAL
	
	int sys_fork()
		TaskData *t = AddTask("-fork-", _i2p(0x00a00000), false, self)
		if !t
			return -ENOMEM
		t.page_dir.clone(page_dir, KERNEL_MEM)
		memcpy(&t.arg, &arg, sizeof(cstring))
		strcpy(&t.name, &name)
		strcpy(&t.cur_dir, &cur_dir)
		t.parent = self
		t.tss = tss
		t.tss.cr3 = t.page_dir
		t.tss.eax = 0 // fork() return for child
	
		t.start()
		return t.pid
	
	int sys_ipc(int cmd, int p1, int p2, int p3)
		if cmd == SHMGET
			return SharedMem.shm_get(p1, p2, p3, pid)
		if cmd == SHMAT
			for r in shmem
				if !r.s
					r.s = SharedMem.get(p1)
					if !r.s
						return -ENOENT
					r.dest = 0xa0000000
					r.s.refcount ++
					page_dir.map_lin(r.dest, r.s.p, r.s.size, true)
					page_dir.memcpy2task(p2, &r.dest, 4)
					return 0
			return -1
		return -EINVAL
	
TaskData[MAX_TASKS] Task
TaskData *KernelTask
TaskData *IdleTask
TaskData *TimerTask
TaskData *SysCallTask
int CurPid
int RunningPid
bool InterruptsEnabled

class GlobalDescriptorData
	int a, b
	void set_base(int base, int limit, bool gran)
		a = (base << 16) + (limit & 0xffff) // base[15..0] limit[15..0]
		b = (base & 0xff000000) + (limit & 0x0f0000) + ((base >> 16) & 0xff)  // base[31..24],..limit[19..16] not busy, base[23..16]
		b += 0x00008000 // present
		if gran
			b += 0x00800000
	void set_data(int base, int limit, bool executable, int pvl)
		set_base(base, limit >> 12, true)
		b += 0x00401200
		if executable
			b += 0x00000800
		b += 0x00002000 * pvl
	void set_task(TaskData *t)
		set_base(_p2i(&t.tss), 103, false)
		b += 0x00000900 // not busy
	void set_busy(bool busy)
		if busy
			b = b | 0x200
		else
			b = b & 0xfffffdff

GlobalDescriptorData[NUM_PRE_GDT_ENTRIES + MAX_TASKS] GlobalDescriptorTable

int get_next_pid()
	for i in CurPid:MAX_TASKS
		if Task[i].status == TASK_STATUS_UNUSED
			CurPid = i + 1
			return i
	for i in 0:CurPid
		if Task[i].status == TASK_STATUS_UNUSED
			CurPid = i + 1
			return i
	return -1

TaskData *AddTask(cstring name, void *func, bool kernel_mode, TaskData *parent)
	int pid = get_next_pid()
	if pid < 0
		return nil
	TaskData *t = &Task[pid]
	t.pid = pid

	strcpy(&t.name, &name)
	t.desc = NUM_PRE_GDT_ENTRIES + pid
	t.status = TASK_STATUS_SLEEPING
	if parent
		t.cur_dir = parent.cur_dir
	else
		t.cur_dir = FileSystem.root
	t.parent = parent
	t.kernel_mode = kernel_mode
	t.stack_size = TASK_STACK_SIZE
	if kernel_mode
		t.stack = malloc(TASK_STACK_SIZE)
		t.page_dir = KernelPageDir
		t.mem_bottom = 0
		t.mem_size = 0
		t.tss.set(t.get_initial_stack_pos(), 1, 2, 0, KernelPageDir, func)
	else
		t.stack = _i2p(TASK_STACK_POS)
		t.mem_bottom = KERNEL_MEM
		t.mem_size = INITIAL_TASK_MEM
		t.page_dir = Paging.create_page_directory(KERNEL_MEM, false)
		if !t.page_dir.map_by_alloc(t.mem_bottom, t.mem_size, true)
			nil // ...
		t.tss.set(t.get_initial_stack_pos(), 3, 4, 3, t.page_dir, func)
	GlobalDescriptorTable[t.desc].set_task(t)

	return t

// Scheduler
int GetNextTask(int pid)
	for i in pid + 1:MAX_TASKS
		if Task[i].status == TASK_STATUS_RUNNING
			return i
	for i in 0:pid+1
		if Task[i].status == TASK_STATUS_RUNNING
			return i
	return IdleTask.pid

void ProcessWaitingTasks()
	for t in Task
		if t.status == TASK_STATUS_WAITING
			if t.waiting_mode == WAITING_MODE_FILE_READ
				int r = t.sys_read(t.waiting_param_i1, t.waiting_param_i2, t.waiting_param_i3)
				if r >= 0
					t.tss.eax = r // return r
					t.start()
			else if t.waiting_mode == WAITING_MODE_FILE_WRITE
				r = t.sys_write(t.waiting_param_i1, t.waiting_param_i2, t.waiting_param_i3)
				if r >= 0
					t.tss.eax = r // return r
					t.start()

void idle_func()
	while true
		/*for int i, 0, 1000000
			nil
		prints("-idle-")*/
		asm{
			hlt
		}

void InitTasks()
	if VerbosityLevel >= 1
		prints("init Tasks")
	InterruptsEnabled = false
	
	// null descriptor
	for i in 0:NUM_PRE_GDT_ENTRIES + MAX_TASKS
		GlobalDescriptorTable[i].a = 0x00000000
		GlobalDescriptorTable[i].b = 0x00000000
	// kernel code
	GlobalDescriptorTable[1].set_data(0, 0xffffffff, true, 0)
	// kernel data
	GlobalDescriptorTable[2].set_data(0, 0xffffffff, false, 0)
	// user code
	GlobalDescriptorTable[3].set_data(0, 0xffffffff, true, 0)//3)
	// user data
	GlobalDescriptorTable[4].set_data(0, 0xffffffff, false, 0)//3)

	for t in Task
		t.status = TASK_STATUS_UNUSED
		for h in t.handles
			h = nil
		for sm in t.shmem
			sm.s = nil

	CurPid = 0
	//UserMemMask = 0
	RunningPid = 0

	KernelTask = AddTask("kernel", nil, true, nil)
	IdleTask = AddTask("idle", &idle_func, true, KernelTask)
	
	// GDT laden
	__temp_i__ = sizeof(GlobalDescriptorTable) - 1
	__temp_p__ = &GlobalDescriptorTable
	asm{
		jmp _after_gdt_data
		_gdtr:
		dw 0x0000
		_gdtr_base:
		dd 0x00000000
		_after_gdt_data:
		mov eax, __temp_i__
		mov [_gdtr], eax
		mov eax, __temp_p__
		mov [_gdtr_base], eax
		lgdt [_gdtr]
	}

	//prints("\n  setze Kernel-Task-Register")
	__temp_i__ = KernelTask.desc * 8
	asm{
		mov eax, __temp_i__ // Descriptor[n]
		ltr ax
	}
	// markiert das aktuelle TSS als "busy"!

	if VerbosityLevel >= 1
		prints("   ok\n")

/*int sys_getpid()
	asm{
		xor, eax, eax
		str ax
		mov __temp_i__, eax
	}
	int pid = (__temp_i__ >> 3) - NUM_PRE_GDT_ENTRIES*/

			

