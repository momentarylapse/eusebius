#define __OS__
use "base.kaba"
use "text_mode.kaba"
use "filesystem.kaba"
use "paging.kaba"
#define __STRING_CONST_AS_CSTRING__




//--------------------------------------------------------------
// Gerätedateien

FileOperations dev_zero_ops
int dev_zero_open(FileEntry *f)
	return 0
int dev_zero_close(FileEntry *f)
	return 0
int dev_zero_read(FileEntry *f, PageDirectory *page_dir, int addr, int size)
	int zero = 0
	for i in 0:size
		page_dir.memcpy2task(addr + i, &zero, 1)
	return size
int dev_zero_write(FileEntry *f, PageDirectory *page_dir, int addr, int size)
	return 0

FileOperations dev_null_ops
int dev_null_open(FileEntry *f)
	return 0
int dev_null_close(FileEntry *f)
	return 0
int dev_null_read(FileEntry *f, PageDirectory *page_dir, int addr, int size)
	return 0
int dev_null_write(FileEntry *f, PageDirectory *page_dir, int addr, int size)
	return size

FileOperations dev_rand_ops
int dev_rand_state
int dev_rand_open(FileEntry *f)
	return 0
int dev_rand_close(FileEntry *f)
	return 0
int dev_rand_read(FileEntry *f, PageDirectory *page_dir, int addr, int size)
	for i in 0:size
		dev_rand_state = (dev_rand_state * 23434 + 82374) % 8623
		page_dir.memcpy2task(addr + i, &dev_rand_state, 1)
	return size
int dev_rand_write(FileEntry *f, PageDirectory *page_dir, int addr, int size)
	return 0


FileOperations dev_key_ops
cstring dev_key_buf
int dev_key_num
bool dev_key_escaped
bool dev_key_shift, dev_key_control, dev_key_altgr
int dev_key_open(FileEntry *f)
	return 0
int dev_key_close(FileEntry *f)
	return 0
int dev_key_read(FileEntry *f, PageDirectory *page_dir, int addr, int size)
	if dev_key_num == 0
		return E_WOULD_BLOCK
	if size > dev_key_num
		size = dev_key_num
	page_dir.memcpy2task(addr, &dev_key_buf, size)
	dev_key_num -= size
	memcpy(&dev_key_buf, &dev_key_buf[size], dev_key_num)
	return size
int dev_key_write(FileEntry *f, PageDirectory *page_dir, int addr, int size)
	return 0

FileOperations dev_tty_ops
cstring dev_tty_key_buf
int dev_tty_key_num
int dev_tty_open(FileEntry *f)
	return 0
int dev_tty_close(FileEntry *f)
	return 0
int dev_tty_read(FileEntry *f, PageDirectory *page_dir, int addr, int size)
	if dev_tty_key_num == 0
		return E_WOULD_BLOCK
	if size > dev_tty_key_num
		size = dev_tty_key_num
	page_dir.memcpy2task(addr, &dev_tty_key_buf, size)
	dev_tty_key_num -= size
	memcpy(&dev_tty_key_buf, &dev_tty_key_buf[size], dev_key_num)
	return size
int dev_tty_write(FileEntry *f, PageDirectory *page_dir, int addr, int size)
	for i in 0:size
		cstring *buf = _i2p(page_dir.addr2kernel(addr + i))
		prints_low(buf, 1)
	return size

void InitDrivers()
	dev_key_escaped = false
	dev_key_shift = false
	dev_key_control = false
	dev_key_altgr = false
	dev_tty_key_num = 0
	
	//FileEntry *dev = FileSystem.add("dev", FILE_TYPE_DIR, nil, FileSystem.root)
	FileEntry *dev = FileSystem.get("/dev", FileSystem.root)
	
	FileEntry *dev_zero = FileSystem.add("zero", FILE_TYPE_CHAR, nil, dev)
	dev_zero_ops._open = &dev_zero_open
	dev_zero_ops._close = &dev_zero_close
	dev_zero_ops._read = &dev_zero_read
	dev_zero_ops._write = &dev_zero_write
	dev_zero.op = &dev_zero_ops
	
	FileEntry *dev_null = FileSystem.add("null", FILE_TYPE_CHAR, nil, dev)
	dev_null_ops._open = &dev_null_open
	dev_null_ops._close = &dev_null_close
	dev_null_ops._read = &dev_null_read
	dev_null_ops._write = &dev_null_write
	dev_null.op = &dev_null_ops
	
	dev_rand_state = 13
	
	FileEntry *dev_rand = FileSystem.add("random", FILE_TYPE_CHAR, nil, dev)
	dev_rand_ops._open = &dev_rand_open
	dev_rand_ops._close = &dev_rand_close
	dev_rand_ops._read = &dev_rand_read
	dev_rand_ops._write = &dev_rand_write
	dev_rand.op = &dev_rand_ops
	
	dev_key_num = 0
	
	FileEntry *dev_key = FileSystem.add("keyboard", FILE_TYPE_CHAR, nil, dev)
	dev_key_ops._open = &dev_key_open
	dev_key_ops._close = &dev_key_close
	dev_key_ops._read = &dev_key_read
	dev_key_ops._write = &dev_key_write
	dev_key.op = &dev_key_ops
	
	FileEntry *dev_tty = FileSystem.add("tty", FILE_TYPE_CHAR, nil, dev)
	dev_tty_ops._open = &dev_tty_open
	dev_tty_ops._close = &dev_tty_close
	dev_tty_ops._read = &dev_tty_read
	dev_tty_ops._write = &dev_tty_write
	dev_tty.op = &dev_tty_ops
	
	

	// Maus aktivieren
	//   AUX aktivieren
	outportb(064,0xa8)
	//   Maus zum Sprechen bringen
	outportb(064,0xd4) // an Maus senden (AUX)
	outportb(060,0xff) // Reset
	outportb(060,0xf4) // EnableReporting
	

int getchar(int k)
	if dev_key_control
		if k == 0x2e // 'C'
			return 0x03
		if k == 0x20 // 'D'
			return 0x04
		if k == 0x15 // 'Z'
			return 0x1a
		return -1
	if k == 0x1c
		return 0x0a // '\n'
	if k == 0x39
		return 0x20 // ' '
	if k == 0x0e
		return 0x7f // BACKSPACE
	if k == 0xe048
		return 0x1b5b41 // ^[A up
	if k == 0xe050
		return 0x1b5b42 // ^[B down
	if k == 0xe04b
		return 0x1b5b43 // ^[C left
	if k == 0xe04d
		return 0x1b5b44 // ^[D right
	if dev_key_altgr
		if k == 0x1b
			return 0x7e // '~'
		if k == 0x56
			return 0x7c // '|'
		if k == 0x08
			return 0x7b // '{'
		if k == 0x09
			return 0x5b // '['
		if k == 0x0a
			return 0x5d // ']'
		if k == 0x0b
			return 0x7d // '}'
		if k == 0x10
			return 0x40 // '@'
		if k == 0x0c
			return 0x5c // '\'
	else if dev_key_shift
		if k == 0x0b
			return 0x3d // '='
		if k == 0x02
			return 0x21 // '!'
		if k == 0x03
			return 0x22 // '"'
		//if k == 0x04
		//	return 0x00 // '§'
		if k == 0x05
			return 0x24 // '$'
		if k == 0x06
			return 0x25 // '%'
		if k == 0x07
			return 0x26 // '&'
		if k == 0x08
			return 0x2f // '/'
		if k == 0x09
			return 0x28 // '('
		if k == 0x0a
			return 0x29 // ')'
		if k == 0x35
			return 0x5f // '_'
		if k == 0x34
			return 0x3a // ':'
		if k == 0x33
			return 0x3b // ';'
		if k == 0x56
			return 0x3e // '>'
		if k == 0x2b
			return 0x27 // '''
		if k == 0x1b
			return 0x2a // '*'
		//if k == 0x29
		//	return 0x // '°'
		if k == 0x0c
			return 0x3f // '?'
		if k == 0x0d
			return 0x60 // '`'
			
		if k == 0x1e
			return 0x41 // 'A'
		if k == 0x30
			return 0x42
		if k == 0x2e
			return 0x43
		if k == 0x20
			return 0x44
		if k == 0x12
			return 0x45
		if k == 0x21
			return 0x46
		if k == 0x22
			return 0x47 // 'G'
		if k == 0x23
			return 0x48
		if k == 0x17
			return 0x49
		if k == 0x24
			return 0x4a
		if k == 0x25
			return 0x4b
		if k == 0x26
			return 0x4c
		if k == 0x32
			return 0x4d // 'M'
		if k == 0x31
			return 0x4e
		if k == 0x18
			return 0x4f
		if k == 0x19
			return 0x50
		if k == 0x10
			return 0x51
		if k == 0x13
			return 0x52 // 'R'
		if k == 0x1f
			return 0x53
		if k == 0x14
			return 0x54
		if k == 0x16
			return 0x55
		if k == 0x2f
			return 0x56
		if k == 0x11
			return 0x57
		if k == 0x2d
			return 0x58 // 'X'
		if k == 0x2c
			return 0x59
		if k == 0x15
			return 0x5a
	else
		if k == 0x0b
			return 0x30 // '0'
		if k == 0x02
			return 0x31
		if k == 0x03
			return 0x32
		if k == 0x04
			return 0x33
		if k == 0x05
			return 0x34
		if k == 0x06
			return 0x35
		if k == 0x07
			return 0x36
		if k == 0x08
			return 0x37
		if k == 0x09
			return 0x38
		if k == 0x0a
			return 0x39
		if k == 0x35
			return 0x2d // '-'
		if k == 0x34
			return 0x2e // '.'
		if k == 0x33
			return 0x2c // ','
		if k == 0x56
			return 0x3c // '<'
		if k == 0x2b
			return 0x23 // '#'
		if k == 0x1b
			return 0x2b // '+'
		if k == 0x29
			return 0x5e // '^'
		//if k == 0x0c
		//	return ... // 'ß'
		//if k == 0x0d
		//	return ... // '´'
			
		if k == 0x1e
			return 0x61 // 'a'
		if k == 0x30
			return 0x62
		if k == 0x2e
			return 0x63
		if k == 0x20
			return 0x64
		if k == 0x12
			return 0x65
		if k == 0x21
			return 0x66
		if k == 0x22
			return 0x67 // 'g'
		if k == 0x23
			return 0x68
		if k == 0x17
			return 0x69
		if k == 0x24
			return 0x6a
		if k == 0x25
			return 0x6b
		if k == 0x26
			return 0x6c
		if k == 0x32
			return 0x6d // 'm'
		if k == 0x31
			return 0x6e
		if k == 0x18
			return 0x6f
		if k == 0x19
			return 0x70
		if k == 0x10
			return 0x71
		if k == 0x13
			return 0x72 // 'r'
		if k == 0x1f
			return 0x73
		if k == 0x14
			return 0x74
		if k == 0x16
			return 0x75
		if k == 0x2f
			return 0x76
		if k == 0x11
			return 0x77
		if k == 0x2d
			return 0x78 // 'x'
		if k == 0x2c
			return 0x79
		if k == 0x15
			return 0x7a
	return -1

void int_key()
	while true
		int k = inportb(0x60)
		/*prints("<IRQ ")
		printi(k)
		prints(">")*/
		
		// add to low level device buffer
		if dev_key_num < 64
			dev_key_buf[dev_key_num] = k
			dev_key_num ++
		
		if k == 0xe0
			dev_key_escaped = true
		else
			if dev_key_escaped
				k += 0xe000
			dev_key_escaped = false
		
			if (k & 0x80) > 0
				if k == 0xaa or k == 0xb6
					dev_key_shift = false
				if k == 0x9d or k == 0xe09d
					dev_key_control = false
				if k == 0xe0b8
					dev_key_altgr = false
			if k == 0x2a or k == 0x36
				dev_key_shift = true
			if k == 0x1d or k == 0xe01d
				dev_key_control = true
			if k == 0xe038
				dev_key_altgr = true
	
			k = getchar(k)
			if k >= 0 and dev_tty_key_num < 64
				if (k & 0xffffff00) == 0
					dev_tty_key_buf[dev_tty_key_num] = k
					dev_tty_key_num ++
				else if (k & 0xffff0000) == 0
					dev_tty_key_buf[dev_tty_key_num] = k >> 8
					dev_tty_key_buf[dev_tty_key_num + 1] = k
					dev_tty_key_num += 2
				else
					dev_tty_key_buf[dev_tty_key_num] = k >> 16
					dev_tty_key_buf[dev_tty_key_num + 1] = k >> 8
					dev_tty_key_buf[dev_tty_key_num + 2] = k
					dev_tty_key_num += 3
					
		// allow more IRQs
		outportb(0x20, 0x20)
			
		asm{
			iret
		}

void try_read_mouse()
	nil

void int_mouse()
	while true
		//int k = inportb(0x60)
		prints("<IRQ mouse>")
		
		try_read_mouse()
		
					
		// allow more IRQs
		outportb(0xa0, 0x20)
		outportb(0x20, 0x20)
			
		asm{
			iret
		}


