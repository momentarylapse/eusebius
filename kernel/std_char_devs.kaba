#define __OS__
use "base.kaba"
use "text_mode.kaba"
use "filesystem.kaba"
#define __STRING_CONST_AS_CSTRING__




//--------------------------------------------------------------
// GerÃ¤tedateien

FileOperations dev_zero_ops
void dev_zero_open(FileEntry *f)
	nil
void dev_zero_close(FileEntry *f)
	nil
int dev_zero_read(FileEntry *f, cstring *buf, int size)
	for int i, 0, size
		buf[i] = 0
	return size
int dev_zero_write(FileEntry *f, cstring *buf, int size)
	return 0

FileOperations dev_null_ops
void dev_null_open(FileEntry *f)
	nil
void dev_null_close(FileEntry *f)
	nil
int dev_null_read(FileEntry *f, cstring *buf, int size)
	return 0
int dev_null_write(FileEntry *f, cstring *buf, int size)
	return size

FileOperations dev_rand_ops
int dev_rand_state
void dev_rand_open(FileEntry *f)
	nil
void dev_rand_close(FileEntry *f)
	nil
int dev_rand_read(FileEntry *f, cstring *buf, int size)
	for int i, 0, size
		dev_rand_state = (dev_rand_state * 23434 + 82374) % 8623
		buf[i] = dev_rand_state
	return size
int dev_rand_write(FileEntry *f, cstring *buf, int size)
	return 0


FileOperations dev_key_ops
cstring dev_key_buf
int dev_key_num
void dev_key_open(FileEntry *f)
	nil
void dev_key_close(FileEntry *f)
	nil
int dev_key_read(FileEntry *f, cstring *buf, int size)
	if size > dev_key_num
		size = dev_key_num
	for int i, 0, size
		buf[i] = dev_key_buf[i]
		dev_key_num --
		memcpy(&dev_key_buf, &dev_key_buf[1], dev_key_num)
	return size
int dev_key_write(FileEntry *f, cstring *buf, int size)
	return 0

FileOperations dev_tty_ops
void dev_tty_open(FileEntry *f)
	nil
void dev_tty_close(FileEntry *f)
	nil
int dev_tty_read(FileEntry *f, cstring *buf, int size)
	return 0
int dev_tty_write(FileEntry *f, cstring *buf, int size)
	prints_low(buf, size)
	return size

void InitDrivers()
	FileEntry *dev = FileSystem.add("dev", FILE_TYPE_DIR, FileSystem.root)
	
	FileEntry *dev_zero = FileSystem.add("zero", FILE_TYPE_CHAR, dev)
	dev_zero_ops._open = &dev_zero_open
	dev_zero_ops._close = &dev_zero_close
	dev_zero_ops._read = &dev_zero_read
	dev_zero_ops._write = &dev_zero_write
	dev_zero.op = &dev_zero_ops
	
	FileEntry *dev_null = FileSystem.add("null", FILE_TYPE_CHAR, dev)
	dev_null_ops._open = &dev_null_open
	dev_null_ops._close = &dev_null_close
	dev_null_ops._read = &dev_null_read
	dev_null_ops._write = &dev_null_write
	dev_null.op = &dev_null_ops
	
	dev_rand_state = 13
	
	FileEntry *dev_rand = FileSystem.add("random", FILE_TYPE_CHAR, dev)
	dev_rand_ops._open = &dev_rand_open
	dev_rand_ops._close = &dev_rand_close
	dev_rand_ops._read = &dev_rand_read
	dev_rand_ops._write = &dev_rand_write
	dev_rand.op = &dev_rand_ops
	
	dev_key_num = 0
	
	FileEntry *dev_key = FileSystem.add("keyboard", FILE_TYPE_CHAR, dev)
	dev_key_ops._open = &dev_key_open
	dev_key_ops._close = &dev_key_close
	dev_key_ops._read = &dev_key_read
	dev_key_ops._write = &dev_key_write
	dev_key.op = &dev_key_ops
	
	FileEntry *dev_tty = FileSystem.add("tty", FILE_TYPE_CHAR, dev)
	dev_tty_ops._open = &dev_tty_open
	dev_tty_ops._close = &dev_tty_close
	dev_tty_ops._read = &dev_tty_read
	dev_tty_ops._write = &dev_tty_write
	dev_tty.op = &dev_tty_ops
	


void int_key()
	while true
		outportb(0x20, 0x20)
		int k = inportb(0x60)
		/*prints("<IRQ ")
		printi(k)
		prints(">")*/
		if dev_key_num < 64
			dev_key_buf[dev_key_num] = k
			dev_key_num ++
		asm{
			iret
		}
