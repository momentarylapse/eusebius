use os

#class BinaryFile extends File
#	func xread(p: void*, size: int) -> int
#		var pp = p as cstring*
#		var r: string = read(size)
#		for i in 0:len(r)
#			pp[i] = r[i]
#		return len(r)

func xread(out f: os.FileStream, p: void*, size: int) -> int
	var pp = p as cstring*
	var r = f.read(size)
	for i in 0:len(r)
		pp[i] = r[i]
	return len(r)

class Word
	c: char[2]
	func __int__() -> int
		let a = int(c[0])
		let b = int(c[1])
		return a + b * 256

class Inode
	rights: Word
	user: Word
	size: int
	atime, ctime, mtime, dtime: int
	group: Word
	hard_links: Word
	blocks: int
	flags: int
	version: int
	iblock: int[15]
	file_version: int
	acl: int
	size_high: int
	dummy: int
	xx_high: int[3]
	func isDir() -> bool
		return (int(rights) & 0xf000) == 0x4000
	func isFile() -> bool
		return (int(rights) & 0xf000) == 0x8000

class DirEntryHeader
	inode: int
	rec_len: Word
	name_len: char
	file_type: char

class SuperBlock
	inodes_count: int
	blocks_count: int
	reserved_blocks_count: int
	free_blocks_count: int
	free_inodes_count: int
	first_data_block: int
	log_block_size: int
	log_cluster_size: int
	blocks_per_group: int
	obso_frags_per_group: int
	inodes_per_group: int
	mtime, wtime: int
	mnt_count, max_mnt_count: Word
	magic: Word
	state: Word
	errors: Word
	minor_rev_level: Word
	lastcheck, checkinterval: int
	creator_os: int
	rev_level: int
	def_resuid, def_resgid: Word
	first_ino: int
	inode_size: Word
	block_group_nr: Word
	feature_compat, feature_incompat, feature_ro_compat: int
	uuid: int[16]
	volume_name: int[16]
	last_mounted: int[64]
	_filler_: int[1024-200]

class BlockGroupDescriptor
	block_bitmap: int
	inode_bitmap: int
	inode_table: int
	free_blocks_count, free_inodes_count: Word
	used_dirs_count: Word
	flags: Word
	exclude_bitmap: int
	block_bitmap_csum, inode_bitmap_csum: Word
	itable_unused: Word
	checksum: Word


class Ext2Reader
	f: FileStream*
	block_size: int
	inodes_per_block: int
	sb: SuperBlock
	bg: BlockGroupDescriptor
	readable, writable: bool
	
	filter: string[]
	show_details: bool
	
	func mut testCompatibility()
		readable = false
		writable = false
		if (sb.feature_incompat & 0xfffffffd) > 0
			print("---- not readable ----")
			print(sb.feature_incompat)
			return
		readable = true
		if (sb.feature_ro_compat & 0xfffffffe) > 0
			print("---- read only ----")
			print(sb.feature_ro_compat)
			return
		writable = true
	
	func mut read(filename: string)
		f = fs.open(filename, "rb")
		if !f
			return
	
		# super block (always at offset 1024!)
		f.seek(1024)
		xread(f, &sb, sizeof(SuperBlock))
		print(as_binary(&sb, 16).hex())
		block_size = 1 << (sb.log_block_size + 10)
		inodes_per_block = block_size / int(sb.inode_size) #128
		
		# block grp (1k:        0x0800)  (2k:       0x0800)  (4k:       0x1000)
		# block bmp (1k: #18 -> 0x4800)  (2k: #5 -> 0x2800)  (4k: #2 -> 0x2000)
		# inode bmp (1k: #19 -> 0x4c00)  (2k: #6 -> 0x3000)  (4k: #3 -> 0x3000)
		# inode tab (1k: #20 -> 0x5000)  (2k: #7 -> 0x3800)  (4k: #4 -> 0x4000)
		
		# inode /      (1k: #2   0x5100)
		# block /      (1k: #84  0x15000)
		# inode /bin/  (1k: #12  0x5600???)   hmmm, no??? ...0x5b00 instead???
		# block /bin/  (1k: #98? 0x18800)
		# inode /bin/abcd (1k: #13) # 0x5c00
		# block /bin/abcd (1k: #99? 0x18c00)
		
	
		# block group descriptor (block #2)
		#f.set_pos(1024 + block_size)
		f.set_pos(max(block_size, 2048))
		xread(f, &bg, sizeof(BlockGroupDescriptor))
		print(as_binary(&bg, 16).hex())
		
		if show_details
			showMetaData()
		testCompatibility()
		if readable
			if len(filter) == 0
				print("Root:")
			show_inode_recursive(2, 0)
		
		del f
	
	func block_to_offset(index: int) -> int
		return block_size * (index)
	
	func mut read_block(index: int) -> string
		#print("R block={{index}}  pos=0x{{block_size*index|x}}")
		f.set_pos(block_size * index) ## (index - 1) ????
		return f.read(block_size)
	
	func mut read_inode(index: int, inode: Inode)
		# index-1  ???
		#print("inode={{index}}")
		let group_no = (index-1) / sb.inodes_per_group # 0...
		let offset = ((index-1) % sb.inodes_per_group) * int(sb.inode_size)#sizeof(Inode)
		# group_no!!!!!!!!!!!!!!
		var pos = 0 #group_no * sb.blocks_per_group * block_size
		# get correct group...
		pos += bg.inode_table * block_size
		pos += offset
		#print(" pos={{pos}}")
		
		#print("0x{{block_to_offset(bg.inode_table) + (index - 1) * sizeof(Inode)|x}}")
		
		f.set_pos(pos)
		xread(f, &inode, sizeof(Inode))
		#print("R inode={{index}}  pos=0x{{pos|x}}  ->  size={{inode.size}}")
	
	func mut read_inode_contents(inode: Inode) -> string
		var r: string
		let num_blocks = (inode.size-1) / block_size + 1
		let num_direct = min(num_blocks, 12)
		for i in 0:num_direct
			r += read_block(inode.iblock[i])
		# indirect...
		
		r.resize(inode.size)
		return r
	
	func mut show_inode_recursive(index: int, level: int)
		var inode: Inode
		read_inode(index, inode)
		#print(as_binary(&inode, 16).hex())
		let indent = "  ".repeat(level*2+1)
		var info = "s={{inode.size|-5}}"
		#print inode.mtime
		if inode.isDir()
			info += "  dir"
		else if inode.isFile()
			info += "  file"
		else
			info += "  ???(0x{{int(inode.rights)|04x}})"
		info += "  i={{index}}"
		if show_details
			info += "  b[0]={{inode.iblock[0]}}"
		print(indent + info)
		
		if inode.isDir()
			let cont = read_inode_contents(inode)
			#print(cont[:24].hex())
			var p = 0
			while p < len(cont)
				var d = &cont[p] as DirEntryHeader*
				if int(d.rec_len) == 0
					break
				let name = cont[p + 8: p + 8 + int(d.name_len)]
				info = "  {{name|-12}}"
				#print "--"+name
				info += "  i={{d.inode|-4}}"
				let ft = d.file_type
				if ft == 2
					info += "  dir"
				else if ft == 1
					info += "  file"
				else
					info += "  ???({{ft}})"
				p += int(d.rec_len)
				if len(name) == 0 or d.inode == 0
					continue
				if len(filter) > 0
					if filter[level] != name
						continue
				print(indent + info)
				
				
				if not (name in [".", ".."])
				#	if ft == 2 or ft == 1
						show_inode_recursive(d.inode, level+1)
			
			#print(cont.substr(0, 32).hex(false))
	
	func showMetaData()
		print("block size: {{block_size}}")
		print("inodes per block: {{block_size/int(sb.inode_size)}}")
		print("--------")
		print("inode count: {{sb.inodes_count}}")
		print("block count: {{sb.blocks_count}}")
		print("log block size: {{sb.log_block_size}}")
		print("first data block: {{sb.first_data_block}}")
		print("blocks per group: {{sb.blocks_per_group}}")
		print("inodes per group: {{sb.inodes_per_group}}")
		print("first ino: {{sb.first_ino}}")
		print("inode size: {{int(sb.inode_size)}}")
		print("--------")
		print("block bmp: {{bg.block_bitmap}}")
		print("inode bmp: {{bg.inode_bitmap}}")
		print("inode table: {{bg.inode_table}}")

func main(arg: string[])
	var filename: string
	var r: Ext2Reader
	r.show_details = false
	for i in 0:len(arg)
		if arg[i] == "-v"
			r.show_details = true
		else if arg[i] == "--filter"
			i ++
			r.filter = arg[i].explode("/")
		else
			filename = arg[i]
	r.read(filename)
