use os
use hui

# https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6hmtx.html

string hex(void* _p, int size)
	char[0]* p = _p
	string s
	for i in 0:size
		s.add(p[i])
	return s.hex()
string i2h(int i)
	return hex(&i, 4)

class BEUShort
	char[2] c
	int __int__()
		int a = c[0]
		int b = c[1]
		return (a << 8) + b
class BESShort
	char[2] c
	int __int__()
		int a = c[0]
		int b = c[1]
		int r = (a << 8) + b
		if (r & 0x8000) != 0
			r -= 1<<16
		return r
class BELong
	char[4] x
	int __int__()
		int a = x[0]
		int b = x[1]
		int c = x[2]
		int d = x[3]
		return (a << 24) + (b << 16) + (c << 8) + d

class Fixed
	BEUShort a, b

class F214
	BESShort t
	float __float__()
		return int(t) / 16384.0

void read(out File *f, void* _p, int size)
	char[0]* p = _p
	string s = f.read(size)
	for i in 0:size
		p[i] = s[i]

string single_utf8(int code)
	string s
	if (code & 0xffffff80) == 0
		s.add(code)
	else if (code & 0xfffff800) == 0
		s.add(0xc0 + (code >> 6))
		s.add(0x80 + (code & 0x3f))
	return s

string utf32_to_utf8(int[] codes)
	string s
	for c in codes
		s += single_utf8(c)
	return s

class TTFTableDirectory
	Fixed version
	BEUShort num_tables
	BEUShort seach_range
	BEUShort entry_selector
	BEUShort range_shift

class TTFTableDirectoryEntry
	BELong tag, chksum, offset, length
	string name()
		string s
		s.add(tag.x[0])
		s.add(tag.x[1])
		s.add(tag.x[2])
		s.add(tag.x[3])
		return s

class TTFMapHeader
	BEUShort version, num_tables

class TTFMapTable
	int platform, encoding
	int offset
	int format
	
	# format 4
	int[] end_code
	int[] start_code
	int[] id_delta
	int[] id_range_offset
	
	# format 6
	int first_code
	int[] glyph_id_array
	
	int map(int code)
		if format == 4
			for i in 0:len(end_code)
				if code >= start_code[i] and code <= end_code[i]
					return (code + id_delta[i]) & 0x0000ffff
			return -1
		if format == 6
			if code < first_code or code >= (first_code + len(glyph_id_array))
				return -1
			return glyph_id_array[code - first_code]
		return -1

class TTFHeader
	Fixed version
	Fixed revision
	BELong chksm
	BELong magic
	BEUShort flags
	BEUShort units_per_em
	# more


class TTFContour
	string flags
	complex[] p
	

class TTFGlyph
	int code
	int xmin, ymin, xmax, ymax
	TTFContour[] contours
	int[] codes
	float lsb, width

class TTF
	TTFTableDirectory td
	TTFTableDirectoryEntry[] tdentries
	TTFHeader head
	
	TTFMapHeader mh
	TTFMapTable[] map_tables
	TTFGlyph[] glyphs
	
	int[] lsb
	int[] advance
	
	File *f
	
	int readL()
		BELong t
		read(f, &t, 4)
		return int(t)

	int readUS()
		BEUShort t
		read(f, &t, 2)
		return int(t)

	int readSS()
		BESShort t
		read(f, &t, 2)
		return int(t)

	int readUB()
		int t = 0
		read(f, &t, 1)
		return t

	float readF214()
		F214 t
		read(f, &t, 2)
		return float(t)
	
	bool read_table_directory()
	
		read(f, &td, 12)
		int n = int(td.num_tables)
		if n > 1000
			return false
		for i in 0:n
			TTFTableDirectoryEntry e
			read(f, &e, 16)
			tdentries.add(e)
	
		for ee in tdentries
			print("{{ee.name()}} {{int(ee.offset)}}")
		return true
	
	bool read_head()
		var te = get_table("head")
		if !te
			print("no head table")
			return false
		f.set_pos(int(te.offset))
		print("head-----------------------------")
		
		read(f, &head, 32)
		print(int(head.units_per_em))
		
		return true
	
	bool try_read_hhead()
		var te = get_table("hhea")
		if !te
			return false
		f.set_pos(int(te.offset))
		print("hhead-----------------------------")
		
		f.seek(34)
		int n = readUS()
		print(n)
		lsb.resize(n)
		advance.resize(n)
		
		return true
		
	bool try_read_hmetrix()
		var te = get_table("hmtx")
		if !te
			return false
		f.set_pos(int(te.offset))
		print("hmetrix-----------------------------")
		for i in 0:len(lsb)
			advance[i] = readUS()
			lsb[i] = readSS()
		
		return true
	
	bool read_mapping()
		var te = get_table("cmap")
		if !te
			print("no cmap table")
			return false
		f.set_pos(int(te.offset))
		
		read(f, &mh, 4)
		int n = int(mh.num_tables)
		print("map-----------------------------")
		print(i2h(f.get_pos()))
		#print mh.version.int()
		#print n
		if n > 100000
			print("too many mapping tables")
			return false
			
		for i in 0:n
			TTFMapTable t
			t.platform = readUS()
			t.encoding = readUS()
			t.offset = readL()
			map_tables.add(t)
		
		for m in map_tables
			print("--------------")
			print(m.offset)
			print(m.platform)
			print(m.encoding)
			f.set_pos(int(te.offset) + m.offset)
			m.format = readUS()
			
			if m.format == 0
				int length = readUS()
				print("l {{length}}")
				int version = readUS()
				for i in 0:256
					m.glyph_id_array.add(readUB())
				#print m.glyph_id_array
			else if m.format == 4
				int length = readUS()
				print("l {{length}}")
				int version = readUS()
				int seg_count = readUS() / 2
				print("s {{seg_count}}")
				int search_range = readUS()
				int entry_selector = readUS()
				int range_shift = readUS()
				for i in 0:seg_count
					m.end_code.add(readUS())
				readUS()
				for i in 0:seg_count
					m.start_code.add(readUS())
				for i in 0:seg_count
					m.id_delta.add(readUS())
				for i in 0:seg_count
					m.id_range_offset.add(readUS())
				int rs = seg_count * 8 + 16
				print("r: {{length - rs}}")
				int na = (length - rs) / 2
				for i in 0:na
					m.glyph_id_array.add(readUS())
				
				#print start_count
#				print end_count
#				print id_delta
#				print id_range_offset
#				for i in 0:seg_count
#					print "--"
#					print start_count[i]
#					print end_count[i]
#					print id_delta[i]
#					print id_range_offset[i]
				
				#for i in 0:seg_count
#					if m.id_range_offset[i] != 0
#						print("id_range_offset != 0")
#						
#						print(m.id_range_offset)
#						return false
					
				#int length = readUS(f)
				#int length = readUS(f)
				
				#return false
			else if m.format == 6
				int length = readUS()
				print("l {{length}}")
				int version = readUS()
				m.first_code = readUS()
				int entry_count = readUS()
				for i in 0:entry_count
					m.glyph_id_array.add(readUS())
				#print m.glyph_id_array
			
			else if m.format == 12
				readUS() # "padding"
				int length = readL()
				print("l {{length}}")
				int version = readL()
				
				int group_count = readL() / 2
				print("s {{group_count}}")
				
				for i in 0:group_count
					int start_code = readL()
					m.start_code.add(start_code)
					m.end_code.add(readL())
					m.id_delta.add(readL() - start_code)
					
			else
				print("unhandled format: {{m.format}}")
				return false
				
				
		return true
	
	bool read_glyph(out TTFGlyph g)
		print("glyph---------------------------------")
		print(i2h(f.get_pos()))
		int num_contours = readSS()
		print(num_contours)
		if num_contours == 0
			#print("--empty")
			return true
		if num_contours > 200
			print("too many contours: {{num_contours}}")
			return false
		
		g.code = -1
		g.xmin = readSS()
		g.ymin = readSS()
		g.xmax = readSS()
		g.ymax = readSS()
		#print "" + g.xmin + ":" + g.xmax
		#print "" + g.ymin + ":" + g.ymax
		
		if num_contours < 0
			return read_glyph_compound(g)
		return read_glyph_simple(g, num_contours)
	
	bool read_glyph_compound(TTFGlyph g)
		#print("---compound")
		int n = 0
		int flags = 0
		
		while true
			#print "C"
			flags = readUS()
			int glyph_index = readUS()
			#print glyph_index
		
			if (flags & 0x0001) != 0
				int arg1 = readSS()
				int arg2 = readSS()
			else
				int arg1 = readUB()
				int arg2 = readUB()
		
			if (flags & 0x0008) != 0
				float scale = readF214()
			else if (flags & 0x0040) != 0
				float xscale = readF214()
				float yscale = readF214()
			else if (flags & 0x0080) != 0
				float xxscale = readF214()
				float xyscale = readF214()
				float yxscale = readF214()
				float yyscale = readF214()
			
			if (flags & 0x0020) == 0
				break
			n ++
			if n > 50
				print("too many sub glyphs: {{n}}")
				return false
		
		if (flags & 0x0100) != 0
			int instrlen = readUS()
			if instrlen > 10000
				print("too many instructions: {{instrlen}}")
				return false
			f.read(instrlen)
			
		return true
	
	bool read_glyph_simple(out TTFGlyph g, int num_contours)
		#print("simple")
		
		# endpoints
		int[] endpoints
		for i in 0:num_contours
			endpoints.add(readUS())
		
		for e in endpoints
			#print "e " + e
			if e > 1000
				print("invalid endpoint: {{e}}")
				return false
		
		# instructions???
		int instrlen = readUS()
		if instrlen > 10000
			print("too many instructions: {{instrlen}}")
			return false
		#print "instr: " + instrlen
		f.read(instrlen) # instr
		
		if num_contours > 0
			int num_points = endpoints[len(endpoints)-1] + 1
			#print "points: " + num_points
		
			# flags
			string flags = read_contour_flags(num_points)
			#print flags.hex(false)
		
			#print i2h(f.getPos())
			float[] x = read_contour_coords(num_points, flags, 0x02, 0x10)
			float[] y = read_contour_coords(num_points, flags, 0x04, 0x20)
			#print x
			#print y
			
			int i0 = 0
			for e,ci in endpoints
				TTFContour c
				int i1 = e + 1
				for i in i0:i1
					c.flags.add(flags[i])
					c.p.add(complex(x[i], y[i]))
				i0 = i1
				g.contours.add(c)
				c.__delete__() # TODO repair kaba :P
				c.__init__()
		
		#print i2h(f.getPos())
		
		# 4byte alignment
		int n = f.get_pos()
		if (n & 3) != 0
			f.read(4 - (n & 3))
		return true
	
	string read_contour_flags(int n)
		string flags
		flags.resize(n)
		
		for i in 0:n
			#print i
			int c = readUB()
			flags[i] = c
			
			if (c & 0x08) != 0x00
				int cn = readUB()
				#print "repeat " + cn
				for j in 0:cn
					flags[i+j+1] = c
				i += cn
		
		return flags
	
	float[] read_contour_coords(int n, string flags, int mask_short, int mask_same)
		float[] x
		x.resize(n)
		float cur = 0
		for i in 0:n
			int ff = flags[i]
			
			bool is_same = (ff & mask_same) != 0
			bool is_short = (ff & mask_short) != 0
			if is_same and !is_short
				nil#print "rep"
			else
				int t = 0
				if is_short
					#print "1b"
					t = readUB()
					if !is_same
						t = -t
				else
					#print "2b"
					t = readSS()
				cur += t
			x[i] = cur
					
		return x
	
	bool read_glyphs()
		var te = get_table("glyf")
		if !te
			print("no glyf table")
			return false
		f.set_pos(int(te.offset))
		int _max = int(te.offset) + int(te.length) - 32
		
		TTFGlyph gg
		glyphs.add(gg)
		glyphs.add(gg)
		glyphs.add(gg)
		
		while f.get_pos() < _max
			TTFGlyph g
			if !read_glyph(g)
				return false
			glyphs.add(g)
		print("Glyphs: {{len(glyphs)}}")
		#for gg in glyphs
#			print "---- " + gg.contours.num
#			for c in gg.contours
#				print c.flags.hex(false)
#				string s = ""
#				for z in c.p
#					s += "" + z + ", "
#				print "[" + s + "]"
			
		
		return true
	
	bool load(string filename)

		f = os.Filesystem.open(filename)
		if !f
			return false
		
		if !read_table_directory()
			return false
		if !read_head()
			return false
		if !read_mapping()
			return false
		if try_read_hhead()
			try_read_hmetrix()
		if !read_glyphs()
			return false
			
		update_codes()
		update_size()
	
		del f
		return true
		
	TTFTableDirectoryEntry* get_table(string tag)
		for ee in tdentries
			if tag == ee.name()
				return &ee
		return nil
	
	int map(int code)
		for m in map_tables
			int n = m.map(code)
			if n >= len(glyphs)
				print("mapping error: {{code}} => {{n}}")
				return -1
			if n >= 0
				return n
		return -1
	
	TTFGlyph* get(int code)
		print("get {{code}}")
		int n = map(code)
		print(n)
		if n < 0
			return &glyphs[0]
		return &glyphs[n]
	
	void map_code(int index, int code)
		if index < len(glyphs)
			glyphs[index].code = code
			if code in glyphs[index].codes
				glyphs[index].codes.add(code)
			print("E: {{index}} => {{code}}")
	
	void update_codes()
	
		for m in map_tables
			if m.format == 6
				print("----------------------- 666")
				for n,i in m.glyph_id_array
					map_code(n, m.first_code + i)
			else if m.format == 4
				print("----------------------- 444")
				print(len(m.end_code))
				for i in 0:len(m.end_code)
					print("----")
					print(m.start_code[i])
					print(m.end_code[i])
					print(m.id_delta[i])
					for code in m.start_code[i]:(m.end_code[i]+1)
						int n
						if m.id_range_offset[i] == 0
							n = (code + m.id_delta[i]) & 0x0000ffff
						else
							int index = (code - m.start_code[i]) + m.id_range_offset[i]/2 - (len(m.id_range_offset) - i)
							n = m.glyph_id_array[index]
						map_code(n, code)
			else if m.format == 12
				print("----------------------- 12 12 12")
				print(len(m.end_code))
				for i in 0:len(m.end_code)
					print("----")
					print(m.start_code[i])
					print(m.end_code[i])
					print(m.id_delta[i])
					for code in m.start_code[i]:(m.end_code[i]+1)
						map_code(code + m.id_delta[i], code)
			else
				print("---------------- UNHANDLED {{m.format}}")
	
	void update_size()
		float scale = 1.0 / int(head.units_per_em)
		float w = 0
		for g,i in glyphs
			g.lsb = 0
			g.width = g.xmax - g.xmin
			if i < len(lsb)
				g.lsb = lsb[i]
				g.width = advance[i]
				w = g.width
			else if len(lsb) > 0
				g.width = w
			
	
	
	void export(string filename)
	
		File *f = os.Filesystem.create(filename)
		
		int num_glyphs = 0
		for g in glyphs
			num_glyphs += len(g.codes)
		
		f << num_glyphs
		int num_p = 0
		float scale = 1.0 / int(head.units_per_em)
		for g in glyphs
			for code in g.codes
				f << code
				f << g.width * scale
				f << 0.0
				f << len(g.contours)
				for c in g.contours
					f << num_p
					f << len(c.p)
					num_p += len(c.p)
		f << num_p
		int xx = 0
		complex[] pp
		for g in glyphs
			for code in g.codes
				for c in g.contours
					for p in c.p
						pp.add(p)
						f << (p.x - g.xmin + g.lsb) * scale
						f << p.y * scale
						xx ++
		for g in glyphs
			for c in g.contours
				if len(c.flags) > 0
					if (c.flags[0] & 1) == 0
						print("-----[0] not on curve!")
				for x in c.flags
					f << ((x & 1) != 0)
		
		
		del f

class FontWindow extends Window
	float scale
	int index
	void __init__()
		super.__init__("test", 500, 500)
		add_drawing_area("!grabfocus", 0, 0, "area")
		index = 0
		float font_size = 500.0
		scale = font_size / int(font.head.units_per_em)
	
	override void on_key_down()
		if hui.get_event().key == hui.KEY_LEFT
			index --
		if hui.get_event().key == hui.KEY_RIGHT
			index ++
		index = loop(index, 0, len(font.glyphs))
		redraw("area")
	
	float xx(float x)
		return 100 + x*scale
	
	float yy(float y)
		return 400 -y*scale
	
	override void on_draw(Painter p)
		#Painter *p = beginDraw("area")
		float w = p.width
		float h = p.height
		var g = &font.glyphs[index]
		
		p.set_color(color.WHITE)
		p.draw_rect(rect(0, w, 0, h))
		
		p.set_color(color(1, 0.9, 0.9, 0.9))
		p.draw_rect(rect(xx(g.xmin - g.lsb), xx(g.xmin - g.lsb + g.width), 0, h))
		#p.draw_rect(rect(xx(g.lsb), xx(g.lsb + g.width), 0, h))
		
		p.set_color(color(1, 0.7, 0.7, 0.7))
		p.draw_rect(rect(xx(g.xmin), xx(g.xmax), yy(g.ymin), yy(g.ymax)))
		
		p.set_color(color.BLACK)
		string s = utf32_to_utf8(g.codes)
		p.draw_str(20, 20, "id={{index}}")
		
		
		p.draw_str(120, 20, "code={{g.code}}")
		#s.add(g.code)
		p.draw_str(300, 20, "char={{s}}")
		#p.draw_str(20,40,"{{g.xmin}}  {{g.xmax}}    {{g.lsb}} {{g.width}}")
		
		for c in g.contours
			p.set_color(color.BLACK)
			#print("--")
			draw_contour(p, c)
				
			for i in 0:len(c.p)
				int i1 = (i+1) % len(c.p)
				
				if (c.flags[i] & 1) != 0
					p.set_color(color.RED)
				else
					p.set_color(color.BLUE)
				p.draw_circle(xx(c.p[i].x), yy(c.p[i].y), 3)
		
		
		p.set_color(color.BLACK)
		p.set_line_dash([5,5])
		p.draw_line(xx(0),0, xx(0),h)
		p.draw_line(0,yy(0), w,yy(0))
		
	func draw_quad(p: Painter, a: complex, b: complex, c: complex)
		var prev = a
		for t in 0.1:0.9:0.1
			var cur = (1-t)*((1-t)*a + t*b) + t*((1-t)*b+t*c)
			p.draw_line(xx(prev.x), yy(prev.y), xx(cur.x), yy(cur.y))
			prev = cur
		p.draw_line(xx(prev.x), yy(prev.y), xx(c.x), yy(c.y))
	

	func draw_contour(p: Painter, c: TTFContour)
		for i in 0:len(c.p)
			bool on = ((c.flags[i] & 1) != 0)
			var cur = c.p[i]
			complex next = c.p[(i+1) % len(c.p)]
			bool next_on = ((c.flags[(i+1) % len(c.p)] & 1) != 0)
			complex nnext = c.p[(i+2) % len(c.p)]
			bool nnext_on = ((c.flags[(i+2) % len(c.p)] & 1) != 0)
			
			if on and next_on
				p.draw_line(xx(cur.x), yy(cur.y), xx(next.x), yy(next.y))
			else if on and not next_on and nnext_on
				draw_quad(p, cur, next, nnext)
			else if not on and not next_on and not nnext_on
				draw_quad(p, (cur+next)*0.5, next, (next+nnext)*0.5)
			else if on and not next_on and not nnext_on
				draw_quad(p, cur, next, (next+nnext)*0.5)
			else if not on and not next_on and nnext_on
				draw_quad(p, (cur+next)*0.5, next, nnext)		
		
TTF *font

func main(arg: string[])
	if len(arg) == 0
		print("call: <TTF_INPUT> [EXPORT]")
		return
	
	font = new TTF()
	if !font.load(arg[0])
		return
	
	if len(arg) > 1
		font.export(arg[1])
	
	var w = new FontWindow()
	w.show()
	w.run()
	print("ok")


