string hex(char[0]* p, int size)
	string s
	for i in 0:size
		s.add(p[i])
	return s.hex(false)
string i2h(int i)
	return hex(&i, 4)

class BEUShort
	char[2] c
	int int()
		int a = c[0]
		int b = c[1]
		return (a << 8) + b
class BESShort
	char[2] c
	int int()
		int a = c[0]
		int b = c[1]
		int r = (a << 8) + b
		if (r & 0x8000) != 0
			r -= 1<<16
		return r
class BELong
	char[4] x
	int int()
		int a = x[0]
		int b = x[1]
		int c = x[2]
		int d = x[3]
		return (a << 24) + (b << 16) + (c << 8) + d

class Fixed
	BEUShort a, b

class F214
	BESShort t
	float float()
		return t.int() / 16384.0

void read(File *f, char[0]* p, int size)
	string s = f.read(size)
	for i in 0:size
		p[i] = s[i]

int readUS(File *f)
	BEUShort t
	read(f, &t, 2)
	return t.int()

int readSS(File *f)
	BESShort t
	read(f, &t, 2)
	return t.int()

int readUB(File *f)
	int t = 0
	read(f, &t, 1)
	return t

float readF214(File *f)
	F214 t
	read(f, &t, 2)
	return t.float()

class TTFTableDirectory
	Fixed version
	BEUShort num_tables
	BEUShort seach_range
	BEUShort entry_selector
	BEUShort range_shift

class TTFTableDirectoryEntry
	BELong tag, chksum, offset, length
	string name()
		string s
		s.add(tag.x[0])
		s.add(tag.x[1])
		s.add(tag.x[2])
		s.add(tag.x[3])
		return s

class TTFMapHeader
	BEUShort version, num_tables

class TTFMapTable
	BEUShort platform, encoding
	BELong offset

class TTFContour
	string flags
	complex[] p
	

class TTFGlyph
	int xmin, ymin, xmax, ymax
	TTFContour[] contours

class TTF
	TTFTableDirectory td
	TTFTableDirectoryEntry[] tdentries
	
	TTFMapHeader mh
	TTFMapTable[] mt
	TTFGlyph[] glyphs
	
	File *f
	
	bool read_table_directory()
	
		read(f, &td, 12)
		int n = td.num_tables.int()
		if n > 1000
			return false
		for i in 0:n
			TTFTableDirectoryEntry e
			read(f, &e, 16)
			tdentries.add(e)
	
		for ee in tdentries
			print ee.name() + " " + ee.offset.int()
		return true
	
	bool read_mapping()
		TTFTableDirectoryEntry *te = get_table("cmap")
		if !te
			return false
		f.seek(te.offset.int(), true)
		
		read(f, &mh, 4)
		int n = mh.num_tables.int()
		print "map"
		print mh.version.int()
		print n
		if n > 100000
			return false
		for i in 0:n
			TTFMapTable t
			read(f, &t, 8)
			mt.add(t)
		for tt in mt
			print "-----"
			print tt.platform.int()
			print tt.encoding.int()
			print tt.offset.int()
			
		
		return true
	
	bool read_glyph(TTFGlyph g)
		//print "glyph---------------------------------"
		//print i2h(f.getPos())
		int num_contours = readSS(f)
		//print num_contours
		if num_contours == 0
			//print "--empty"
			return true
		if num_contours > 100
			print "too many contours: " + num_contours
			return false
		
		g.xmin = readSS(f)
		g.ymin = readSS(f)
		g.xmax = readSS(f)
		g.ymin = readSS(f)
		//print "" + g.xmin + ":" + g.xmax
		//print "" + g.ymin + ":" + g.ymax
		
		if num_contours < 0
			return read_glyph_compound(g)
		return read_glyph_simple(g, num_contours)
	
	bool read_glyph_compound(TTFGlyph g)
		//print "---compound"
		int n = 0
		
		while true
			//print "C"
			int flags = readUS(f)
			int glyph_index = readUS(f)
			//print glyph_index
		
			if (flags & 0x0001) != 0
				int arg1 = readSS(f)
				int arg2 = readSS(f)
			else
				arg1 = readUB(f)
				arg2 = readUB(f)
		
			if (flags & 0x0008) != 0
				float scale = readF214(f)
			else if (flags & 0x0040) != 0
				float xscale = readF214(f)
				float yscale = readF214(f)
			else if (flags & 0x0080) != 0
				float xxscale = readF214(f)
				float xyscale = readF214(f)
				float yxscale = readF214(f)
				float yyscale = readF214(f)
			
			if (flags & 0x0020) == 0
				break
			n ++
			if n > 50
				print "too many sub glyphs: " + n
				return false
		
		if (flags & 0x0100) != 0
			int instrlen = readUS(f)
			if instrlen > 10000
				print "too many instructions: " + instrlen
				return false
			f.read(instrlen)
			
		return true
	
	bool read_glyph_simple(TTFGlyph g, int num_contours)
		
		// endpoints
		int[] endpoints
		for i in 0:num_contours
			endpoints.add(readUS(f))
		
		for e in endpoints
			//print "e " + e
			if e > 1000
				print "invalid endpoint: " + e
				return false
		
		// instructions???
		int instrlen = readUS(f)
		if instrlen > 1000
			print "too many instructions: " + instrlen
			return false
		//print "instr: " + instrlen
		f.read(instrlen) // instr
		
		if num_contours > 0
			int num_points = endpoints[endpoints.num-1] + 1
			//print "points: " + num_points
		
			// flags
			string flags = read_contour_flags(num_points)
			//print flags.hex(false)
		
			//print i2h(f.getPos())
			float[] x = read_contour_coords(num_points, flags, 0x02, 0x10)
			float[] y = read_contour_coords(num_points, flags, 0x04, 0x20)
			//print x
			//print y
			
			int i0 = 0
			for e,ci in endpoints
				TTFContour c
				int i1 = e + 1
				for i in i0:i1
					c.flags.add(flags[i])
					c.p.add(complex(x[i], y[i]))
				i0 = i1
				g.contours.add(c)
				c.__delete__() // TODO repair kaba :P
				c.__init__()
		
		//print i2h(f.getPos())
		
		// 2byte alignment
		if (f.getPos() & 1) != 0
			f.read(1)
		return true
	
	string read_contour_flags(int n)
		string flags
		flags.resize(n)
		
		for i in 0:n
			//print i
			int c = readUB(f)
			flags[i] = c
			
			if (c & 0x08) != 0x00
				int cn = readUB(f)
				//print "repeat " + cn
				for j in 0:cn
					flags[i+j+1] = c
				i += cn
		
		return flags
	
	float[] read_contour_coords(int n, string flags, int mask_short, int mask_same)
		float[] x
		x.resize(n)
		float cur = 0
		for i in 0:n
			int ff = flags[i]
			
			bool is_same = (ff & mask_same) != 0
			bool is_short = (ff & mask_short) != 0
			if is_same and !is_short
				nil//print "rep"
			else
				int t = 0
				if is_short
					//print "1b"
					t = readUB(f)
					if !is_same
						t = -t
				else
					//print "2b"
					t = readSS(f)
				cur += t
			x[i] = cur
					
		return x
	
	bool read_glyphs()
		TTFTableDirectoryEntry *te = get_table("glyf")
		if !te
			print "no glyf table"
			return false
		f.seek(te.offset.int(), true)
		int _max = te.offset.int() + te.length.int() - 32
		
		while f.getPos() < _max
			TTFGlyph g
			if !read_glyph(g)
				return false
			glyphs.add(g)
			g.contours.clear()
		print "Glyphs: " + glyphs.num
		/*for gg in glyphs
			print "---- " + gg.contours.num
			for c in gg.contours
				print c.flags.hex(false)
				string s = ""
				for z in c.p
					s += "" + z + ", "
				print "[" + s + "]"*/
			
		
		return true
	
	bool load(string filename)

		f = FileOpen(filename)
		if !f
			return false
		f.setBinaryMode(true)
		
		if !read_table_directory()
			return false
		if !read_mapping()
			return false
		if !read_glyphs()
			return false
	
		delete f
		return true
		
	TTFTableDirectoryEntry* get_table(string tag)
		for ee in tdentries
			if tag == ee.name()
				return &ee
		return nil

void main(string[] arg)
	if arg.num == 0
		return
	
	TTF ttf
	ttf.load(arg[0])
	


