
class BEUShort
	char[2] c
	int int()
		int a = c[0]
		int b = c[1]
		return (a << 8) + b
class BESShort
	char[2] c
	int int()
		int a = c[0]
		int b = c[1]
		int r = (a << 8) + b
		if (r & 0x8000) != 0
			r -= 1<<16
		return r
class BELong
	char[4] x
	int int()
		int a = x[0]
		int b = x[1]
		int c = x[2]
		int d = x[3]
		return (a << 24) + (b << 16) + (c << 8) + d

class Fixed
	BEUShort a, b

void read(File *f, char[0]* p, int size)
	string s = f.read(size)
	for i in 0:size
		p[i] = s[i]

class TTFTableDirectory
	Fixed version
	BEUShort num_tables
	BEUShort seach_range
	BEUShort entry_selector
	BEUShort range_shift

class TTFTableDirectoryEntry
	BELong tag, chksum, offset, length
	string name()
		string s
		s.add(tag.x[0])
		s.add(tag.x[1])
		s.add(tag.x[2])
		s.add(tag.x[3])
		return s

class TTFMapHeader
	BEUShort version, num_tables

class TTFMapTable
	BEUShort platform, encoding
	BELong offset

class TTFGlyphHeader
	BESShort num_contours
	BESShort xmin, ymin, xmax, ymax

class TTFContour
	int dummy
	

class TTFGlyph
	TTFContour[] contours

class TTF
	TTFTableDirectory td
	TTFTableDirectoryEntry[] tdentries
	
	TTFMapHeader mh
	TTFMapTable[] mt
	
	File *f
	
	bool read_table_directory()
	
		read(f, &td, 12)
		int n = td.num_tables.int()
		if n > 1000
			return false
		for i in 0:n
			TTFTableDirectoryEntry e
			read(f, &e, 16)
			tdentries.add(e)
	
		for ee in tdentries
			print ee.name() + " " + ee.offset.int()
		return true
	
	bool read_mapping()
		int offset = get_offset("cmap")
		if offset < 0
			return false
		f.seek(offset, true)
		
		read(f, &mh, 4)
		int n = mh.num_tables.int()
		print "map"
		print mh.version.int()
		print n
		if n > 100000
			return false
		for i in 0:n
			TTFMapTable t
			read(f, &t, 8)
			mt.add(t)
		for tt in mt
			print "-----"
			print tt.platform.int()
			print tt.encoding.int()
			print tt.offset.int()
			
		
		return true
	
	bool read_glyph()
		int pos = f.getPos()
		TTFGlyphHeader gh
		read(f, &gh, 10)
		int n = gh.num_contours.int()
		print "glyph---------------------------------"
		print n
		if n < 0
			print "---compound"
			return false
		if n > 1000
			print "???"
			return false
			
		print "" + gh.xmin.int() + ":" + gh.xmax.int()
		print "" + gh.ymin.int() + ":" + gh.ymax.int()
		
		// endpoints
		BEUShort[] endpoints
		endpoints.resize(n)
		read(f, &endpoints[0], n*2)
		
		for e in endpoints
			print "e " + e.int()
		
		// instructions???
		BEUShort instrlen
		read(f, &instrlen, 2)
		n = instrlen.int()
		print "instr: " + n
		f.read(n) // instr
		
		int num_points = endpoints[endpoints.num-1].int()+1
		print "points: " + num_points
		
		// flags
		string flags = read_contour_flags(num_points)
		print flags.hex(false)
		
		float[] x = read_contour_coords(num_points, flags, 0x02, 0x10)
		float[] y = read_contour_coords(num_points, flags, 0x04, 0x20)
		print x
		print y
		
		print f.getPos()-pos
		/*string rr = f.read(16)
		print rr.hex(false)
		f.seek(-16+2, false)*/
		int ttt
		//read(f, &ttt, 2)
		return true
	
	string read_contour_flags(int n)
		string flags
		flags.resize(n)
		
		for i in 0:n
			char c, cn
			read(f, &c, 1)
			flags[i] = c
			
			if (c & 0x08) != 0x00
				print "repeat"
				read(f, &cn, 1)
				for j in 0:cn
					flags[i+j] = c
				i += cn
		
		return flags
	
	float[] read_contour_coords(int n, string flags, int mask_short, int mask_same)
		float[] x
		x.resize(n)
		float cur = 0
		for i in 0:n
			int ff = flags[i]
			
			bool is_same = (ff & mask_same) != 0
			bool is_short = (ff & mask_short) != 0
			if is_same and !is_short
				print "rep"
			else
				int t = 0
				BESShort t2
				if is_short
					print "1b"
					read(f, &t, 1)
					if !is_same
						t = -t
				else
					print "2b"
					read(f, &t2, 2)
					t = t2.int()
				cur += t
			x[i] = cur
					
		return x
	
	bool read_glyphs()
		int offset = get_offset("glyf")
		if offset < 0
			return false
		f.seek(offset, true)
		
		for i in 0:5
			if !read_glyph()
				return false
			
		
		return true
	
	bool load(string filename)

		f = FileOpen(filename)
		if !f
			return false
		f.setBinaryMode(true)
		
		if !read_table_directory()
			return false
		if !read_mapping()
			return false
		if !read_glyphs()
			return false
	
		delete f
		return true
		
	int get_offset(string tag)
		for ee in tdentries
			if tag == ee.name()
				return ee.offset.int()
		return -1

void main(string[] arg)
	if arg.num == 0
		return
	
	TTF ttf
	ttf.load(arg[0])
	


